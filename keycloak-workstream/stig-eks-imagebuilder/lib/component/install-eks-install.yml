name: Amazon EKS Optimized RHEL AMI
description: Installs Amazon EKS-optimized RHEL artifacts for Amazon EKS.
schemaVersion: 1.0

parameters:
  - AWSRegion:
      type: string
      default: "us-west-2"
  - KubernetesVersion:
      type: string
      default: "1.30"
  - GithubRepoUrl:
      type: string
      default: "https://github.com/aws-samples/amazon-eks-ami-rhel.git"
  - GithubDir:
      type: string
      default: "amazon-eks-ami-rhel"
  - BinaryBucketName:
      type: string
      default: "amazon-eks"
  - BinaryBucketRegion:
      type: string
      default: "us-west-2"
  - ContainerSELinuxVersion:
      type: string
      default: "*"
  - ContainerdUrl:
      type: string
      default: "https://api.github.com/repos/containerd/containerd/releases"
  - ContainerdVersion:
      type: string
      default: "1.7.27"
  - NerdctlUrl:
      type: string
      default: "https://api.github.com/repos/containerd/nerdctl/releases"
  - NerdctlVersion:
      type: string
      default: "*"
  - NodeAdmBuildImage:
      type: string
      default: "public.ecr.aws/eks-distro-build-tooling/golang:1.24"
  - PauseContainerImage:
      type: string
      default: "public.ecr.aws/eks-distro/kubernetes/pause:3.10"
  - RuncVersion:
      type: string
      default: "*"
  - TempPath:
      type: string
      default: "/tmp"
  - WorkerDir:
      type: string
      default: "worker"
  - HomePath:
      type: string
      default: "/home/ec2-user"
  - EnableEfa:
      type: string
      default: "false"
  - EnableFips:
      type: string
      default: "false"
  - SSMAgentVersion:
      type: string
      default: "latest"
phases:
  - name: build
    steps:
      - name: Setup
        action: ExecuteBash
        timeoutSeconds: 1200
        onFailure: Abort
        maxAttempts: 1
        inputs:
          commands:
            - sudo yum install -y git
            - mkdir -p {{ HomePath }}
            - cd {{ HomePath }}
            - git clone {{ GithubRepoUrl }}
            - sudo mkdir -p {{ TempPath }}/{{ WorkerDir}}/rootfs
            - sudo mkdir -p {{ TempPath }}/{{ WorkerDir}}/shared
            - sudo mkdir -p {{ TempPath }}/{{ WorkerDir}}/log-collector-script
            - sudo mkdir -p {{ TempPath }}/{{ WorkerDir}}/nodeadm
            - sudo cp -r {{ HomePath }}/{{ GithubDir }}/templates/shared/runtime/* {{ TempPath }}/{{ WorkerDir}}/shared/
            - sudo cp -r {{ HomePath }}/{{ GithubDir }}/templates/rhel/runtime/rootfs/* {{ TempPath }}/{{ WorkerDir}}/rootfs/
            - sudo cp -r {{ HomePath }}/{{ GithubDir }}/log-collector-script/linux/* {{ TempPath }}/{{ WorkerDir}}/log-collector-script/
            - sudo mkdir -p /etc/eks/log-collector-script/
            - sudo cp -v {{ TempPath }}/{{ WorkerDir}}/log-collector-script/eks-log-collector.sh /etc/eks/log-collector-script/
            - sudo cp -r {{ HomePath }}/{{ GithubDir }}/nodeadm/* {{ TempPath }}/{{ WorkerDir}}/nodeadm/
            - sudo cp -rv {{ TempPath }}/{{ WorkerDir}}/rootfs/* /
            - sudo chmod -R a+x {{ TempPath }}/{{ WorkerDir}}/shared/bin/
            - sudo cp -rv {{ TempPath }}/{{ WorkerDir}}/shared/bin/* /usr/bin/
      - name: EnableFIPS
        action: ExecuteBash
        timeoutSeconds: 1200
        onFailure: Abort
        maxAttempts: 1
        inputs:
          commands:
            - if [ "{{ EnableFips }}" = "true" ]; then ENABLE_FIPS={{ EnableFips }} bash {{ HomePath }}/{{ GithubDir }}/templates/rhel/provisioners/enable-fips.sh; fi
      - name: EnableEFA
        action: ExecuteBash
        timeoutSeconds: 1200
        onFailure: Abort
        maxAttempts: 1
        inputs:
          commands:
            - if [ "{{ EnableEfa }}" = "true" ]; then ENABLE_EFA={{ EnableEfa }} bash {{ HomePath }}/{{ GithubDir }}/templates/rhel/provisioners/limit-c-states.sh; fi
      - name: InstallWorker
        action: ExecuteBash
        timeoutSeconds: 1200
        onFailure: Abort
        maxAttempts: 1
        inputs:
          commands:
            - KUBERNETES_VERSION_AND_BUILD_DATE=$({{ HomePath }}/{{ GithubDir }}/hack/latest-binaries.sh {{ KubernetesVersion }} {{AWSRegion}} {{ BinaryBucketRegion }} {{ BinaryBucketName }})
            - KUBERNETES_VERSION=$(echo $KUBERNETES_VERSION_AND_BUILD_DATE | grep -oP 'kubernetes_version=\K[^\s]+')
            - KUBERNETES_BUILD_DATE=$(echo $KUBERNETES_VERSION_AND_BUILD_DATE | grep -oP 'kubernetes_build_date=\K[^\s]+')
            - |
              export KUBERNETES_VERSION=$KUBERNETES_VERSION
              export KUBERNETES_BUILD_DATE=$KUBERNETES_BUILD_DATE
              export AWS_REGION={{ AWSRegion }}
              export BINARY_BUCKET_NAME={{ BinaryBucketName }}
              export BINARY_BUCKET_REGION={{ BinaryBucketRegion }}
              export CONTAINER_SELINUX_VERSION={{ ContainerSELinuxVersion }}
              export CONTAINERD_URL={{ ContainerdUrl }}
              export CONTAINERD_VERSION={{ ContainerdVersion }}
              export NERDCTL_URL={{ NerdctlUrl }}
              export NERDCTL_VERSION={{ NerdctlVersion }}
              export RUNC_VERSION={{ RuncVersion }}
              export SSM_AGENT_VERSION={{ SSMAgentVersion }}
              export WORKING_DIR={{ TempPath }}/{{ WorkerDir}}
              printenv
              bash {{ HomePath }}/{{ GithubDir }}/templates/rhel/provisioners/install-worker.sh

      - name: InstallNodeAdm
        action: ExecuteBash
        timeoutSeconds: 6000
        onFailure: Abort
        maxAttempts: 3
        inputs:
          commands:
            - echo "Building NodeAdm into the system"
            - |
              printenv
              export BUILD_IMAGE={{ NodeAdmBuildImage }}
              export AWS_REGION={{ AWSRegion }}
              export PROJECT_DIR={{ TempPath }}/{{ WorkerDir}}/nodeadm
              printenv
              bash {{ HomePath }}/{{ GithubDir }}/templates/rhel/provisioners/install-nodeadm.sh
              echo "NodeAdm installed - Exit Code: $?"

      - name: CachePauseContainer
        action: ExecuteBash
        timeoutSeconds: 1200
        onFailure: Abort
        maxAttempts: 1
        inputs:
          commands:
            - PAUSE_CONTAINER_IMAGE={{ PauseContainerImage }} AWS_REGION={{ AWSRegion }} bash {{ HomePath }}/{{ GithubDir }}/templates/rhel/provisioners/cache-pause-container.sh

      - name: InstallEFA
        action: ExecuteBash
        timeoutSeconds: 1200
        onFailure: Abort
        maxAttempts: 1
        inputs:
          commands:
            - if [ "{{ EnableEfa }}" = "true" ]; then AWS_REGION={{ AWSRegion }} ENABLE_EFA={{ EnableEfa }} bash {{ HomePath }}/{{ GithubDir }}/templates/rhel/provisioners/install-efa.sh; fi

      - name: Cleanup
        action: ExecuteBash
        timeoutSeconds: 1200
        onFailure: Abort
        maxAttempts: 1
        inputs:
          commands:
            - bash {{ HomePath }}/{{ GithubDir }}/templates/rhel/provisioners/validate.sh
            - sudo rm -rf {{ HomePath }}/*
            - sudo rm -rf {{ TempPath }}/provisioners
            - sudo rm -rf {{ TempPath }}/hack
            - sudo rm -rf {{ TempPath }}/{{ WorkerDir}}
