#!/bin/bash
# pre-deploy-keycloak.sh - Creates RDS resources before deployment

# Get script directory and set relative paths
SCRIPT_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
BASE_DIR="$(dirname "$SCRIPT_DIR")"
RDS_OUTPUT_DIR="$BASE_DIR/rds"

# Get configuration from configuration.yaml
CONFIG_FILE="$BASE_DIR/../../../env/${ENVIRONMENT:-govcloud}/configuration.yaml"
CONFIG_REGION=$(grep "region:" "$CONFIG_FILE" | awk '{print $NF}' | tr -d '"')
CONFIG_CLUSTER_NAME=$(grep -A 1 "clusters:" "$CONFIG_FILE" | grep "name:" | head -1 | awk '{print $NF}' | tr -d '"')

# Set cluster name and region with fallbacks
CLUSTER_NAME=${1:-${CONFIG_CLUSTER_NAME:-"SharedServices"}}
REGION=${2:-${CONFIG_REGION:-"us-gov-west-1"}}

# VPC ID extraction
VPC_ID=$(grep -E "^\s*id:\s*vpc-" "$CONFIG_FILE" | head -1 | awk '{print $2}' | tr -d '"')
if [ -z "$VPC_ID" ]; then
  VPC_ID=$(grep -A 2 "\.vpc:" "$CONFIG_FILE" | grep "id:" | awk '{print $2}' | tr -d '"')
fi
if [ -z "$VPC_ID" ]; then
  VPC_ID=$(grep -A 5 "vpc:" "$CONFIG_FILE" | grep "id:" | awk '{print $2}' | tr -d '"')
fi

SUBNET_IDS=$(grep -A 10 "workerNodeGroupSubnets:" "$CONFIG_FILE" | grep "id:" | sed 's/.*id: //' | tr -d '"' | xargs)

if [ -z "$SUBNET_IDS" ]; then
  echo "Error: Could not retrieve subnet IDs from configuration.yaml"
  exit 1
fi

if [ -z "$VPC_ID" ]; then
  echo "Error: Could not retrieve VPC ID from configuration.yaml"
  exit 1
fi

# Create RDS output directory
mkdir -p "$RDS_OUTPUT_DIR"

# Get VPC CIDR block
VPC_CIDR=$(aws ec2 describe-vpcs --vpc-ids $VPC_ID --query 'Vpcs[0].CidrBlock' --output text --region $REGION)

if [ -z "$VPC_CIDR" ] || [ "$VPC_CIDR" = "None" ]; then
  echo "Warning: Could not retrieve VPC CIDR, using default 10.0.0.0/8"
  VPC_CIDR="10.0.0.0/8"
fi

# Create Security Group for RDS with ingress rules
cat > "$RDS_OUTPUT_DIR/keycloak-db-sg.yaml" << EOF
# This file is generated by the pre-deploy script with VPC-specific values
apiVersion: ec2.services.k8s.aws/v1alpha1
kind: SecurityGroup
metadata:
  name: keycloak-rds-sg
  namespace: keycloak
spec:
  name: eks-ack-keycloak-rds
  description: "Security group for Keycloak RDS Aurora PostgreSQL"
  vpcID: $VPC_ID
  tags:
    - key: Name
      value: eks-ack-keycloak-rds
  ingressRules:
    - ipProtocol: tcp
      fromPort: 5432
      toPort: 5432
      ipRanges:
        - cidrIP: "$VPC_CIDR"
          description: "Allow access from within VPC"
EOF

# Create DB subnet group with references to ACK-created subnets
cat > "$RDS_OUTPUT_DIR/keycloak-db-subnet-group.yaml" << EOF
# This file references ACK-created subnets instead of hardcoded subnet IDs
apiVersion: rds.services.k8s.aws/v1alpha1
kind: DBSubnetGroup
metadata:
  name: keycloak-db-subnet-group
  namespace: keycloak
spec:
  name: keycloak-db-subnet-group
  description: "Subnet group for Keycloak Aurora PostgreSQL database"
  subnetRefs:
    - from:
        name: keycloak-db-subnet-1
    - from:
        name: keycloak-db-subnet-2
EOF

# Create DB cluster with reference to ACK-managed security group
cat > "$RDS_OUTPUT_DIR/keycloak-db-cluster.yaml" << EOF
apiVersion: rds.services.k8s.aws/v1alpha1
kind: DBCluster
metadata:
  name: keycloak-db
  namespace: keycloak
spec:
  engine: aurora-postgresql
  engineVersion: "15.4"
  dbClusterIdentifier: keycloak-aurora-postgres
  masterUsername: postgres
  manageMasterUserPassword: true
  storageEncrypted: true
  kmsKeyID: alias/aws/rds
  backupRetentionPeriod: 7
  databaseName: keycloak
  dbSubnetGroupName: keycloak-db-subnet-group
  vpcSecurityGroupRefs:
    - from:
        name: keycloak-rds-sg
  serverlessV2ScalingConfiguration:
    minCapacity: 2
    maxCapacity: 8
EOF

# Create DB instance
cat > "$RDS_OUTPUT_DIR/keycloak-db-instance.yaml" << EOF
apiVersion: rds.services.k8s.aws/v1alpha1
kind: DBInstance
metadata:
  name: keycloak-db-instance
  namespace: keycloak
spec:
  dbInstanceIdentifier: keycloak-db-instance
  dbInstanceClass: db.serverless
  engine: aurora-postgresql
  dbClusterIdentifier: keycloak-aurora-postgres
  publiclyAccessible: false
EOF

# Update VPC ID in subnet patch file
OVERLAY_PATCH_FILE="$BASE_DIR/../../overlay/deployment-test/keycloak-db-subnets-patch.yaml"
if [ -f "$OVERLAY_PATCH_FILE" ]; then
  sed -i.bak "s|vpcID: vpc-[a-zA-Z0-9]*|vpcID: $VPC_ID|g" "$OVERLAY_PATCH_FILE"
  echo "Updated VPC ID in subnet patch file: $VPC_ID"
else
  echo "Warning: Subnet patch file not found at $OVERLAY_PATCH_FILE"
fi

echo "Pre-deploy: Created RDS resources and updated VPC ID"
echo "Next: Run 'kubectl apply -k k8s/overlay/deployment-test' to deploy infrastructure"