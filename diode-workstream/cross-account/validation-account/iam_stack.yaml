
Resources:
  TrailLogsRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: cloudtrail.amazonaws.com
        Version: "2012-10-17"

  TrailLogsRoleDefaultPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Statement:
          - Action:
              - logs:CreateLogStream
              - logs:PutLogEvents
            Effect: Allow
            Resource: !Sub arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:*
        Version: "2012-10-17"
      PolicyName: trailLogsRoleDefaultPolicy
      Roles:
        - Ref: TrailLogsRole


  Ec2ScannerCwLogsPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      Description: ""
      Path: /
      PolicyDocument:
        Statement:
          - Action:
              - logs:CreateLogGroup
              - logs:CreateLogStream
              - logs:DescribeLogStreams
              - logs:PutLogEvents
              - logs:PutRetentionPolicy
              - cloudwatch:PutMetricData
            Effect: Allow
            Resource: "*"
        Version: "2012-10-17"

  Ec2ScannerSqsPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      Description: ""
      Path: /
      PolicyDocument:
        Statement:
          - Action:
              - sqs:DeleteMessage
              - sqs:ReceiveMessage
              - sqs:SendMessage
            Effect: Allow
            Resource: !Sub 'arn:${AWS::Partition}:sqs:${AWS::Region}:${AWS::AccountId}:*'
        Version: "2012-10-17"

  Ec2ScannerS3Policy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      Description: ""
      Path: /
      PolicyDocument:
        Statement:
          - Action:
              - s3:DeleteObject
              - s3:GetBucketAcl
              - s3:GetObject
              - s3:GetObjectTagging
              - s3:ListBucket
              - s3:PutObject
              - s3:PutObjectTagging
            Effect: Allow
            Resource: "*"
        Version: "2012-10-17"

  Ec2ScannerSnsPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      Description: ""
      Path: /
      PolicyDocument:
        Statement:
          - Action:
              - sns:Publish
            Effect: Allow
            Resource: "*"
        Version: "2012-10-17"

  Ec2ScannerEc2Policy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      Description: ""
      Path: /
      PolicyDocument:
        Statement:
          - Action:
              - ec2:DescribeTags
            Effect: Allow
            Resource: "*"
        Version: "2012-10-17"

  Ec2ScannerRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
        Version: "2012-10-17"
      Description: Role to be assumed by EC2 Anti-Virus Scanner instances
      ManagedPolicyArns:
        - Fn::Join:
            - ""
            - - "arn:"
              - Ref: AWS::Partition
              - :iam::aws:policy/AmazonSSMManagedInstanceCore
        - Ref: Ec2ScannerCwLogsPolicy
        - Ref: Ec2ScannerSqsPolicy
        - Ref: Ec2ScannerS3Policy
        - Ref: Ec2ScannerEc2Policy
        - Ref: Ec2ScannerSnsPolicy

  Ec2ScannerInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles:
        - Ref: Ec2ScannerRole

  FailedTransferServiceRole:
    Type: AWS::IAM::Role
    Properties: 
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
        Version: "2012-10-17"
      ManagedPolicyArns:
        - Fn::Join:
            - ""
            - - "arn:"
              - Ref: AWS::Partition
              - :iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole

  FailedTransferServiceRoleDefaultPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Statement:
        # Should be locked down to only necessary SQS queue and SNS Topic
          - Action:
              - sqs:DeleteMessage
              - sqs:GetQueueAttributes
              - sqs:ReceiveMessage
            Effect: Allow
            Resource: !Sub 'arn:${AWS::Partition}:sqs:${AWS::Region}:${AWS::AccountId}:*'
          - Action: sns:Publish
            Effect: Allow
            Resource: !Sub 'arn:${AWS::Partition}:sns:${AWS::Region}:${AWS::AccountId}:*'
        Version: "2012-10-17"
      PolicyName: FailedTransferServiceRoleDefaultPolicy
      Roles:
        - Ref: FailedTransferServiceRole

  TransferResultLambdaRole:
    Type: AWS::IAM::Role
    Properties: 
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
        Version: "2012-10-17"
      ManagedPolicyArns:
        - Fn::Join:
            - ""
            - - "arn:"
              - Ref: AWS::Partition
              - :iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole

  TransferResultLambdaPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Statement:
        # Should be locked down to only necessary SQS queue and SNS Topic
          - Action:
              - sqs:DeleteMessage
              - sqs:GetQueueAttributes
              - sqs:ReceiveMessage
            Effect: Allow
            Resource: !Sub 'arn:${AWS::Partition}:sqs:${AWS::Region}:${AWS::AccountId}:*'
          - Action: sns:Publish
            Effect: Allow
            Resource: !Sub 'arn:${AWS::Partition}:sns:${AWS::Region}:${AWS::AccountId}:*'
          - Action:
              - dynamodb:PutItem
            Effect: Allow
            Resource: !Sub 'arn:${AWS::Partition}:dynamodb:${AWS::Region}:${AWS::AccountId}:*'
          - Action:
              - s3:GetObject
              - s3:GetObjectTagging
              - s3:PutObject
              - s3:PutObjectTagging
              - s3:DeleteObject
              - s3:GetBucketAcl
              - s3:ListBucket
            Effect: Allow
            Resource: !Sub 'arn:${AWS::Partition}:s3:::*'
        Version: "2012-10-17"
      PolicyName: TransferResultLambdaRoleDefaultPolicy
      Roles:
        - Ref: TransferResultLambdaRole



  DatatransferServiceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
        Version: "2012-10-17"
      ManagedPolicyArns:
        - Fn::Join:
            - ""
            - - "arn:"
              - Ref: AWS::Partition
              - :iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole


  datatransferServiceRoleDefaultPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Statement:
        # Should be locked down to only necessary SQS Queue
          - Action:
              - sqs:ChangeMessageVisibility
              - sqs:DeleteMessage
              - sqs:GetQueueAttributes
              - sqs:GetQueueUrl
              - sqs:ReceiveMessage
            Effect: Allow
            Resource: !Sub 'arn:${AWS::Partition}:sqs:${AWS::Region}:${AWS::AccountId}:*'
            # Should be locked down to only necessary DynamoDB Table
          - Action: dynamodb:PutItem
            Effect: Allow
            Resource: !Sub 'arn:${AWS::Partition}:dynamodb:${AWS::Region}:${AWS::AccountId}:*'
            # Should be locked down to only necessary S3 Buckets
          - Action:
              - s3:DeleteObject
              - s3:GetBucketAcl
              - s3:GetObject
              - s3:GetObjectTagging
              - s3:ListBucket
              - s3:PutObject
              - s3:PutObjectTagging
            Effect: Allow
            Resource: 
              - !Sub 'arn:${AWS::Partition}:s3:::*'
              - !Sub 'arn:${AWS::Partition}:s3:::*/*'
        Version: "2012-10-17"
      PolicyName: datatransferServiceRoleDefaultPolicy
      Roles:
        - Ref: DatatransferServiceRole

  ObjectTaggerRole:
    Type: AWS::IAM::Role
    Properties: 
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
        Version: "2012-10-17"
      ManagedPolicyArns:
        - Fn::Join:
            - ""
            - - "arn:"
              - Ref: AWS::Partition
              - :iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole

  objectTaggerRoleDefaultPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Statement:
        # Should be locked down to only necessary SQS Queue
          - Action:
              - sqs:SendMessage
            Effect: Allow
            Resource: !Sub 'arn:${AWS::Partition}:sqs:${AWS::Region}:${AWS::AccountId}:*'
        # Should be locked down to only necessary DynamoDB Table
          - Action: dynamodb:PutItem
            Effect: Allow
            Resource: !Sub 'arn:${AWS::Partition}:dynamodb:${AWS::Region}:${AWS::AccountId}:*'
          - Action:
              - s3:GetObjectTagging
              - s3:PutObjectTagging
            Effect: Allow
            Resource:
              - !Sub 'arn:${AWS::Partition}:s3:::*'
              - !Sub 'arn:${AWS::Partition}:s3:::*/*'
        Version: "2012-10-17"
      PolicyName: objectTaggerRoleDefaultPolicy
      Roles:
        - Ref: ObjectTaggerRole

  InvokeTaggerRole:
    Type: AWS::IAM::Role 
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: events.amazonaws.com
        Version: "2012-10-17"
  invokeTaggerPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Statement:
          - Action:
              - lambda:InvokeFunction
            Effect: Allow
            Resource: 
              - !Sub 'arn:${AWS::Partition}:lambda:${AWS::Region}:${AWS::AccountId}:function:*'
        Version: "2012-10-17"
      PolicyName: invokeTaggerPolicy
      Roles:
        - Ref: InvokeTaggerRole

  PresignGeneratorServiceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Action: sts:AssumeRole
          Effect: Allow
          Principal:
            Service: lambda.amazonaws.com
        Version: '2012-10-17'
      ManagedPolicyArns:
      - Fn::Join:
        - ''
        - - 'arn:'
          - Ref: AWS::Partition
          - ":iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole"

  presigngeneratorServiceRoleDefaultPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Statement:
        - Action: s3:PutObject
          Effect: Allow
          Resource:
          - !Sub 'arn:${AWS::Partition}:s3:::*'
          - !Sub 'arn:${AWS::Partition}:s3:::*/*'
        - Action:
          - logs:CreateLogGroup
          - logs:CreateLogStream
          - logs:PutLogEvents
          Effect: Allow
          Resource: !Sub 'arn:${AWS::Partition}:lambda:${AWS::Region}:${AWS::AccountId}:function:*'
        Version: '2012-10-17'
      PolicyName: presigngeneratorServiceRoleDefaultPolicy
      Roles:
      - Ref: PresignGeneratorServiceRole

  LoggingRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Action: sts:AssumeRole
          Effect: Allow
          Principal:
            Service: lambda.amazonaws.com
        Version: '2012-10-17'

  LoggingRoleDefaultPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Statement:
        - Action:
          - logs:CreateLogGroup
          - logs:CreateLogStream
          - logs:PutLogEvents
          Effect: Allow
          Resource: !Sub 'arn:${AWS::Partition}:lambda:${AWS::Region}:${AWS::AccountId}:function:*'
        Version: '2012-10-17'
      PolicyName: LoggingRoleDefaultPolicy
      Roles:
      - Ref: LoggingRole

  FileuploaderCloudWatchRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Action: sts:AssumeRole
          Effect: Allow
          Principal:
            Service: apigateway.amazonaws.com
        Version: '2012-10-17'
      ManagedPolicyArns:
      - Fn::Join:
        - ''
        - - 'arn:'
          - Ref: AWS::Partition
          - ":iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs"
    UpdateReplacePolicy: Retain
    DeletionPolicy: Retain

  APILambdaInvokeRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Action: sts:AssumeRole
          Effect: Allow
          Principal:
            Service: apigateway.amazonaws.com
        Version: '2012-10-17'

  APILambdaInvokeRoleDefaultPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Statement:
        - Action: lambda:InvokeFunction
          Effect: Allow
          Resource: 
          - !Sub 'arn:${AWS::Partition}:lambda:${AWS::Region}:${AWS::AccountId}:function:*'
          - Fn::Join:
            - ''
            - - 'arn:'
              - Ref: AWS::Partition
              - ':execute-api:'
              - Ref: AWS::Region
              - ":"
              - Ref: AWS::AccountId
              - ":*/*/*/*"
        Version: '2012-10-17'
      PolicyName: APILambdaInvokeRoleDefaultPolicy
      Roles:
      - Ref: APILambdaInvokeRole

  PresignGeneratorServiceRole2:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Action: sts:AssumeRole
          Effect: Allow
          Principal:
            Service: lambda.amazonaws.com
        Version: '2012-10-17'
      ManagedPolicyArns:
      - Fn::Join:
        - ''
        - - 'arn:'
          - Ref: AWS::Partition
          - ":iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole"

  presigngeneratorServiceRoleDefaultPolicy2:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Statement:
        - Action: s3:PutObject
          Effect: Allow
          Resource:
          - !Sub 'arn:${AWS::Partition}:s3:::*'
          - !Sub 'arn:${AWS::Partition}:s3:::*/*'
        - Action:
          - logs:CreateLogGroup
          - logs:CreateLogStream
          - logs:PutLogEvents
          Effect: Allow
          Resource: !Sub 'arn:${AWS::Partition}:lambda:${AWS::Region}:${AWS::AccountId}:function:*'
        Version: '2012-10-17'
      PolicyName: presigngeneratorServiceRoleDefaultPolicy2
      Roles:
      - Ref: PresignGeneratorServiceRole2

  IngestWAFRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Action: sts:AssumeRole
          Effect: Allow
          Principal:
            Service: wafv2.amazonaws.com
        Version: '2012-10-17'

  IngestWAFRoleDefaultPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Statement:
        - Action:
          - logs:CreateLogGroup
          - logs:CreateLogStream
          - logs:DescribeLogGroups
          - logs:DescribeLogStreams
          - logs:FilterLogEvents
          - logs:GetLogEvents
          - logs:PutLogEvents
          Effect: Allow
          Resource: !Sub 'arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:*'
        Version: '2012-10-17'
      PolicyName: IngestWAFRoleDefaultPolicy
      Roles:
      - Ref: IngestWAFRole

  TransferLoggingRole:
      Type: "AWS::IAM::Role"
      Properties:
        AssumeRolePolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: "Allow"
              Principal:
                Service: "transfer.amazonaws.com"
              Action: "sts:AssumeRole"
        Policies:
          - PolicyName: "TransferLoggingPolicy"
            PolicyDocument:
              Version: "2012-10-17"
              Statement:
                - Effect: "Allow"
                  Action:
                    - "s3:PutObject"
                    - "s3:GetBucketAcl"
                    - "s3:PutBucketAcl"
                  Resource: !Sub 'arn:${AWS::Partition}:s3:::*'
          - PolicyName: "AWSTransferLoggingAccess"
            PolicyDocument:
              Version: "2012-10-17"
              Statement:
                - Effect: "Allow"
                  Action:
                    - "logs:CreateLogGroup"
                    - "logs:CreateLogStream"
                    - "logs:PutLogEvents"
                  Resource: !Sub 'arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:*'

  TransferUserRole:
      Type: "AWS::IAM::Role"
      Properties:
        AssumeRolePolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: "Allow"
              Principal:
                Service: "transfer.amazonaws.com"
              Action: "sts:AssumeRole"
        Policies:
          - PolicyName: "TransferUserPolicy"
            PolicyDocument:
              Version: "2012-10-17"
              Statement:
                - Effect: "Allow"
                  Action:
                    - "s3:PutObject"
                    - "s3:GetBucketAcl"
                    - "s3:PutBucketAcl"
                    - "s3:GetObject"
                    - "s3:GetObjectVersion"
                    - "s3:PutObjectVersion"
                    - "s3:DeleteObjectVersion"
                    - "s3:ListBucket"
                    - "s3:DeleteObject"
                    - "s3:GetBucketLocation"
                  Resource:
                    - !Sub 'arn:${AWS::Partition}:s3:::*'
                    - !Sub 'arn:${AWS::Partition}:s3:::*/*'


Outputs:
  # LogicalID:
  #   Description: Description about the value
  #   Value: Value to Return
  #   Export:
  #     Name: Name of resource to Export
  TransferLoggingRoleExport: 
    Description: Cloudtrail Logs Role ARN for SFTP
    Value:  !GetAtt TransferLoggingRole.Arn
    Export:
      Name: !Sub "${AWS::StackName}-TransferLoggingRole"
  TransferUserRoleExport:
    Description: SFTP Transfer User Role ARN
    Value:  !GetAtt TransferUserRole.Arn
    Export:
      Name: !Sub "${AWS::StackName}-TransferUserRole"

  TrailLogsRoleExport:
    Description: Cloudtrail Logs Role ARN
    Value:  !GetAtt TrailLogsRole.Arn
    Export:
      Name: !Sub "${AWS::StackName}-TrailLogsRole"
  Ec2ScannerInstanceProfileExport:
    Description: Ec2ScannerInstanceProfile ARN
    Value:  !GetAtt Ec2ScannerInstanceProfile.Arn
    Export:
      Name: !Sub "${AWS::StackName}-Ec2ScannerInstanceProfile"

  FailedTransferServiceRoleExport:
    Description: FailedTransferServiceRole ARN
    Value:  !GetAtt FailedTransferServiceRole.Arn
    Export:
      Name: !Sub "${AWS::StackName}-FailedTransferServiceRole"

  DatatransferServiceRoleExport:
    Description: DatatransferServiceRole ARN
    Value:  !GetAtt DatatransferServiceRole.Arn
    Export:
      Name: !Sub "${AWS::StackName}-DatatransferServiceRole"

  ObjectTaggerRoleExport:
    Description: ObjectTaggerRole ARN
    Value:  !GetAtt ObjectTaggerRole.Arn
    Export:
      Name: !Sub "${AWS::StackName}-ObjectTaggerRole"

  InvokeTaggerRoleExport:
    Description: InvokeTaggerRole ARN
    Value:  !GetAtt InvokeTaggerRole.Arn
    Export:
      Name: !Sub "${AWS::StackName}-InvokeTaggerRole"

  PresignGeneratorServiceRoleExport:
    Description: PresignGeneratorServiceRole ARN
    Value:  !GetAtt PresignGeneratorServiceRole.Arn
    Export:
      Name: !Sub "${AWS::StackName}-PresignGeneratorServiceRole"

  LoggingRoleExport:
    Description: LoggingRole ARN
    Value:  !GetAtt LoggingRole.Arn
    Export:
      Name: !Sub "${AWS::StackName}-LoggingRole"

  FileuploaderCloudWatchRoleExport:
    Description: FileuploaderCloudWatchRole ARN
    Value:  !GetAtt FileuploaderCloudWatchRole.Arn
    Export:
      Name: !Sub "${AWS::StackName}-FileuploaderCloudWatchRole"

  APILambdaInvokeRoleExport:
    Description: APILambdaInvokeRole ARN
    Value:  !GetAtt APILambdaInvokeRole.Arn
    Export:
      Name: !Sub "${AWS::StackName}-APILambdaInvokeRole"

  PresignGeneratorServiceRole2Export:
    Description: PresignGeneratorServiceRole2 ARN
    Value:  !GetAtt PresignGeneratorServiceRole2.Arn
    Export:
      Name: !Sub "${AWS::StackName}-PresignGeneratorServiceRole2"

  IngestWAFRoleExport:
    Description: IngestWAFRole ARN
    Value:  !GetAtt IngestWAFRole.Arn
    Export:
      Name: !Sub "${AWS::StackName}-IngestWAFRole"
