Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: General Parameters
        Parameters:
          - pIamPrefix
          - pPermissionsBoundaryPolicyArn

    ParameterLabels:
      pIamPrefix:
        default: IAM Prefix
      pPermissionsBoundaryPolicyArn:
        default: Permissions Boundary Policy ARN

Parameters:
  pIamPrefix:
    Type: String
    Description: Prefix for IAM resources
    Default: AFC2S_
    AllowedValues: [AFC2S_]
    ConstraintDescription: Must be "AFC2S_"

  pPermissionsBoundaryPolicyArn:
    Type: String
    Description: ARN of the policy that is used to set the permissions boundary for IAM resources
    AllowedPattern: ^arn:(aws|aws-us-gov):iam::(\d{12}|aws):policy/.*
    ConstraintDescription: Must be a valid IAM policy ARN

Resources:
  TrailLogsRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${pIamPrefix}TrailLogsRole
      PermissionsBoundary: !Ref pPermissionsBoundaryPolicyArn
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: cloudtrail.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: !Sub ${pIamPrefix}trailLogsRoleDefaultPolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: !Sub arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:*

  Ec2ScannerCwLogsPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      ManagedPolicyName: !Sub ${pIamPrefix}Ec2ScannerCwLogsPolicy
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Action:
              - logs:CreateLogGroup
              - logs:CreateLogStream
              - logs:DescribeLogStreams
              - logs:PutLogEvents
              - logs:PutRetentionPolicy
              - cloudwatch:PutMetricData
            Effect: Allow
            Resource: "*"

  Ec2ScannerSqsPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      ManagedPolicyName: !Sub ${pIamPrefix}Ec2ScannerSqsPolicy
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - sqs:DeleteMessage
              - sqs:ReceiveMessage
              - sqs:SendMessage
            Resource: !Sub arn:${AWS::Partition}:sqs:${AWS::Region}:${AWS::AccountId}:*

  Ec2ScannerS3Policy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      ManagedPolicyName: !Sub ${pIamPrefix}Ec2ScannerS3Policy
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - s3:DeleteObject
              - s3:GetBucketAcl
              - s3:GetObject
              - s3:GetObjectTagging
              - s3:ListBucket
              - s3:PutObject
              - s3:PutObjectTagging
            Resource: "*"

  Ec2ScannerSnsPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      ManagedPolicyName: !Sub ${pIamPrefix}Ec2ScannerSnsPolicy
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action: sns:Publish
            Resource: "*"

  Ec2ScannerEc2Policy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      ManagedPolicyName: !Sub ${pIamPrefix}Ec2ScannerEc2Policy
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action: ec2:DescribeTags
            Resource: "*"

  Ec2ScannerRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${pIamPrefix}Ec2ScannerRole
      PermissionsBoundary: !Ref pPermissionsBoundaryPolicyArn
      Description: Role to be assumed by EC2 Anti-Virus Scanner instances
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - !Sub arn:${AWS::Partition}:iam::aws:policy/AmazonSSMManagedInstanceCore
        - !Ref Ec2ScannerCwLogsPolicy
        - !Ref Ec2ScannerSqsPolicy
        - !Ref Ec2ScannerS3Policy
        - !Ref Ec2ScannerEc2Policy
        - !Ref Ec2ScannerSnsPolicy

  Ec2ScannerInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles: [!Ref Ec2ScannerRole]

  ## Commented out as this does not seem to be used
  # FailedTransferServiceRole:
  #   Type: AWS::IAM::Role
  #   Properties:
  #     RoleName: !Sub ${pIamPrefix}FailedTransferServiceRole
  #     PermissionsBoundary: !Ref pPermissionsBoundaryPolicyArn
  #     AssumeRolePolicyDocument:
  #       Version: 2012-10-17
  #       Statement:
  #         - Effect: Allow
  #           Principal:
  #             Service: lambda.amazonaws.com
  #           Action: sts:AssumeRole
  #     ManagedPolicyArns:
  #       - !Sub arn:${AWS::Partition}:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole
  #     Policies:
  #       - PolicyName: !Sub ${pIamPrefix}FailedTransferServiceRoleDefaultPolicy
  #         PolicyDocument:
  #           Version: 2012-10-17
  #           Statement:
  #             # Should be locked down to only necessary SQS queue and SNS Topic
  #             - Effect: Allow
  #               Action:
  #                 - sqs:DeleteMessage
  #                 - sqs:GetQueueAttributes
  #                 - sqs:ReceiveMessage
  #               Resource: !Sub arn:${AWS::Partition}:sqs:${AWS::Region}:${AWS::AccountId}:*

  #             - Effect: Allow
  #               Action: sns:Publish
  #               Resource: !Sub arn:${AWS::Partition}:sns:${AWS::Region}:${AWS::AccountId}:*

  TransferResultLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${pIamPrefix}TransferResultLambdaRole
      PermissionsBoundary: !Ref pPermissionsBoundaryPolicyArn
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - !Sub arn:${AWS::Partition}:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole
      Policies:
        - PolicyName: !Sub ${pIamPrefix}TransferResultLambdaRoleDefaultPolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              # Should be locked down to only necessary SQS queue and SNS Topic
              - Effect: Allow
                Action:
                  - sqs:DeleteMessage
                  - sqs:GetQueueAttributes
                  - sqs:ReceiveMessage
                Resource: !Sub arn:${AWS::Partition}:sqs:${AWS::Region}:${AWS::AccountId}:*

              - Effect: Allow
                Action: sns:Publish
                Resource: !Sub arn:${AWS::Partition}:sns:${AWS::Region}:${AWS::AccountId}:*

              - Effect: Allow
                Action: dynamodb:PutItem
                Resource: !Sub arn:${AWS::Partition}:dynamodb:${AWS::Region}:${AWS::AccountId}:*

              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:GetObjectTagging
                  - s3:PutObject
                  - s3:PutObjectTagging
                  - s3:DeleteObject
                  - s3:GetBucketAcl
                  - s3:ListBucket
                Resource: !Sub arn:${AWS::Partition}:s3:::*

  DataTransferServiceRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${pIamPrefix}DataTransferServiceRole
      PermissionsBoundary: !Ref pPermissionsBoundaryPolicyArn
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - !Sub arn:${AWS::Partition}:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole
      Policies:
        - PolicyName: !Sub ${pIamPrefix}DataTransferServiceRoleDefaultPolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              # Should be locked down to only necessary SQS Queue
              - Effect: Allow
                Action:
                  - sqs:ChangeMessageVisibility
                  - sqs:DeleteMessage
                  - sqs:GetQueueAttributes
                  - sqs:GetQueueUrl
                  - sqs:ReceiveMessage
                Resource: !Sub arn:${AWS::Partition}:sqs:${AWS::Region}:${AWS::AccountId}:*

                # Should be locked down to only necessary DynamoDB Table
              - Effect: Allow
                Action: dynamodb:PutItem
                Resource: !Sub arn:${AWS::Partition}:dynamodb:${AWS::Region}:${AWS::AccountId}:*

                # Should be locked down to only necessary S3 Buckets
              - Effect: Allow
                Action:
                  - s3:DeleteObject
                  - s3:GetBucketAcl
                  - s3:GetObject
                  - s3:GetObjectTagging
                  - s3:ListBucket
                  - s3:PutObject
                  - s3:PutObjectTagging
                Resource: !Sub arn:${AWS::Partition}:s3:::*

  ObjectTaggerRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${pIamPrefix}ObjectTaggerRole
      PermissionsBoundary: !Ref pPermissionsBoundaryPolicyArn
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - !Sub arn:${AWS::Partition}:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole
      Policies:
        - PolicyName: !Sub ${pIamPrefix}ObjectTaggerRoleDefaultPolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              # Should be locked down to only necessary SQS Queue
              - Effect: Allow
                Action: sqs:SendMessage
                Resource: !Sub arn:${AWS::Partition}:sqs:${AWS::Region}:${AWS::AccountId}:*

              # Should be locked down to only necessary DynamoDB Table
              - Effect: Allow
                Action: dynamodb:PutItem
                Resource: !Sub arn:${AWS::Partition}:dynamodb:${AWS::Region}:${AWS::AccountId}:*

              - Effect: Allow
                Action:
                  - s3:GetObjectTagging
                  - s3:PutObjectTagging
                Resource: !Sub arn:${AWS::Partition}:s3:::*

  InvokeTaggerRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${pIamPrefix}InvokeTaggerRole
      PermissionsBoundary: !Ref pPermissionsBoundaryPolicyArn
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: events.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: !Sub ${pIamPrefix}InvokeTaggerPolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action: lambda:InvokeFunction
                Resource: !Sub arn:${AWS::Partition}:lambda:${AWS::Region}:${AWS::AccountId}:function:*

  PresignGeneratorServiceRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${pIamPrefix}PresignGeneratorServiceRole
      PermissionsBoundary: !Ref pPermissionsBoundaryPolicyArn
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - !Sub arn:${AWS::Partition}:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole
      Policies:
        - PolicyName: !Sub ${pIamPrefix}PresignGeneratorServiceRoleDefaultPolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action: s3:PutObject
                Resource: !Sub arn:${AWS::Partition}:s3:::*

              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: !Sub arn:${AWS::Partition}:lambda:${AWS::Region}:${AWS::AccountId}:function:*

  LoggingRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${pIamPrefix}LoggingRole
      PermissionsBoundary: !Ref pPermissionsBoundaryPolicyArn
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: !Sub ${pIamPrefix}LoggingRoleDefaultPolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: !Sub arn:${AWS::Partition}:lambda:${AWS::Region}:${AWS::AccountId}:function:*

  FileUploaderCloudWatchRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${pIamPrefix}FileUploaderCloudWatchRole
      PermissionsBoundary: !Ref pPermissionsBoundaryPolicyArn
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: apigateway.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - !Sub arn:${AWS::Partition}:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs

  APILambdaInvokeRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${pIamPrefix}APILambdaInvokeRole
      PermissionsBoundary: !Ref pPermissionsBoundaryPolicyArn
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: apigateway.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: !Sub ${pIamPrefix}APILambdaInvokeRoleDefaultPolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action: lambda:InvokeFunction
                Resource:
                  - !Sub arn:${AWS::Partition}:lambda:${AWS::Region}:${AWS::AccountId}:function:*
                  - !Sub arn:${AWS::Partition}:execute-api:${AWS::Region}:${AWS::AccountId}:*/*/*/*

  ## Commented out as this does not seem to be used
  # PresignGeneratorServiceRole2:
  #   Type: AWS::IAM::Role
  #   Properties:
  #     RoleName: !Sub ${pIamPrefix}PresignGeneratorServiceRole2
  #     PermissionsBoundary: !Ref pPermissionsBoundaryPolicyArn
  #     AssumeRolePolicyDocument:
  #       Version: 2012-10-17
  #       Statement:
  #         - Effect: Allow
  #           Principal:
  #             Service: lambda.amazonaws.com
  #           Action: sts:AssumeRole
  #     ManagedPolicyArns:
  #       - !Sub arn:${AWS::Partition}:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole
  #     Policies:
  #       - PolicyName: !Sub ${pIamPrefix}PresignGeneratorServiceRoleDefaultPolicy2
  #         PolicyDocument:
  #           Version: 2012-10-17
  #           Statement:
  #             - Effect: Allow
  #               Action: s3:PutObject
  #               Resource: !Sub arn:${AWS::Partition}:s3:::*

  #             - Effect: Allow
  #               Action:
  #                 - logs:CreateLogGroup
  #                 - logs:CreateLogStream
  #                 - logs:PutLogEvents
  #               Resource: !Sub arn:${AWS::Partition}:lambda:${AWS::Region}:${AWS::AccountId}:function:*

  IngestWAFRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${pIamPrefix}IngestWAFRole
      PermissionsBoundary: !Ref pPermissionsBoundaryPolicyArn
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: wafv2.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: !Sub ${pIamPrefix}IngestWAFRoleDefaultPolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:DescribeLogGroups
                  - logs:DescribeLogStreams
                  - logs:FilterLogEvents
                  - logs:GetLogEvents
                  - logs:PutLogEvents
                Resource: !Sub arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:*

  TransferLoggingRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${pIamPrefix}TransferLoggingRole
      PermissionsBoundary: !Ref pPermissionsBoundaryPolicyArn
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: transfer.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: !Sub ${pIamPrefix}TransferLoggingPolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - s3:PutObject
                  - s3:GetBucketAcl
                  - s3:PutBucketAcl
                Resource: !Sub arn:${AWS::Partition}:s3:::*
        - PolicyName: !Sub ${pIamPrefix}AWSTransferLoggingAccess
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: !Sub arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:*

  TransferUserRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${pIamPrefix}TransferUserRole
      PermissionsBoundary: !Ref pPermissionsBoundaryPolicyArn
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: transfer.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: !Sub ${pIamPrefix}TransferUserPolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - s3:PutObject
                  - s3:GetBucketAcl
                  - s3:PutBucketAcl
                  - s3:GetObject
                  - s3:GetObjectVersion
                  - s3:PutObjectVersion
                  - s3:DeleteObjectVersion
                  - s3:ListBucket
                  - s3:DeleteObject
                  - s3:GetBucketLocation
                Resource: !Sub arn:${AWS::Partition}:s3:::*

Outputs:
  TransferLoggingRoleExport:
    Description: Cloudtrail Logs Role ARN for SFTP
    Value: !GetAtt TransferLoggingRole.Arn
    Export:
      Name: TransferLoggingRoleArn

  TransferUserRoleExport:
    Description: SFTP Transfer User Role ARN
    Value: !GetAtt TransferUserRole.Arn
    Export:
      Name: TransferUserRoleArn

  TrailLogsRoleExport:
    Description: Cloudtrail Logs Role ARN
    Value: !GetAtt TrailLogsRole.Arn
    Export:
      Name: TrailLogsRoleArn

  Ec2ScannerInstanceProfileExport:
    Description: Ec2ScannerInstanceProfile ARN
    Value: !GetAtt Ec2ScannerInstanceProfile.Arn
    Export:
      Name: Ec2ScannerInstanceProfile

  # FailedTransferServiceRoleExport:
  #   Description: FailedTransferServiceRole ARN
  #   Value: !GetAtt FailedTransferServiceRole.Arn
  #   Export:
  #     Name: FailedTransferServiceRole

  DataTransferServiceRoleExport:
    Description: DatatransferServiceRole ARN
    Value: !GetAtt DataTransferServiceRole.Arn
    Export:
      Name: DataTransferServiceRoleArn

  TransferResultLambdaRoleExport:
    Description: TransferResultLambdaRole ARN
    Value: !GetAtt TransferResultLambdaRole.Arn
    Export:
      Name: TransferResultLambdaRoleArn

  ObjectTaggerRoleExport:
    Description: ObjectTaggerRole ARN
    Value: !GetAtt ObjectTaggerRole.Arn
    Export:
      Name: ObjectTaggerRoleArn

  InvokeTaggerRoleExport:
    Description: InvokeTaggerRole ARN
    Value: !GetAtt InvokeTaggerRole.Arn
    Export:
      Name: InvokeTaggerRole

  PresignGeneratorServiceRoleExport:
    Description: PresignGeneratorServiceRole ARN
    Value: !GetAtt PresignGeneratorServiceRole.Arn
    Export:
      Name: PresignGeneratorServiceRoleArn

  LoggingRoleExport:
    Description: LoggingRole ARN
    Value: !GetAtt LoggingRole.Arn
    Export:
      Name: LoggingRoleArn

  FileUploaderCloudWatchRoleExport:
    Description: FileuploaderCloudWatchRole ARN
    Value: !GetAtt FileUploaderCloudWatchRole.Arn
    Export:
      Name: FileUploaderCloudWatchRoleArn

  APILambdaInvokeRoleExport:
    Description: APILambdaInvokeRole ARN
    Value: !GetAtt APILambdaInvokeRole.Arn
    Export:
      Name: APILambdaInvokeRoleArn

  # PresignGeneratorServiceRole2Export:
  #   Description: PresignGeneratorServiceRole2 ARN
  #   Value: !GetAtt PresignGeneratorServiceRole2.Arn
  #   Export:
  #     Name: PresignGeneratorServiceRole2

  IngestWAFRoleExport:
    Description: IngestWAFRole ARN
    Value: !GetAtt IngestWAFRole.Arn
    Export:
      Name: IngestWAFRoleArn
