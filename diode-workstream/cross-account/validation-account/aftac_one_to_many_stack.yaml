AWSTemplateFormatVersion: '2010-09-09'
Description: 'AFTAC One-to-Many Stack with EventBridge rule and Lambda function'

Parameters:
  SourceBucket:
    Type: String
    Description: 'Source S3 bucket name that will trigger the Lambda function'

  
  LambdaCodeBucket:
    Type: String
    Description: 'S3 bucket containing the Lambda deployment package'

  
  LambdaCodeKey:
    Type: String

    Description: 'S3 key for the Lambda deployment package.  Must be a zip file that contains all of the lambda code'
  
  NotificationEmail:
    Type: String
    Description: 'Email address for failure notifications'
    AllowedPattern: '^[^@]+@[^@]+\.[^@]+$'
    ConstraintDescription: 'Must be a valid email address'

  RolePrefix:
    Type: String
    Default: 'AFC2S_'
    Description: 'Prefix for IAM Roles'
  PermissionsBoundaryARN:
    Type: String
    Description: 'Permissions Boundary ARN to apply to all roles'


Resources:
  # IAM Role for Lambda Function
  OneToManyLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub '${RolePrefix}OneToManyLambdaRole'
      PermissionsBoundary: !Ref PermissionsBoundaryARN
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - !Sub 'arn:${AWS::Partition}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole'
      Policies:
        - PolicyName: S3AccessPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:GetObjectTagging
                  - s3:PutObject
                  - s3:PutObjectTagging
                  - s3:DeleteObject
                Resource: 
                  - !Sub 'arn:${AWS::Partition}:s3:::${SourceBucket}/*'
                  - !Sub 'arn:${AWS::Partition}:s3:::*/*'
              - Effect: Allow
                Action:
                  - s3:ListBucket
                Resource: 
                  - !Sub 'arn:${AWS::Partition}:s3:::${SourceBucket}'
                  - !Sub 'arn:${AWS::Partition}:s3:::*'
        - PolicyName: ParameterStoreAccessPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - ssm:GetParameter
                  - ssm:GetParameters
                Resource: !Sub 'arn:${AWS::Partition}:ssm:${AWS::Region}:${AWS::AccountId}:parameter/pipeline/destination/*'
        - PolicyName: SNSPublishPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - sns:Publish
                Resource: !Ref FailureNotificationTopic
        - PolicyName: KMSAccessPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - kms:GenerateDataKey
                  - kms:Encrypt
                  - kms:Decrypt
                Resource: '*'

  # Lambda Function
  OneToManyLambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: one-to-many-processor
      Runtime: python3.9
      Handler: lambda_function.lambda_handler
      Role: !GetAtt OneToManyLambdaRole.Arn
      Code:
        S3Bucket: !Ref LambdaCodeBucket
        S3Key: !Ref LambdaCodeKey
      Timeout: 300
      Environment:
        Variables:
          SOURCE_BUCKET: !Ref SourceBucket
          SNS_TOPIC_ARN: !Ref FailureNotificationTopic


  # Custom Resource Lambda for S3 Notification
  S3NotificationCustomResourceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - !Sub 'arn:${AWS::Partition}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole'
      Policies:
        - PolicyName: S3NotificationPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - s3:GetBucketNotification
                  - s3:PutBucketNotification
                Resource: !Sub 'arn:${AWS::Partition}:s3:::${SourceBucket}'

  S3NotificationCustomResourceFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: s3-notification-custom-resource
      Runtime: python3.9
      Handler: index.lambda_handler
      Role: !GetAtt S3NotificationCustomResourceRole.Arn
      Timeout: 60
      Code:
        ZipFile: |
          import boto3
          import json
          import cfnresponse
          
          def lambda_handler(event, context):
              try:
                  s3 = boto3.client('s3')
                  bucket = event['ResourceProperties']['BucketName']
                  lambda_arn = event['ResourceProperties']['LambdaArn']
                  
                  if event['RequestType'] == 'Create' or event['RequestType'] == 'Update':
                      # Get existing notification configuration
                      try:
                          response = s3.get_bucket_notification_configuration(Bucket=bucket)
                      except:
                          response = {}
                      
                      # Add Lambda configuration
                      lambda_configs = response.get('LambdaFunctionConfigurations', [])
                      lambda_configs.append({
                          'Id': 'OneToManyLambdaTrigger',
                          'LambdaFunctionArn': lambda_arn,
                          'Events': ['s3:ObjectCreated:*']
                      })
                      
                      notification_config = {
                          'LambdaFunctionConfigurations': lambda_configs
                      }
                      
                      # Preserve other configurations
                      for key in ['TopicConfigurations', 'QueueConfigurations']:
                          if key in response:
                              notification_config[key] = response[key]
                      
                      s3.put_bucket_notification_configuration(
                          Bucket=bucket,
                          NotificationConfiguration=notification_config
                      )
                  
                  elif event['RequestType'] == 'Delete':
                      # Remove our Lambda configuration
                      try:
                          response = s3.get_bucket_notification_configuration(Bucket=bucket)
                          lambda_configs = response.get('LambdaFunctionConfigurations', [])
                          lambda_configs = [c for c in lambda_configs if c.get('Id') != 'OneToManyLambdaTrigger']
                          
                          notification_config = {}
                          if lambda_configs:
                              notification_config['LambdaFunctionConfigurations'] = lambda_configs
                          
                          # Preserve other configurations
                          for key in ['TopicConfigurations', 'QueueConfigurations']:
                              if key in response:
                                  notification_config[key] = response[key]
                          
                          s3.put_bucket_notification_configuration(
                              Bucket=bucket,
                              NotificationConfiguration=notification_config
                          )
                      except:
                          pass
                  
                  cfnresponse.send(event, context, cfnresponse.SUCCESS, {})
              except Exception as e:
                  print(f'Error: {str(e)}')
                  cfnresponse.send(event, context, cfnresponse.FAILED, {})

  # Permission for S3 to invoke Lambda
  S3LambdaInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref OneToManyLambdaFunction
      Action: lambda:InvokeFunction
      Principal: s3.amazonaws.com
      SourceArn: !Sub 'arn:${AWS::Partition}:s3:::${SourceBucket}'

  # SNS Topic for failure notifications
  FailureNotificationTopic:
    Type: AWS::SNS::Topic
    Properties:
      TopicName: one-to-many-failures
      DisplayName: 'One-to-Many Transfer Failures'

  # SNS Subscription
  FailureNotificationSubscription:
    Type: AWS::SNS::Subscription
    Properties:
      Protocol: email
      TopicArn: !Ref FailureNotificationTopic
      Endpoint: !Ref NotificationEmail

  # Custom Resource to configure S3 notification
  S3NotificationCustomResource:
    Type: AWS::CloudFormation::CustomResource
    Properties:
      ServiceToken: !GetAtt S3NotificationCustomResourceFunction.Arn
      BucketName: !Ref SourceBucket
      LambdaArn: !GetAtt OneToManyLambdaFunction.Arn
    DependsOn: S3LambdaInvokePermission

Outputs:
  LambdaFunctionArn:
    Description: 'ARN of the One-to-Many Lambda function'
    Value: !GetAtt OneToManyLambdaFunction.Arn
  
  S3NotificationCustomResourceArn:
    Description: 'ARN of the S3 notification custom resource function'
    Value: !GetAtt S3NotificationCustomResourceFunction.Arn
  
  LambdaRoleArn:
    Description: 'ARN of the Lambda execution role'
    Value: !GetAtt OneToManyLambdaRole.Arn