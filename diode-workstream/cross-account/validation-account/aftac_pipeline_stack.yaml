Parameters:
  IamPrefix:
    Type: String
    Description: Prefix added to all IAM resources

  ResourceSuffix:
    Type: String
    Description: Suffix added to the named AWS resources

  VpcId:
    Type: String
    Description: The VPC ID to use for the pipeline

  VpcCidr:
    Type: String
    Description: The CIDR block of the existing VPC

  PrivateSubnetIds:
    Type: CommaDelimitedList
    Description: The list of private subnet IDs to use for the pipeline

  LambdaStorageBucket:
    Type: String
    Description: The S3 bucket to store the lambda code in

  TransferResultLambdaCodeKey:
    Type: String
    Description: The S3 key of the pipeline lambda code

  PipelineAmiId:
    Type: AWS::EC2::Image::Id
    Description: The AMI ID to use for the pipeline
    AllowedPattern: ^ami-[0-9a-f]{17}$
    ConstraintDescription: Must be a valid AMI ID

  DiodeAccountId:
    Type: String
    Description: AWS Account ID of the Diode Account
    AllowedPattern: ^\d{12}$
    ConstraintDescription: Must be a valid AWS Account ID

  Ec2ScannerInstanceProfileARN:
    Type: String
    Description: The ARN of the EC2 Scanner Role

  ApprovedFileTypes:
    Type: String
    Description: The list of approved file types

  DfdlApprovedFileTypes:
    Type: String
    Description: The list of approved file types for DFDL

  TransferResultServiceRole:
    Type: String
    Description: The ARN of the IAM role for the Transfer Result Lambda

  DiodeSimulatorInstanceRole:
    Type: String
    Description: ARN of the IAM role associated with the Diode Simulator instance profile

Conditions:
  UseDiodeSimulator: !Not [!Equals [!Ref DiodeSimulatorInstanceRole, ""]]

Resources:
  LongTermStorageBucket:
    Type: AWS::S3::Bucket
    UpdateReplacePolicy: Delete
    DeletionPolicy: Delete
    Properties:
      OwnershipControls:
        Rules:
          - ObjectOwnership: BucketOwnerEnforced
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      LifecycleConfiguration:
        Rules:
          - Status: Enabled
            Id: GlacierTransitions
            Prefix: Glacier
            Transitions:
              - TransitionInDays: 30
                StorageClass: GLACIER_IR
              - TransitionInDays: 120
                StorageClass: GLACIER

  LongTermStorageBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref LongTermStorageBucket
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Deny
            Principal:
              AWS: "*"
            Action: s3:*
            Resource:
              - !Sub ${LongTermStorageBucket.Arn}
              - !Sub ${LongTermStorageBucket.Arn}/*
            Condition:
              Bool:
                aws:SecureTransport: false

  QuarantineBucket:
    Type: AWS::S3::Bucket
    UpdateReplacePolicy: Delete
    DeletionPolicy: Delete
    Properties:
      OwnershipControls:
        Rules:
          - ObjectOwnership: BucketOwnerEnforced
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true

  QuarantineBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref QuarantineBucket
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Deny
            Principal:
              AWS: "*"
            Action: s3:*
            Resource:
              - !Sub ${QuarantineBucket.Arn}
              - !Sub ${QuarantineBucket.Arn}/*
            Condition:
              Bool:
                aws:SecureTransport: false

  InvalidFilesBucket:
    Type: AWS::S3::Bucket
    UpdateReplacePolicy: Delete
    DeletionPolicy: Delete
    Properties:
      OwnershipControls:
        Rules:
          - ObjectOwnership: BucketOwnerEnforced
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true

  InvalidFilesBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref InvalidFilesBucket
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Deny
            Principal:
              AWS: "*"
            Action: s3:*
            Resource:
              - !Sub ${InvalidFilesBucket.Arn}
              - !Sub ${InvalidFilesBucket.Arn}/*
            Condition:
              Bool:
                aws:SecureTransport: false

  PipelineFunctionSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security Group for Lambda Functions
      SecurityGroupEgress:
        - CidrIp: 0.0.0.0/0
          Description: Allow all outbound traffic by default
          IpProtocol: "-1"
      VpcId: !Ref VpcId

  AvScanSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: PipelineEc2InstanceSecurityGroup
      SecurityGroupEgress:
        - CidrIp: 0.0.0.0/0
          Description: Allow all outbound traffic by default
          IpProtocol: "-1"
      SecurityGroupIngress:
        - CidrIp: !Ref VpcCidr
          Description: Permit Access from VPC
          IpProtocol: "-1"
      VpcId: !Ref VpcId

  InfectedFileTopic:
    Type: AWS::SNS::Topic
    Properties:
      DisplayName: Infected File SNS Topic
      KmsMasterKeyId: alias/aws/sns

  InvalidFilesTopic:
    Type: AWS::SNS::Topic
    Properties:
      DisplayName: Invalid File SNS Topic
      KmsMasterKeyId: alias/aws/sns

  AutoScalingGroupLaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateData:
        IamInstanceProfile:
          Arn: !Ref Ec2ScannerInstanceProfileARN
        ImageId: !Ref PipelineAmiId
        InstanceType: m5.large
        Monitoring:
          Enabled: false
        SecurityGroupIds:
          - !GetAtt AvScanSecurityGroup.GroupId
        TagSpecifications:
          - ResourceType: instance
            Tags:
              - Key: Name
                Value: ValidationPipeline/ValidationInstance
      TagSpecifications:
        - ResourceType: launch-template
          Tags:
            - Key: Name
              Value: ValidationPipeline/LaunchTemplate

  PipelineAutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    UpdatePolicy:
      AutoScalingScheduledAction:
        IgnoreUnmodifiedGroupSizeProperties: true
    Properties:
      LaunchTemplate:
        LaunchTemplateId: !Ref AutoScalingGroupLaunchTemplate
        # TODO: Determine if we need to set this to Default using an API
        Version: !GetAtt AutoScalingGroupLaunchTemplate.DefaultVersionNumber
      MaxSize: "12"
      MinSize: "2"
      VPCZoneIdentifier: !Ref PrivateSubnetIds
      Tags:
        - Key: Name
          PropagateAtLaunch: true
          Value: ValidationPipeline/AutoScalingGroup

  AsgScaleUpAction:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      AdjustmentType: ChangeInCapacity
      AutoScalingGroupName: !Ref PipelineAutoScalingGroup
      EstimatedInstanceWarmup: 120
      MetricAggregationType: Average
      PolicyType: StepScaling
      StepAdjustments:
        - MetricIntervalLowerBound: 0
          ScalingAdjustment: 1

  AsgScaleDownAction:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      AdjustmentType: ChangeInCapacity
      AutoScalingGroupName: !Ref PipelineAutoScalingGroup
      EstimatedInstanceWarmup: 120
      MetricAggregationType: Average
      PolicyType: StepScaling
      StepAdjustments:
        - MetricIntervalUpperBound: -10
          ScalingAdjustment: -1

  AvScanSqsQueueSizeAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      ActionsEnabled: true
      AlarmActions:
        - !Ref AsgScaleUpAction
      OKActions:
        - !Ref AsgScaleDownAction
      ComparisonOperator: GreaterThanOrEqualToThreshold
      Dimensions:
        - Name: QueueName
          Value:
            Fn::ImportValue: !Sub aftac-pipeline-av-scan-queue-name-${ResourceSuffix}
      EvaluationPeriods: 1
      MetricName: ApproximateNumberOfMessagesVisible
      Namespace: AWS/SQS
      Period: 120
      Statistic: Average
      Threshold: 50

  FailedTransferBucket:
    Type: AWS::S3::Bucket
    UpdateReplacePolicy: Delete
    DeletionPolicy: Delete
    Properties:
      OwnershipControls:
        Rules:
          - ObjectOwnership: BucketOwnerEnforced
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true

  FailedTransferBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref FailedTransferBucket
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Deny
            Principal:
              AWS: "*"
            Action: s3:*
            Resource:
              - !Sub ${FailedTransferBucket.Arn}
              - !Sub ${FailedTransferBucket.Arn}/*
            Condition:
              Bool:
                aws:SecureTransport: false

  # TODO: Implement a way to replay messages in DLQ
  TransferDlq:
    Type: AWS::SQS::Queue
    UpdateReplacePolicy: Delete
    DeletionPolicy: Delete
    Properties:
      MessageRetentionPeriod: 1209600 # 14 days
      ReceiveMessageWaitTimeSeconds: 20
      KmsMasterKeyId: alias/aws/sqs

  FailedTransferTopic:
    Type: AWS::SNS::Topic
    Properties:
      DisplayName: FailedTransferTopic
      KmsMasterKeyId: alias/aws/sns

  TransferResultLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub Transfer-Result-lambda-${ResourceSuffix}
      Handler: transfer_result.lambda_handler
      Role: !Ref TransferResultServiceRole
      Runtime: python3.11
      Timeout: 15
      Environment:
        Variables:
          FAILED_TRANSFER_TOPIC_ARN: !GetAtt FailedTransferTopic.TopicArn
          DATA_TRANSFER_BUCKET: !Ref DataTransferBucket
          DYNAMODB_TABLE_NAME: !Ref TransferStatusTable
          FAILED_TRANSFER_BUCKET: !Ref FailedTransferBucket
          ACCOUNT_ID: !Ref AWS::AccountId
      Code:
        S3Bucket: !Ref LambdaStorageBucket
        S3Key: !Ref TransferResultLambdaCodeKey
      VpcConfig:
        SecurityGroupIds:
          - !Ref PipelineFunctionSecurityGroup
        SubnetIds: !Ref PrivateSubnetIds

  TransferResultEventSourceMapping:
    Type: AWS::Lambda::EventSourceMapping
    Properties:
      EventSourceArn: !GetAtt TransferResultQueue.Arn
      FunctionName: !Ref TransferResultLambda

  TransferQueue:
    Type: AWS::SQS::Queue
    UpdateReplacePolicy: Delete
    DeletionPolicy: Delete
    Properties:
      MessageRetentionPeriod: 345600 # Default value (4 days)
      ReceiveMessageWaitTimeSeconds: 20
      # KmsMasterKeyId: alias/aws/sqs
      RedrivePolicy:
        deadLetterTargetArn: !GetAtt TransferDlq.Arn
        maxReceiveCount: 1

  TransferQueuePolicy:
    Type: AWS::SQS::QueuePolicy
    Properties:
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Deny
            Principal: "*"
            Action: sqs:*
            Resource: !GetAtt TransferQueue.Arn
            Condition:
              Bool:
                aws:SecureTransport: false
          - Effect: Allow
            Principal:
              Service: s3.amazonaws.com
            Action: sqs:SendMessage
            Resource: !GetAtt TransferQueue.Arn
            Condition:
              StringEquals:
                aws:SourceAccount: !Ref AWS::AccountId
              ArnLike:
                aws:SourceArn: !Sub arn:${AWS::Partition}:s3:::*
          - Effect: Allow
            Principal:
              AWS: !Ref DiodeAccountId
            Action:
              - sqs:ReceiveMessage
              - sqs:DeleteMessage
              - sqs:GetQueueAttributes
            Resource: !GetAtt TransferQueue.Arn
            Condition:
              ArnEquals:
                aws:PrincipalArn: !Sub arn:${AWS::Partition}:iam::${DiodeAccountId}:role/${IamPrefix}-DataTransferLambdaRole-${ResourceSuffix}
      Queues:
        - !Ref TransferQueue

  TransferResultQueue:
    Type: AWS::SQS::Queue
    UpdateReplacePolicy: Delete
    DeletionPolicy: Delete
    Properties:
      MessageRetentionPeriod: 345600 # Default value (4 days)
      ReceiveMessageWaitTimeSeconds: 20
      # KmsMasterKeyId: alias/aws/sqs
      # RedrivePolicy:
      #   deadLetterTargetArn: String
      #   maxReceiveCount: 1

  TransferResultQueuePolicy:
    Type: AWS::SQS::QueuePolicy
    Properties:
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Deny
            Principal: "*"
            Action: sqs:*
            Resource: !GetAtt TransferResultQueue.Arn
            Condition:
              Bool:
                aws:SecureTransport: false
          - Effect: Allow
            Principal:
              AWS: !Ref DiodeAccountId
            Action: sqs:SendMessage
            Resource: !GetAtt TransferResultQueue.Arn
            Condition:
              ArnEquals:
                aws:PrincipalArn: !Sub arn:${AWS::Partition}:iam::${DiodeAccountId}:role/${IamPrefix}-DataTransferLambdaRole-${ResourceSuffix}
      Queues:
        - !Ref TransferResultQueue

  TransferStatusTable:
    Type: AWS::DynamoDB::Table
    UpdateReplacePolicy: Delete
    DeletionPolicy: Delete
    Properties:
      BillingMode: PAY_PER_REQUEST # On-Demand Mode, for unpredictable workloads
      SSESpecification:
        SSEEnabled: true
      ### AttributeDefinitions need to include all attributes that describe the key schema for the table and indexes
      AttributeDefinitions:
        - AttributeName: s3Key
          AttributeType: S
        - AttributeName: timestamp
          AttributeType: S
        - AttributeName: mappingId
          AttributeType: S
        - AttributeName: status
          AttributeType: S
      KeySchema:
        - AttributeName: s3Key
          KeyType: HASH # partition key
        - AttributeName: timestamp
          KeyType: RANGE # sort key
      GlobalSecondaryIndexes:
        - IndexName: mappingId-index
          KeySchema:
            - AttributeName: mappingId
              KeyType: HASH # partition key
            - AttributeName: status
              KeyType: RANGE # sort key
          Projection:
            NonKeyAttributes:
              - s3Key
              - subject
              - errorMessage
              - govPoc
              - dataOwner
              - keyOwner
            ProjectionType: INCLUDE
      PointInTimeRecoverySpecification:
        PointInTimeRecoveryEnabled: true

  DataTransferBucket:
    Type: AWS::S3::Bucket
    DependsOn: TransferQueuePolicy
    UpdateReplacePolicy: Delete
    DeletionPolicy: Delete
    Properties:
      OwnershipControls:
        Rules:
          - ObjectOwnership: BucketOwnerEnforced
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      NotificationConfiguration:
        QueueConfigurations:
          - Event: s3:ObjectCreated:*
            Queue: !GetAtt TransferQueue.Arn

  DataTransferBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref DataTransferBucket
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Deny
            Principal: "*"
            Action: s3:*
            Resource:
              - !Sub ${DataTransferBucket.Arn}
              - !Sub ${DataTransferBucket.Arn}/*
            Condition:
              Bool:
                aws:SecureTransport: false
          - Effect: Allow
            Principal:
              AWS: !Ref DiodeAccountId
            Action:
              - s3:GetObject
              - s3:GetObjectTagging
            Resource: !Sub ${DataTransferBucket.Arn}/*
            Condition:
              ArnEquals:
                aws:PrincipalArn: !Sub arn:${AWS::Partition}:iam::${DiodeAccountId}:role/${IamPrefix}-DataTransferLambdaRole-${ResourceSuffix}
          - !If
            - UseDiodeSimulator
            - Sid: AllowS3PermissionsForDiodeSimulatorInstance
              Effect: Allow
              Principal:
                AWS: !Ref DiodeSimulatorInstanceRole
              Action:
                - s3:GetObject
                - s3:GetObjectTagging
              Resource: !Sub ${DataTransferBucket.Arn}/*
            - !Ref AWS::NoValue

  ApprovedFileTypesParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub /pipeline/ApprovedFileTypes-${ResourceSuffix}
      Description: Filetypes which are authorized for low to high transfer
      Type: StringList
      Value: !Ref ApprovedFileTypes

  DfdlApprovedFileTypesParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub /pipeline/DfdlApprovedFileTypes-${ResourceSuffix}
      Description: Filetypes which are authorized for low to high transfer after DFDL Conversion
      Type: StringList
      Value: !Ref DfdlApprovedFileTypes

  InvalidFilesBucketNameParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub /pipeline/InvalidFilesBucketName-${ResourceSuffix}
      Description: Name of the Bucket where files which fail content-type validation are stored
      Type: String
      Value: !Ref InvalidFilesBucket

  InvalidFilesTopicArnParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub /pipeline/InvalidFilesTopicArn-${ResourceSuffix}
      Description: ARN of the SNS Topic where files which fail content-type validation are published to.
      Type: String
      Value: !GetAtt InvalidFilesTopic.TopicArn

  DataTransferIngestBucketNameParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub /pipeline/DataTransferIngestBucketName-${ResourceSuffix}
      Description: Name of the bucket where files are staged for diode processing
      Type: String
      Value: !Ref DataTransferBucket

  QuarantineBucketNameParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub /pipeline/QuarantineBucketName-${ResourceSuffix}
      Description: Name of the Bucket where files which are deemed to potentially contain malware are stored
      Type: String
      Value: !Ref QuarantineBucket

  LongTermStorageBucketNameParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub /pipeline/LongTermStorageBucketName-${ResourceSuffix}
      Description: Name of the Archive Bucket
      Type: String
      Value: !Ref LongTermStorageBucket

  QuarantineTopicARNParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub /pipeline/QuarantineTopicArn-${ResourceSuffix}
      Description: ARN of the SNS Topic where files which are deemed to potentially contain malware are published to.
      Type: String
      Value: !GetAtt InfectedFileTopic.TopicArn

Outputs:
  DataTransferBucketName:
    Description: Data Transfer Bucket Name
    Value: !Ref DataTransferBucket

  DataTransferSqsQueueArn:
    Description: Data Transfer SQS Queue ARN
    Value: !GetAtt TransferQueue.Arn

  DataTransferResultSqsQueueArn:
    Description: Data Transfer Result SQS Queue ARN
    Value: !GetAtt TransferResultQueue.Arn

  DataTransferResultSqsQueueUrl:
    Description: Data Transfer Result SQS Queue URL
    Value: !Ref TransferResultQueue
