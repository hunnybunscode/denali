Parameters:
  ResourceSuffix:
    Type: String
    Description: Suffix added to the named AWS resources

  Bucket1CDSProfile:
    Type: String
    Description: The CDS Profile for the Bucket 1

  Bucket2CDSProfile:
    Type: String
    Description: The CDS Profile for the Bucket 2

  ObjectTaggerRoleARN:
    Type: String
    Description: ARN of the IAM role for the Object Tagger Lambda

  PresignGeneratorServiceRole:
    Type: String
    Description: ARN of the IAM role for the Presign Generator Lambda

  ObjectTaggerLambdaCodeKey:
    Type: String
    Description: S3 key for the Object Tagger Lambda code

  LambdaStorageBucket:
    Type: String
    Description: S3 bucket where the Lambda code is stored

  ApiGwLambdaCodeKey:
    Type: String
    Description: S3 key for the API Gateway Lambda code

  FileUploaderCloudWatchRole:
    Type: String
    Description: ARN of the file uploader CloudWatch role

  APILambdaInvokeRole:
    Type: String
    Description: ARN of the API Lambda invoke role

  VpcId:
    Type: String
    Description: VPC ID

  PrivateSubnetIds:
    Type: CommaDelimitedList
    Description: The list of private subnet IDs to use for the pipeline

  BucketOneGovPoc:
    Type: String
    Description: String to be added as a tag to objects in Bucket 1

  BucketOneDataOwner:
    Type: String
    Description: String to be added as a tag to objects in Bucket 1

  BucketOneKeyOwner:
    Type: String
    Description: String to be added as a tag to objects in Bucket 1

  BucketTwoGovPoc:
    Type: String
    Description: String to be added as a tag to objects in Bucket 2

  BucketTwoDataOwner:
    Type: String
    Description: String to be added as a tag to objects in Bucket 2

  BucketTwoKeyOwner:
    Type: String
    Description: String to be added as a tag to objects in Bucket 2

Resources:
  AvScanDeadLetterQueue:
    Type: AWS::SQS::Queue
    UpdateReplacePolicy: Delete
    DeletionPolicy: Delete
    Properties:
      MessageRetentionPeriod: 1209600 # 14 days
      ReceiveMessageWaitTimeSeconds: 20
      KmsMasterKeyId: alias/aws/sqs

  AvScanQueue:
    Type: AWS::SQS::Queue
    UpdateReplacePolicy: Delete
    DeletionPolicy: Delete
    Properties:
      MessageRetentionPeriod: 345600 # Default value (4 days)
      ReceiveMessageWaitTimeSeconds: 20
      KmsMasterKeyId: alias/aws/sqs
      RedrivePolicy:
        deadLetterTargetArn: !GetAtt AvScanDeadLetterQueue.Arn
        maxReceiveCount: 5

  AvScanQueuePolicy:
    Type: AWS::SQS::QueuePolicy
    Properties:
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Deny
            Principal:
              AWS: "*"
            Action: sqs:*
            Resource: !GetAtt AvScanQueue.Arn
            Condition:
              Bool:
                aws:SecureTransport: false
      Queues:
        - !Ref AvScanQueue

  LambdaFunctionSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security Group for Lambda Functions
      SecurityGroupEgress:
        - CidrIp: 0.0.0.0/0
          Description: Allow all outbound traffic by default
          IpProtocol: "-1"
      VpcId: !Ref VpcId

  Bucket1ObjectTagger:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub bucket-1-object-tagger-${ResourceSuffix}
      Handler: object_tagger.lambda_handler
      Role: !Ref ObjectTaggerRoleARN
      Runtime: python3.11
      Timeout: 30
      Environment:
        Variables:
          DATA_OWNER: !Ref BucketOneDataOwner
          GOV_POC: !Ref BucketOneGovPoc
          KEY_OWNER: !Ref BucketOneKeyOwner
          CDS_PROFILE: !Ref Bucket1CDSProfile
          QUEUE_URL: !Ref AvScanQueue
      Code:
        S3Bucket: !Ref LambdaStorageBucket
        S3Key: !Ref ObjectTaggerLambdaCodeKey
      VpcConfig:
        SecurityGroupIds:
          - !Ref LambdaFunctionSecurityGroup
        SubnetIds: !Ref PrivateSubnetIds

  Bucket1ObjectTaggerPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt Bucket1ObjectTagger.Arn
      Principal: s3.amazonaws.com
      Action: lambda:InvokeFunction
      SourceAccount: !Ref AWS::AccountId

  Bucket2ObjectTagger:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub bucket-2-object-tagger-${ResourceSuffix}
      Handler: object_tagger.lambda_handler
      Role: !Ref ObjectTaggerRoleARN
      Runtime: python3.11
      Timeout: 30
      Environment:
        Variables:
          DATA_OWNER: !Ref BucketTwoDataOwner
          GOV_POC: !Ref BucketTwoGovPoc
          KEY_OWNER: !Ref BucketTwoKeyOwner
          QUEUE_URL: !Ref AvScanQueue
          CDS_PROFILE: !Ref Bucket2CDSProfile
      Code:
        S3Bucket: !Ref LambdaStorageBucket
        S3Key: !Ref ObjectTaggerLambdaCodeKey
      VpcConfig:
        SecurityGroupIds:
          - !Ref LambdaFunctionSecurityGroup
        SubnetIds: !Ref PrivateSubnetIds

  Bucket2ObjectTaggerPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt Bucket2ObjectTagger.Arn
      Principal: s3.amazonaws.com
      Action: lambda:InvokeFunction
      SourceAccount: !Ref AWS::AccountId

  IngestBucket1:
    Type: AWS::S3::Bucket
    Properties:
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      NotificationConfiguration:
        LambdaConfigurations:
          - Event: s3:ObjectCreated:*
            Function: !GetAtt Bucket1ObjectTagger.Arn

  IngestBucket1Policy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref IngestBucket1
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Deny
            Principal:
              AWS: "*"
            Action: s3:*
            Resource:
              - !Sub ${IngestBucket1.Arn}
              - !Sub ${IngestBucket1.Arn}/*
            Condition:
              Bool:
                aws:SecureTransport: false

  IngestBucket2:
    Type: AWS::S3::Bucket
    Properties:
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      NotificationConfiguration:
        LambdaConfigurations:
          - Event: s3:ObjectCreated:*
            Function: !GetAtt Bucket2ObjectTagger.Arn

  IngestBucket2Policy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref IngestBucket2
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Deny
            Principal:
              AWS: "*"
            Action: s3:*
            Resource:
              - !Sub ${IngestBucket2.Arn}
              - !Sub ${IngestBucket2.Arn}/*
            Condition:
              Bool:
                aws:SecureTransport: false

  PresignGenerator:
    Type: AWS::Lambda::Function
    Properties:
      Handler: presigner.lambda_handler
      Role: !Ref PresignGeneratorServiceRole
      Runtime: python3.11
      Environment:
        Variables:
          ingest_bucket: !Ref IngestBucket1
      Code:
        S3Bucket: !Ref LambdaStorageBucket
        S3Key: !Ref ApiGwLambdaCodeKey
      VpcConfig:
        SecurityGroupIds:
          - !Ref LambdaFunctionSecurityGroup
        SubnetIds: !Ref PrivateSubnetIds

  FileUploader:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: FileUploader1
      EndpointConfiguration:
        Types:
          - REGIONAL

  # To avoid overwriting other roles, you should only have one AWS::ApiGateway::Account resource per region per account.
  # Should we create this outside CloudFormation?
  FileUploaderAccount:
    Type: AWS::ApiGateway::Account
    DependsOn: FileUploader
    UpdateReplacePolicy: Retain
    DeletionPolicy: Retain
    Properties:
      CloudWatchRoleArn: !Ref FileUploaderCloudWatchRole

  FileUploaderDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn:
      - APIModel
      - FileUploaderUploadOPTIONS
      - FileUploaderUploadPOST
      - FileUploaderUpload
    Properties:
      Description: Automatically created by the RestApi construct
      RestApiId: !Ref FileUploader

  FileUploaderDeploymentStageProd:
    Type: AWS::ApiGateway::Stage
    DependsOn: FileUploaderAccount
    Properties:
      AccessLogSetting:
        DestinationArn:
          Fn::ImportValue: !Sub aftac-pipeline-ApiGatewayStageLogGroup-${ResourceSuffix}
        Format: '{"requestId":"$context.requestId","ip":"$context.identity.sourceIp","user":"$context.identity.user","caller":"$context.identity.caller","requestTime":"$context.requestTime","httpMethod":"$context.httpMethod","resourcePath":"$context.resourcePath","status":"$context.status","protocol":"$context.protocol","responseLength":"$context.responseLength"}'
      CacheClusterEnabled: true
      CacheClusterSize: "0.5"
      DeploymentId: !Ref FileUploaderDeployment
      MethodSettings:
        - CacheDataEncrypted: true
          CachingEnabled: true
          DataTraceEnabled: false
          HttpMethod: "*"
          LoggingLevel: INFO
          ResourcePath: "/*"
      RestApiId: !Ref FileUploader
      StageName: prod

  FileUploaderUpload:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !GetAtt FileUploader.RootResourceId
      PathPart: upload
      RestApiId: !Ref FileUploader

  FileUploaderUploadPOSTApiPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref PresignGenerator
      Principal: apigateway.amazonaws.com
      Action: lambda:InvokeFunction
      SourceArn: !Sub arn:${AWS::Partition}:execute-api:${AWS::Region}:${AWS::AccountId}:${FileUploader}/${FileUploaderDeploymentStageProd}/POST/upload

  FileUploaderUploadPOST:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: AWS_IAM
      HttpMethod: POST
      Integration:
        Credentials: !Ref APILambdaInvokeRole
        IntegrationHttpMethod: POST
        IntegrationResponses:
          - StatusCode: "200"
        PassthroughBehavior: NEVER
        RequestTemplates:
          application/json: '{ "statusCode": 200 }'
        Type: AWS_PROXY
        Uri: !Sub arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${PresignGenerator.Arn}/invocations
      MethodResponses:
        - ResponseModels:
            application/json: !Ref APIModel
          StatusCode: "200"
      ResourceId: !Ref FileUploaderUpload
      RestApiId: !Ref FileUploader

  FileUploaderUploadPUT:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: AWS_IAM
      HttpMethod: PUT
      Integration:
        Credentials: !Ref APILambdaInvokeRole
        IntegrationHttpMethod: PUT
        IntegrationResponses:
          - StatusCode: "200"
        PassthroughBehavior: NEVER
        RequestTemplates:
          application/json: '{ "statusCode": 200 }'
        Type: AWS_PROXY
        Uri: !Sub arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${PresignGenerator.Arn}/invocations
      MethodResponses:
        - ResponseModels:
            application/json: !Ref APIModel
          StatusCode: "200"
      ResourceId: !Ref FileUploaderUpload
      RestApiId: !Ref FileUploader

  FileUploaderUploadOPTIONS:
    Type: AWS::ApiGateway::Method
    Properties:
      ApiKeyRequired: false
      AuthorizationType: NONE
      HttpMethod: OPTIONS
      Integration:
        IntegrationResponses:
          - ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Access-Control-Allow-Methods: "'OPTIONS,GET,POST,PUT'"
            StatusCode: "200"
        RequestTemplates:
          application/json: "{ statusCode: 200 }"
        Type: MOCK
      MethodResponses:
        - ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Origin: true
            method.response.header.Access-Control-Allow-Methods: true
          StatusCode: "200"
      ResourceId: !Ref FileUploaderUpload
      RestApiId: !Ref FileUploader

  APIModel:
    Type: AWS::ApiGateway::Model
    Properties:
      ContentType: application/json
      RestApiId: !Ref FileUploader
      Schema:
        "$schema": http://json-schema.org/draft-04/schema#

  PresignGenerator2:
    Type: AWS::Lambda::Function
    Properties:
      Handler: presigner.lambda_handler
      Role: !Ref PresignGeneratorServiceRole
      Runtime: python3.11
      Environment:
        Variables:
          ingest_bucket: !Ref IngestBucket2
      Code:
        S3Bucket: !Ref LambdaStorageBucket
        S3Key: !Ref ApiGwLambdaCodeKey
      VpcConfig:
        SecurityGroupIds:
          - !Ref LambdaFunctionSecurityGroup
        SubnetIds: !Ref PrivateSubnetIds

  FileUploader2:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: FileUploader2
      EndpointConfiguration:
        Types:
          - REGIONAL

  # To avoid overwriting other roles, you should only have one AWS::ApiGateway::Account resource per region per account.
  # Should we create this outside CloudFormation? If not, should we create more than one? Do we retain it?
  FileUploaderAccount2:
    Type: AWS::ApiGateway::Account
    DependsOn: FileUploader2
    UpdateReplacePolicy: Retain
    DeletionPolicy: Retain
    Properties:
      CloudWatchRoleArn: !Ref FileUploaderCloudWatchRole

  FileUploaderDeployment2:
    Type: AWS::ApiGateway::Deployment
    DependsOn:
      - APIModel2
      - FileUploaderUploadOPTIONS2
      - FileUploaderUploadPOST2
      - FileUploaderUpload2
    Properties:
      Description: Automatically created by the RestApi construct
      RestApiId: !Ref FileUploader2

  FileUploaderDeploymentStageProd2:
    Type: AWS::ApiGateway::Stage
    DependsOn: FileUploaderAccount2
    Properties:
      AccessLogSetting:
        DestinationArn:
          Fn::ImportValue: !Sub aftac-pipeline-ApiGatewayStageLogGroup-${ResourceSuffix}
        Format: '{"requestId":"$context.requestId","ip":"$context.identity.sourceIp","user":"$context.identity.user","caller":"$context.identity.caller","requestTime":"$context.requestTime","httpMethod":"$context.httpMethod","resourcePath":"$context.resourcePath","status":"$context.status","protocol":"$context.protocol","responseLength":"$context.responseLength"}'
      CacheClusterEnabled: true
      CacheClusterSize: "0.5"
      DeploymentId: !Ref FileUploaderDeployment2
      MethodSettings:
        - CacheDataEncrypted: true
          CachingEnabled: true
          DataTraceEnabled: false
          HttpMethod: "*"
          LoggingLevel: INFO
          ResourcePath: "/*"
      RestApiId: !Ref FileUploader2
      StageName: prod

  FileUploaderUpload2:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !GetAtt FileUploader2.RootResourceId
      PathPart: upload
      RestApiId: !Ref FileUploader2

  FileUploaderUploadPOSTApiPermission2:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt PresignGenerator2.Arn
      Principal: apigateway.amazonaws.com
      Action: lambda:InvokeFunction
      SourceArn: !Sub arn:${AWS::Partition}:execute-api:${AWS::Region}:${AWS::AccountId}:${FileUploader}/${FileUploaderDeploymentStageProd}/POST/upload

  FileUploaderUploadPOST2:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: AWS_IAM
      HttpMethod: POST
      Integration:
        Credentials: !Ref APILambdaInvokeRole
        IntegrationHttpMethod: POST
        IntegrationResponses:
          - StatusCode: "200"
        PassthroughBehavior: NEVER
        RequestTemplates:
          application/json: '{ "statusCode": 200 }'
        Type: AWS_PROXY
        Uri: !Sub arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${PresignGenerator2.Arn}/invocations
      MethodResponses:
        - ResponseModels:
            application/json: !Ref APIModel2
          StatusCode: "200"
      ResourceId: !Ref FileUploaderUpload2
      RestApiId: !Ref FileUploader2

  FileUploaderUploadOPTIONS2:
    Type: AWS::ApiGateway::Method
    Properties:
      ApiKeyRequired: false
      AuthorizationType: NONE
      HttpMethod: OPTIONS
      Integration:
        IntegrationResponses:
          - ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Access-Control-Allow-Methods: "'OPTIONS,GET,POST,PUT'"
            StatusCode: "200"
        RequestTemplates:
          application/json: "{ statusCode: 200 }"
        Type: MOCK
      MethodResponses:
        - ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Origin: true
            method.response.header.Access-Control-Allow-Methods: true
          StatusCode: "200"
      ResourceId: !Ref FileUploaderUpload2
      RestApiId: !Ref FileUploader2

  APIModel2:
    Type: AWS::ApiGateway::Model
    Properties:
      ContentType: application/json
      RestApiId: !Ref FileUploader2
      Schema:
        "$schema": http://json-schema.org/draft-04/schema#

  ### WEB ACL RESOURCES
  # IngestAPIWebACL:
  #   Type: AWS::WAFv2::WebACL
  #   Properties:
  #     DefaultAction:
  #       Allow: {}
  #     Rules:
  #     - Name: AWS-AWSManagedRulesCommonRuleSet
  #       OverrideAction:
  #         None: {}
  #       Priority: 1
  #       Statement:
  #         ManagedRuleGroupStatement:
  #           Name: AWSManagedRulesCommonRuleSet
  #           VendorName: AWS
  #       VisibilityConfig:
  #         CloudWatchMetricsEnabled: true
  #         MetricName: AWS-AWSManagedRulesCommonRuleSet
  #         SampledRequestsEnabled: true
  #     - Name: AWS-AWSManagedRulesAnonymousIpList
  #       OverrideAction:
  #         None: {}
  #       Priority: 2
  #       Statement:
  #         ManagedRuleGroupStatement:
  #           Name: AWSManagedRulesAnonymousIpList
  #           VendorName: AWS
  #       VisibilityConfig:
  #         CloudWatchMetricsEnabled: true
  #         MetricName: AWS-AWSManagedRulesAnonymousIpList
  #         SampledRequestsEnabled: true
  #     - Name: AWS-AWSManagedRulesAmazonIpReputationList
  #       OverrideAction:
  #         None: {}
  #       Priority: 3
  #       Statement:
  #         ManagedRuleGroupStatement:
  #           Name: AWSManagedRulesAmazonIpReputationList
  #           VendorName: AWS
  #       VisibilityConfig:
  #         CloudWatchMetricsEnabled: true
  #         MetricName: AWS-AWSManagedRulesAmazonIpReputationList
  #         SampledRequestsEnabled: true
  #     - Name: AWS-AWSManagedRulesAdminProtectionRuleSet
  #       OverrideAction:
  #         None: {}
  #       Priority: 4
  #       Statement:
  #         ManagedRuleGroupStatement:
  #           Name: AWSManagedRulesAdminProtectionRuleSet
  #           VendorName: AWS
  #       VisibilityConfig:
  #         CloudWatchMetricsEnabled: true
  #         MetricName: AWS-AWSManagedRulesAdminProtectionRuleSet
  #         SampledRequestsEnabled: true
  #     Scope: REGIONAL
  #     VisibilityConfig:
  #       CloudWatchMetricsEnabled: true
  #       MetricName: IngestAPILogsWAF
  #       SampledRequestsEnabled: true

  # IngestAPIWAFLoggingConfig:
  #   Type: AWS::WAFv2::LoggingConfiguration
  #   Properties:
  #     LogDestinationConfigs:
  #     - !GetAtt IngestWACLAccessLogs.Arn
  #     ResourceArn: !GetAtt IngestAPIWebACL.Arn

  # IngestAPIWEBACLAssociate:
  #   Type: AWS::WAFv2::WebACLAssociation
  #   Properties:
  #     ResourceArn:
  #       Fn::Join:
  #       - ''
  #       - - arn:aws:apigateway:us-east-1::/restapis/
  #         - !Ref fileuploader
  #         - "/stages/"
  #         - !Ref fileuploaderDeploymentStageprod
  #     WebACLArn:
  #       Fn::GetAtt:
  #       - IngestAPIWebACL
  #       - Arn

  # IngestAPIWEBACLAssociate2:
  #   Type: AWS::WAFv2::WebACLAssociation
  #   Properties:
  #     ResourceArn:
  #       Fn::Join:
  #       - ''
  #       - - arn:aws:apigateway:us-east-1::/restapis/
  #         - !Ref fileuploader2
  #         - "/stages/"
  #         - !Ref fileuploaderDeploymentStageprod2
  #     WebACLArn:
  #       Fn::GetAtt:
  #       - IngestAPIWebACL
  #       - Arn

  AvScanQueueURLParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub /pipeline/AvScanQueueUrl-${ResourceSuffix}
      Description: URL of the SQS Queue which manages AV Scan
      Type: String
      Value: !GetAtt AvScanQueue.QueueUrl

Outputs:
  AvScanQueueUrlExport:
    Description: Queue URL of the SQS AV Scan Queue
    Value: !Ref AvScanQueue
    Export:
      Name: !Sub aftac-pipeline-av-scan-queue-${ResourceSuffix}

  AvScanQueueNameExport:
    Description: Name of the SQS AV Scan Queue
    Value: !GetAtt AvScanQueue.QueueName
    Export:
      Name: !Sub aftac-pipeline-av-scan-queue-name-${ResourceSuffix}

  IngestBucket1Export:
    Value: !Ref IngestBucket1
    Description: Name of Ingest Bucket 1
    Export:
      Name: !Sub aftac-pipeline-IngestBucket1-${ResourceSuffix}

  IngestBucket2Export:
    Value: !Ref IngestBucket2
    Description: Name of Ingest Bucket 2
    Export:
      Name: !Sub aftac-pipeline-IngestBucket2-${ResourceSuffix}

  PresignGenerator1InvokeURL:
    Value: !Sub https://${FileUploader}.execute-api.${AWS::Region}.amazonaws.com/prod/upload
    Description: URL of the Presign Generator API Endpoint
