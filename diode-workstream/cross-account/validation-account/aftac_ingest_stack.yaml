Parameters:
  IamPrefix:
    Type: String
    Description: Prefix added to all IAM resources

  PermissionsBoundaryPolicyArn:
    Type: String
    Description: ARN of the policy that is used to set the permissions boundary for IAM resources

  ResourceSuffix:
    Type: String
    Description: Suffix added to the named AWS resources

  VpcId:
    Type: String
    Description: VPC ID

  VpcCidr:
    Type: String
    Description: The CIDR block of the existing VPC

  PrivateSubnetIds:
    Type: CommaDelimitedList
    Description: The list of private subnet IDs to use for the pipeline

  S3PrefixListId:
    Type: String
    Description: The S3 prefix list ID to use for the pipeline

Resources:
  ObjectTaggerRole:
    Type: AWS::IAM::Role
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W28 # Resource found with an explicit name, this disallows updates that require replacement of this resource
            reason: An explicit name is required
    Properties:
      RoleName: !Sub ${IamPrefix}-ObjectTaggerRole-${ResourceSuffix}
      PermissionsBoundary: !Ref PermissionsBoundaryPolicyArn
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
            Condition:
              StringEquals:
                aws:SourceAccount: !Ref AWS::AccountId
      ManagedPolicyArns:
        - !Sub arn:${AWS::Partition}:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole
      Policies:
        - PolicyName: ObjectTaggerRolePolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              # Security best practice: https://docs.aws.amazon.com/lambda/latest/dg/configuration-vpc.html#configuration-vpc-best-practice-security
              - Effect: Deny
                Action:
                  - ec2:CreateNetworkInterface
                  - ec2:DeleteNetworkInterface
                  - ec2:DescribeNetworkInterfaces
                  - ec2:DescribeSubnets
                  - ec2:DetachNetworkInterface
                  - ec2:AssignPrivateIpAddresses
                  - ec2:UnassignPrivateIpAddresses
                Resource: "*"
                Condition:
                  ArnEquals:
                    lambda:SourceFunctionArn: !Sub arn:${AWS::Partition}:lambda:${AWS::Region}:${AWS::AccountId}:function:bucket-object-tagger-${ResourceSuffix}
              - Effect: Allow
                Action: sqs:SendMessage
                Resource: !GetAtt AvScanQueue.Arn
              - Effect: Allow
                Action:
                  - s3:GetObjectTagging
                  - s3:PutObjectTagging
                  - s3:GetBucketTagging
                Resource: !Sub arn:${AWS::Partition}:s3:::*
                Condition:
                  StringEquals:
                    s3:ResourceAccount: !Ref AWS::AccountId

  PresignedUrlGeneratorRole:
    Type: AWS::IAM::Role
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W28 # Resource found with an explicit name, this disallows updates that require replacement of this resource
            reason: An explicit name is required
    Properties:
      RoleName: !Sub ${IamPrefix}-PresignedUrlGeneratorRole-${ResourceSuffix}
      PermissionsBoundary: !Ref PermissionsBoundaryPolicyArn
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
            Condition:
              StringEquals:
                aws:SourceAccount: !Ref AWS::AccountId
      ManagedPolicyArns:
        - !Sub arn:${AWS::Partition}:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole
      Policies:
        - PolicyName: PresignedUrlGeneratorRolePolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              # Security best practice: https://docs.aws.amazon.com/lambda/latest/dg/configuration-vpc.html#configuration-vpc-best-practice-security
              - Effect: Deny
                Action:
                  - ec2:CreateNetworkInterface
                  - ec2:DeleteNetworkInterface
                  - ec2:DescribeNetworkInterfaces
                  - ec2:DescribeSubnets
                  - ec2:DetachNetworkInterface
                  - ec2:AssignPrivateIpAddresses
                  - ec2:UnassignPrivateIpAddresses
                Resource: "*"
                Condition:
                  ArnEquals:
                    lambda:SourceFunctionArn: !Sub arn:${AWS::Partition}:lambda:${AWS::Region}:${AWS::AccountId}:function:presigned-url-generator-${ResourceSuffix}
              - Effect: Allow
                Action: s3:PutObject
                Resource: !Sub arn:${AWS::Partition}:s3:::*
                Condition:
                  StringEquals:
                    s3:ResourceAccount: !Ref AWS::AccountId

  APILambdaInvokeRole:
    Type: AWS::IAM::Role
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W28 # Resource found with an explicit name, this disallows updates that require replacement of this resource
            reason: An explicit name is required
    Properties:
      RoleName: !Sub ${IamPrefix}-APILambdaInvokeRole-${ResourceSuffix}
      PermissionsBoundary: !Ref PermissionsBoundaryPolicyArn
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: apigateway.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: APILambdaInvokeRolePolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action: lambda:InvokeFunction
                Resource: !GetAtt PresignedUrlGenerator.Arn

  ApiGatewayStageLogGroup:
    Type: AWS::Logs::LogGroup
    UpdateReplacePolicy: Retain
    DeletionPolicy: Delete
    Properties:
      RetentionInDays: 731

  AvScanDeadLetterQueue:
    Type: AWS::SQS::Queue
    UpdateReplacePolicy: Delete
    DeletionPolicy: Delete
    Properties:
      MessageRetentionPeriod: 1209600 # 14 days
      ReceiveMessageWaitTimeSeconds: 20
      KmsMasterKeyId: alias/aws/sqs

  AvScanQueue:
    Type: AWS::SQS::Queue
    UpdateReplacePolicy: Delete
    DeletionPolicy: Delete
    Properties:
      MessageRetentionPeriod: 345600 # Default value (4 days)
      ReceiveMessageWaitTimeSeconds: 20
      KmsMasterKeyId: alias/aws/sqs
      RedrivePolicy:
        deadLetterTargetArn: !GetAtt AvScanDeadLetterQueue.Arn
        maxReceiveCount: 5

  AvScanQueuePolicy:
    Type: AWS::SQS::QueuePolicy
    Properties:
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Deny
            Principal: "*"
            Action: sqs:*
            Resource: !GetAtt AvScanQueue.Arn
            Condition:
              Bool:
                aws:SecureTransport: false
      Queues:
        - !Ref AvScanQueue

  LambdaFunctionSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security Group for Lambda Functions
      SecurityGroupEgress:
        - CidrIp: !Ref VpcCidr
          IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          Description: Allow TCP traffic out to VPC CIDR
        - DestinationPrefixListId: !Ref S3PrefixListId
          IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          Description: Allow TCP traffic out to S3 Gateway Endpoint
      VpcId: !Ref VpcId

  BucketObjectTagger:
    Type: AWS::Lambda::Function
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W58 # Lambda functions require permission to write CloudWatch Logs
            reason: The managed policy, AWSLambdaVPCAccessExecutionRole, attached to the execution role includes permissions to write to CloudWatch Logs
    Properties:
      FunctionName: !Sub bucket-object-tagger-${ResourceSuffix}
      Handler: index.lambda_handler
      Role: !GetAtt ObjectTaggerRole.Arn
      Runtime: python3.11
      Timeout: 30
      # LoggingConfig:
      #   LogGroup: The name of the log group
      # ReservedConcurrentExecutions: 50
      Environment:
        Variables:
          AV_SCAN_QUEUE_URL: !Ref AvScanQueue
      VpcConfig:
        SecurityGroupIds:
          - !Ref LambdaFunctionSecurityGroup
        SubnetIds: !Ref PrivateSubnetIds
      Code:
        ZipFile: |
          import json
          import logging
          import os
          from urllib.parse import unquote_plus

          import boto3  # type: ignore
          from botocore.config import Config  # type: ignore
          from botocore.exceptions import ClientError  # type: ignore

          logger = logging.getLogger()
          logger.setLevel(logging.INFO)


          AV_SCAN_QUEUE_URL = os.environ["AV_SCAN_QUEUE_URL"]
          TAG_KEYS = ["DataOwner", "GovPOC", "KeyOwner", "MappingId"]

          config = Config(retries={"max_attempts": 5, "mode": "standard"})
          S3_CLIENT = boto3.client("s3", config=config)
          SQS_CLIENT = boto3.client("sqs", config=config)


          def lambda_handler(event, context):
              logger.info(f"Event: {json.dumps(event, default=str)}")
              bucket = event["Records"][0]["s3"]["bucket"]["name"]
              key = unquote_plus(event["Records"][0]["s3"]["object"]["key"])
              source_ip = event["Records"][0]["requestParameters"]["sourceIPAddress"]

              tagset = get_bucket_tags(bucket)
              tagset.append({"Key": "SourceIp", "Value": source_ip})
              add_tags_to_key(bucket, key, tagset)
              send_to_sqs(bucket, key)
              logger.info("SUCCESS")


          def get_bucket_tags(bucket: str):
              logger.info(f"Getting tags for {bucket}")
              try:
                  tagset: list[dict[str, str]] = S3_CLIENT.get_bucket_tagging(Bucket=bucket)[
                      "TagSet"
                  ]
                  # ExpectedBucketOwner='string'
                  user_tagset = [
                      tag for tag in tagset if not tag["Key"].startswith("aws:cloudformation")
                  ]

                  if len(user_tagset) != len(TAG_KEYS):
                      raise ValueError(
                          f"Expected {len(TAG_KEYS)} tags, got {len(user_tagset)} instead",
                      )

                  for tag in user_tagset:
                      if tag["Key"] not in TAG_KEYS:
                          raise ValueError(f"Unexpected tag key: {tag['Key']}")

                  logger.info(f"Retrieved the tags: {user_tagset}")
                  return user_tagset
              except Exception as e:
                  logger.error(f"Could not get tags for {bucket}: {e}")
                  raise


          def add_tags_to_key(bucket: str, key: str, tagset: list[dict[str, str]]):
              logger.info(f"Adding tags to {bucket}/{key}")
              try:
                  S3_CLIENT.put_object_tagging(
                      Bucket=bucket,
                      Key=key,
                      Tagging={"TagSet": tagset},
                      # TODO: We should add this for enhanced security
                      # ExpectedBucketOwner
                  )
              except ClientError as e:
                  logger.error(f"Could not add tags: {e}")
                  raise


          def send_to_sqs(bucket, key):
              logger.info(f"Sending a message to the SQS queue for {bucket}/{key}")
              try:
                  SQS_CLIENT.send_message(
                      QueueUrl=AV_SCAN_QUEUE_URL,
                      MessageBody=json.dumps(
                          {"detail": {"requestParameters": {"bucketName": bucket, "key": key}}},
                      ),
                  )
                  logger.info("Sent the message")
              except ClientError as e:
                  logger.error(f"Could not send message to SQS: {e}")
                  raise

  BucketObjectTaggerPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt BucketObjectTagger.Arn
      Principal: s3.amazonaws.com
      Action: lambda:InvokeFunction
      SourceAccount: !Ref AWS::AccountId

  PresignedUrlGenerator:
    Type: AWS::Lambda::Function
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W58 # Lambda functions require permission to write CloudWatch Logs
            reason: The managed policy, AWSLambdaVPCAccessExecutionRole, attached to the execution role includes permissions to write to CloudWatch Logs
    Properties:
      FunctionName: !Sub presigned-url-generator-${ResourceSuffix}
      Handler: index.lambda_handler
      Role: !GetAtt PresignedUrlGeneratorRole.Arn
      Runtime: python3.11
      Timeout: 30
      # LoggingConfig:
      #   LogGroup: The name of the log group
      # ReservedConcurrentExecutions: 50
      VpcConfig:
        SecurityGroupIds:
          - !Ref LambdaFunctionSecurityGroup
        SubnetIds: !Ref PrivateSubnetIds
      Code:
        ZipFile: |
          import json
          import logging

          import boto3  # type: ignore
          from botocore.config import Config  # type: ignore

          logger = logging.getLogger()
          logger.setLevel(logging.INFO)

          config = Config(retries={"max_attempts": 5, "mode": "standard"})
          S3_CLIENT = boto3.client("s3", config=config)


          def lambda_handler(event, context):
              logger.info(f"Event: {json.dumps(event, default=str)}")

              bucket = event["queryStringParameters"]["bucket"]
              key = event["queryStringParameters"]["key"]

              logger.info(f"Bucket: {bucket}")
              logger.info(f"Key: {key}")

              response = S3_CLIENT.generate_presigned_post(Bucket=bucket, Key=key)

              logger.info(f"Response Body: {response}")

              response = {
                  "statusCode": 200,
                  "body": json.dumps(response),
                  "isBase64Encoded": False,
              }

              return response

  FileUploader:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: !Sub FileUploader-${ResourceSuffix}
      EndpointConfiguration:
        Types:
          - REGIONAL

  FileUploaderDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn:
      - FileUploaderUploadOptions
      - FileUploaderUploadPost
      - FileUploaderUpload
    Properties:
      Description: File Uploader Deployment
      RestApiId: !Ref FileUploader

  FileUploaderDeploymentStageProd:
    Type: AWS::ApiGateway::Stage
    Properties:
      AccessLogSetting:
        DestinationArn: !GetAtt ApiGatewayStageLogGroup.Arn
        Format: '{"requestId":"$context.requestId","ip":"$context.identity.sourceIp","user":"$context.identity.user","caller":"$context.identity.caller","requestTime":"$context.requestTime","httpMethod":"$context.httpMethod","resourcePath":"$context.resourcePath","status":"$context.status","protocol":"$context.protocol","responseLength":"$context.responseLength"}'
      CacheClusterEnabled: true
      CacheClusterSize: "0.5"
      DeploymentId: !Ref FileUploaderDeployment
      MethodSettings:
        - CacheDataEncrypted: true
          CachingEnabled: true
          DataTraceEnabled: false
          HttpMethod: "*"
          LoggingLevel: INFO
          ResourcePath: "/*"
      RestApiId: !Ref FileUploader
      StageName: prod

  FileUploaderUpload:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !GetAtt FileUploader.RootResourceId
      PathPart: upload
      RestApiId: !Ref FileUploader

  FileUploaderUploadPost:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: AWS_IAM
      HttpMethod: POST
      Integration:
        Credentials: !GetAtt APILambdaInvokeRole.Arn
        IntegrationHttpMethod: POST
        IntegrationResponses:
          - StatusCode: "200"
        PassthroughBehavior: NEVER
        RequestTemplates:
          application/json: '{ "statusCode": 200 }'
        Type: AWS_PROXY
        Uri: !Sub arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${PresignedUrlGenerator.Arn}/invocations
      MethodResponses:
        - ResponseModels:
            application/json: !Ref APIModel
          StatusCode: "200"
      ResourceId: !Ref FileUploaderUpload
      RestApiId: !Ref FileUploader

  FileUploaderUploadOptions:
    Type: AWS::ApiGateway::Method
    Properties:
      ApiKeyRequired: false # pragma: allowlist secret
      AuthorizationType: NONE
      HttpMethod: OPTIONS
      Integration:
        IntegrationResponses:
          - ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Access-Control-Allow-Methods: "'OPTIONS,GET,POST,PUT'"
            StatusCode: "200"
        RequestTemplates:
          application/json: "{ statusCode: 200 }"
        Type: MOCK
      MethodResponses:
        - ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Origin: true
            method.response.header.Access-Control-Allow-Methods: true
          StatusCode: "200"
      ResourceId: !Ref FileUploaderUpload
      RestApiId: !Ref FileUploader

  APIModel:
    Type: AWS::ApiGateway::Model
    Properties:
      ContentType: application/json
      RestApiId: !Ref FileUploader
      Schema:
        "$schema": http://json-schema.org/draft-04/schema#

  AvScanQueueURLParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub /pipeline/AvScanQueueUrl-${ResourceSuffix}
      Description: URL of the SQS Queue which manages AV Scan
      Type: String
      Value: !GetAtt AvScanQueue.QueueUrl

  ### WEB ACL RESOURCES
  IngestAPIWebACL:
    Type: AWS::WAFv2::WebACL
    Properties:
      Description: WAF for API Gateway protection
      Scope: REGIONAL
      DefaultAction:
        Allow: {}
      VisibilityConfig:
        SampledRequestsEnabled: true
        CloudWatchMetricsEnabled: true
        MetricName: IngestAPILogsWAF
      Rules:
        - Name: AWS-AWSManagedRulesCommonRuleSet
          Priority: 1
          OverrideAction:
            None: {}
          Statement:
            ManagedRuleGroupStatement:
              VendorName: AWS
              Name: AWSManagedRulesCommonRuleSet
          VisibilityConfig:
            SampledRequestsEnabled: true
            CloudWatchMetricsEnabled: true
            MetricName: AWS-AWSManagedRulesCommonRuleSetMetric
        - Name: AWS-AWSManagedRulesAnonymousIpList
          Priority: 2
          OverrideAction:
            None: {}
          Statement:
            ManagedRuleGroupStatement:
              VendorName: AWS
              Name: AWSManagedRulesAnonymousIpList
          VisibilityConfig:
            SampledRequestsEnabled: true
            CloudWatchMetricsEnabled: true
            MetricName: AWS-AWSManagedRulesAnonymousIpListMetric
        - Name: AWS-AWSManagedRulesAmazonIpReputationList
          Priority: 3
          OverrideAction:
            None: {}
          Statement:
            ManagedRuleGroupStatement:
              VendorName: AWS
              Name: AWSManagedRulesAmazonIpReputationList
          VisibilityConfig:
            SampledRequestsEnabled: true
            CloudWatchMetricsEnabled: true
            MetricName: AWS-AWSManagedRulesAmazonIpReputationListMetric
        - Name: AWS-AWSManagedRulesKnownBadInputsRuleSet
          Priority: 4
          OverrideAction:
            None: {}
          Statement:
            ManagedRuleGroupStatement:
              VendorName: AWS
              Name: AWSManagedRulesKnownBadInputsRuleSet
          VisibilityConfig:
            SampledRequestsEnabled: true
            CloudWatchMetricsEnabled: true
            MetricName: AWS-AWSManagedRulesKnownBadInputsRuleSet

  # WAF Association with API Gateway stages
  WebACLAssociationAPI:
    Type: AWS::WAFv2::WebACLAssociation
    DependsOn: FileUploaderDeploymentStageProd
    Properties:
      ResourceArn: !Sub arn:${AWS::Partition}:apigateway:${AWS::Region}::/restapis/${FileUploader}/stages/prod
      WebACLArn: !GetAtt IngestAPIWebACL.Arn

  # WAF Logging
  WAFLogGroup:
    Type: AWS::Logs::LogGroup
    DeletionPolicy: Delete
    UpdateReplacePolicy: Delete
    Properties:
      LogGroupName: !Sub
        - aws-waf-logs-${name}
        - name: !Select [0, !Split ["|", !Ref IngestAPIWebACL]]
      RetentionInDays: 731

  WAFLoggingConfiguration:
    Type: AWS::WAFv2::LoggingConfiguration
    Properties:
      LogDestinationConfigs:
        - !GetAtt WAFLogGroup.Arn
      ResourceArn: !GetAtt IngestAPIWebACL.Arn

  # Cloudwatch Metric Filter
  MetricFilter:
    Type: AWS::Logs::MetricFilter
    Properties:
      FilterName: WAF Rule Action
      FilterPattern: '{ $.action = "*" }'
      LogGroupName: !Ref WAFLogGroup
      MetricTransformations:
        - Dimensions:
            - Key: Action
              Value: $.action
          MetricName: RuleAction
          MetricNamespace: Custom/WAF
          MetricValue: 1
          Unit: Count

  InsightsRuleClientIpAllowed:
    Type: AWS::CloudWatch::InsightRule
    Properties:
      RuleName: !Sub ${WAFLogGroup}-ClientIpAllowed
      RuleState: ENABLED
      RuleBody: !Sub >
        {
          "AggregateOn": "Count",
          "Contribution": {
            "Filters": [
              {
                "Match": "$.action",
                "In": [
                  "ALLOW"
                ]
              }
            ],
            "Keys": [
              "$.httpRequest.clientIp"
            ]
          },
          "LogFormat": "JSON",
          "LogGroupNames": [
            "${WAFLogGroup}"
          ],
          "Schema": {
            "Name": "CloudWatchLogRule",
            "Version": 1
          }
        }

  InsightsRuleClientIpBlocked:
    Type: AWS::CloudWatch::InsightRule
    Properties:
      RuleName: !Sub ${WAFLogGroup}-ClientIpBlocked
      RuleState: ENABLED
      RuleBody: !Sub >
        {
          "AggregateOn": "Count",
          "Contribution": {
            "Filters": [
              {
                "Match": "$.action",
                "In": [
                  "BLOCK"
                ]
              }
            ],
            "Keys": [
              "$.httpRequest.clientIp"
            ]
          },
          "LogFormat": "JSON",
          "LogGroupNames": [
            "${WAFLogGroup}"
          ],
          "Schema": {
            "Name": "CloudWatchLogRule",
            "Version": 1
          }
        }

  InsightsRuleCountryAllowed:
    Type: AWS::CloudWatch::InsightRule
    Properties:
      RuleName: !Sub ${WAFLogGroup}-CountryAllowed
      RuleState: ENABLED
      RuleBody: !Sub >
        {
          "AggregateOn": "Count",
          "Contribution": {
            "Filters": [
              {
                "Match": "$.action",
                "In": [
                  "ALLOW"
                ]
              }
            ],
            "Keys": [
              "$.httpRequest.country"
            ]
          },
          "LogFormat": "JSON",
          "LogGroupNames": [
            "${WAFLogGroup}"
          ],
          "Schema": {
            "Name": "CloudWatchLogRule",
            "Version": 1
          }
        }

  InsightsRuleCountryBlocked:
    Type: AWS::CloudWatch::InsightRule
    Properties:
      RuleName: !Sub ${WAFLogGroup}-CountryBlocked
      RuleState: ENABLED
      RuleBody: !Sub >
        {
          "AggregateOn": "Count",
          "Contribution": {
            "Filters": [
              {
                "Match": "$.action",
                "In": [
                  "BLOCK"
                ]
              }
            ],
            "Keys": [
              "$.httpRequest.country"
            ]
          },
          "LogFormat": "JSON",
          "LogGroupNames": [
            "${WAFLogGroup}"
          ],
          "Schema": {
            "Name": "CloudWatchLogRule",
            "Version": 1
          }
        }

  InsightsRuleUriAllowed:
    Type: AWS::CloudWatch::InsightRule
    Properties:
      RuleName: !Sub ${WAFLogGroup}-UriAllowed
      RuleState: ENABLED
      RuleBody: !Sub >
        {
          "AggregateOn": "Count",
          "Contribution": {
            "Filters": [
              {
                "Match": "$.action",
                "In": [
                  "ALLOW"
                ]
              }
            ],
            "Keys": [
              "$.httpRequest.uri"
            ]
          },
          "LogFormat": "JSON",
          "LogGroupNames": [
            "${WAFLogGroup}"
          ],
          "Schema": {
            "Name": "CloudWatchLogRule",
            "Version": 1
          }
        }

  InsightsRuleUriBlocked:
    Type: AWS::CloudWatch::InsightRule
    Properties:
      RuleName: !Sub ${WAFLogGroup}-UriBlocked
      RuleState: ENABLED
      RuleBody: !Sub >
        {
          "AggregateOn": "Count",
          "Contribution": {
            "Filters": [
              {
                "Match": "$.action",
                "In": [
                  "BLOCK"
                ]
              }
            ],
            "Keys": [
              "$.httpRequest.uri"
            ]
          },
          "LogFormat": "JSON",
          "LogGroupNames": [
            "${WAFLogGroup}"
          ],
          "Schema": {
            "Name": "CloudWatchLogRule",
            "Version": 1
          }
        }

  InsightsRuleTerminatingRuleAllowed:
    Type: AWS::CloudWatch::InsightRule
    Properties:
      RuleName: !Sub ${WAFLogGroup}-TerminatingRuleAllowed
      RuleState: ENABLED
      RuleBody: !Sub >
        {
          "AggregateOn": "Count",
          "Contribution": {
            "Filters": [
              {
                "Match": "$.action",
                "In": [
                  "ALLOW"
                ]
              }
            ],
            "Keys": [
              "$.terminatingRuleId"
            ]
          },
          "LogFormat": "JSON",
          "LogGroupNames": [
            "${WAFLogGroup}"
          ],
          "Schema": {
            "Name": "CloudWatchLogRule",
            "Version": 1
          }
        }

  InsightsRuleTerminatingRuleBlocked:
    Type: AWS::CloudWatch::InsightRule
    Properties:
      RuleName: !Sub ${WAFLogGroup}-TerminatingRuleBlocked
      RuleState: ENABLED
      RuleBody: !Sub >
        {
          "AggregateOn": "Count",
          "Contribution": {
            "Filters": [
              {
                "Match": "$.action",
                "In": [
                  "BLOCK"
                ]
              }
            ],
            "Keys": [
              "$.terminatingRuleId"
            ]
          },
          "LogFormat": "JSON",
          "LogGroupNames": [
            "${WAFLogGroup}"
          ],
          "Schema": {
            "Name": "CloudWatchLogRule",
            "Version": 1
          }
        }

  AlarmBlockRatio:
    Type: AWS::CloudWatch::Alarm
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W28 # Resource found with an explicit name, this disallows updates that require replacement of this resource
            reason: An explicit name is required
    Properties:
      AlarmName: !Sub ${WAFLogGroup}-block-ratio-anomaly
      AlarmDescription: Abnormal percentage of total requests blocked over 5 minute period.
      ActionsEnabled: true
      EvaluationPeriods: 1
      DatapointsToAlarm: 1
      ComparisonOperator: GreaterThanUpperThreshold
      TreatMissingData: notBreaching
      Metrics:
        - Id: e1
          Label: Block Percentage
          ReturnData: true
          Expression: m2 / (m2 + m1) * 100
        - Id: m2
          ReturnData: false
          MetricStat:
            Metric:
              Namespace: Custom/WAF
              MetricName: RuleAction
              Dimensions:
                - Name: Action
                  Value: BLOCK
            Period: 300
            Stat: Sum
        - Id: m1
          ReturnData: false
          MetricStat:
            Metric:
              Namespace: Custom/WAF
              MetricName: RuleAction
              Dimensions:
                - Name: Action
                  Value: ALLOW
            Period: 300
            Stat: Sum
        - Id: ad1
          Label: Block Ratio (expected)
          ReturnData: true
          Expression: ANOMALY_DETECTION_BAND(e1, 2)
      ThresholdMetricId: ad1

  AlarmClientIpAllowed:
    Type: AWS::CloudWatch::Alarm
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W28 # Resource found with an explicit name, this disallows updates that require replacement of this resource
            reason: An explicit name is required
    Properties:
      AlarmName: !Sub ${WAFLogGroup}-top-clientip-allowed-anomaly
      AlarmDescription: Abnormal number of requests for the top allowed client IP over 5 minutes.
      ActionsEnabled: true
      EvaluationPeriods: 1
      DatapointsToAlarm: 1
      ComparisonOperator: LessThanLowerOrGreaterThanUpperThreshold
      TreatMissingData: notBreaching
      Metrics:
        - Id: e0
          Label: !Sub ${InsightsRuleClientIpAllowed.RuleName} MaxContributorValue
          ReturnData: true
          Expression: !Sub INSIGHT_RULE_METRIC('${InsightsRuleClientIpAllowed.RuleName}','MaxContributorValue')
          Period: 300
        - Id: ad1
          Label: !Sub ${InsightsRuleClientIpAllowed.RuleName} MaxContributorValue (expected)
          ReturnData: true
          Expression: ANOMALY_DETECTION_BAND(e0, 2)
      ThresholdMetricId: ad1

  AlarmClientIpBlocked:
    Type: AWS::CloudWatch::Alarm
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W28 # Resource found with an explicit name, this disallows updates that require replacement of this resource
            reason: An explicit name is required
    Properties:
      AlarmName: !Sub ${WAFLogGroup}-top-clientip-blocked-anomaly
      AlarmDescription: Abnormal number of requests for the top blocked client IP over 5 minutes.
      ActionsEnabled: true
      EvaluationPeriods: 1
      DatapointsToAlarm: 1
      ComparisonOperator: LessThanLowerOrGreaterThanUpperThreshold
      TreatMissingData: notBreaching
      Metrics:
        - Id: e0
          Label: !Sub ${InsightsRuleClientIpBlocked.RuleName} MaxContributorValue
          ReturnData: true
          Expression: !Sub INSIGHT_RULE_METRIC('${InsightsRuleClientIpBlocked.RuleName}','MaxContributorValue')
          Period: 300
        - Id: ad1
          Label: !Sub ${InsightsRuleClientIpBlocked.RuleName} MaxContributorValue (expected)
          ReturnData: true
          Expression: ANOMALY_DETECTION_BAND(e0, 2)
      ThresholdMetricId: ad1

  Dashboard:
    Type: AWS::CloudWatch::Dashboard
    Properties:
      DashboardName: !Ref WAFLogGroup
      DashboardBody: !Sub >
        {
          "start": "-PT1H",
          "widgets": [
            {
              "height": 3,
              "width": 3,
              "y": 0,
              "x": 0,
              "type": "metric",
              "properties": {
                "metrics": [
                  [
                    "Custom/WAF",
                    "RuleAction",
                    "Action",
                    "BLOCK",
                    { "label": "Requests Blocked", "color": "#ff7f0e" }
                  ]
                ],
                "view": "singleValue",
                "stacked": true,
                "region": "${AWS::Region}",
                "period": 60,
                "stat": "Sum",
                "yAxis": {
                  "left": {
                    "showUnits": false,
                    "label": "Requests",
                    "min": 0
                  },
                  "right": {
                    "showUnits": false
                  }
                },
                "liveData": false,
                "setPeriodToTimeRange": true,
                "title": " ",
                "singleValueFullPrecision": false
              }
            },
            {
              "height": 3,
              "width": 3,
              "y": 3,
              "x": 0,
              "type": "metric",
              "properties": {
                "metrics": [
                  [
                    "Custom/WAF",
                    "RuleAction",
                    "Action",
                    "ALLOW",
                    { "label": "Requests Allowed" }
                  ]
                ],
                "view": "singleValue",
                "stacked": true,
                "region": "${AWS::Region}",
                "period": 60,
                "stat": "Sum",
                "yAxis": {
                  "left": {
                    "showUnits": false,
                    "label": "Requests",
                    "min": 0
                  },
                  "right": {
                    "showUnits": false
                  }
                },
                "setPeriodToTimeRange": true,
                "title": " ",
                "singleValueFullPrecision": false
              }
            },
            {
              "height": 6,
              "width": 15,
              "y": 0,
              "x": 3,
              "type": "metric",
              "properties": {
                "metrics": [
                  [
                    {
                      "expression": "FILL(METRICS(), 0)",
                      "label": "",
                      "id": "fill",
                      "region": "${AWS::Region}",
                      "color": "#1f77b4"
                    }
                  ],
                  [
                    "Custom/WAF",
                    "RuleAction",
                    "Action",
                    "ALLOW",
                    {
                      "id": "allowed",
                      "color": "#1f77b4",
                      "visible": false,
                      "label": "Requests Allowed"
                    }
                  ],
                  [
                    "Custom/WAF",
                    "RuleAction",
                    "Action",
                    "BLOCK",
                    {
                      "id": "blocked",
                      "visible": false,
                      "label": "Requests Blocked",
                      "color": "#ff7f0e"
                    }
                  ]
                ],
                "view": "timeSeries",
                "stacked": true,
                "region": "${AWS::Region}",
                "period": 60,
                "stat": "Sum",
                "yAxis": {
                  "left": {
                    "showUnits": false,
                    "label": "",
                    "min": 0
                  },
                  "right": {
                    "showUnits": false
                  }
                },
                "setPeriodToTimeRange": true,
                "title": "",
                "legend": {
                  "position": "right"
                }
              }
            },
            {
              "height": 6,
              "width": 6,
              "y": 0,
              "x": 18,
              "type": "metric",
              "properties": {
                "metrics": [
                  [
                    {
                      "expression": "blocked / (allowed + blocked) * 100",
                      "label": "Block %",
                      "id": "blkratio",
                      "color": "#ff7f0e",
                      "region": "${AWS::Region}"
                    }
                  ],
                  [
                    "Custom/WAF",
                    "RuleAction",
                    "Action",
                    "BLOCK",
                    {
                      "id": "blocked",
                      "label": "Blocked",
                      "color": "#ff7f0e",
                      "visible": false
                    }
                  ],
                  [
                    "Custom/WAF",
                    "RuleAction",
                    "Action",
                    "ALLOW",
                    {
                      "id": "allowed",
                      "color": "#1f77b4",
                      "visible": false,
                      "label": "Allowed"
                    }
                  ]
                ],
                "region": "${AWS::Region}",
                "view": "gauge",
                "period": 60,
                "stat": "Sum",
                "yAxis": {
                  "left": {
                    "showUnits": false,
                    "min": 0,
                    "max": 100
                  },
                  "right": {
                    "showUnits": false
                  }
                },
                "setPeriodToTimeRange": true,
                "legend": {
                  "position": "bottom"
                },
                "singleValueFullPrecision": true
              }
            },
            {
              "height": 6,
              "width": 12,
              "y": 6,
              "x": 0,
              "type": "metric",
              "properties": {
                "period": 60,
                "region": "${AWS::Region}",
                "stacked": true,
                "timezone": "local",
                "title": "Top Allowed by Terminating Rule",
                "view": "timeSeries",
                "insightRule": {
                  "maxContributorCount": 10,
                  "orderBy": "Sum",
                  "ruleName": "${InsightsRuleTerminatingRuleAllowed.RuleName}"
                },
                "legend": {
                  "position": "right"
                },
                "yAxis": {
                  "left": {
                    "showUnits": true,
                    "min": 0
                  }
                }
              }
            },
            {
              "height": 6,
              "width": 12,
              "y": 6,
              "x": 12,
              "type": "metric",
              "properties": {
                "period": 60,
                "region": "${AWS::Region}",
                "stacked": true,
                "timezone": "local",
                "title": "Top Blocked by Terminating Rule",
                "view": "timeSeries",
                "insightRule": {
                  "maxContributorCount": 10,
                  "orderBy": "Sum",
                  "ruleName": "${InsightsRuleTerminatingRuleBlocked.RuleName}"
                },
                "legend": {
                  "position": "right"
                },
                "yAxis": {
                  "left": {
                    "showUnits": true,
                    "min": 0
                  }
                }
              }
            },
            {
              "height": 6,
              "width": 12,
              "y": 12,
              "x": 0,
              "type": "metric",
              "properties": {
                "period": 60,
                "region": "${AWS::Region}",
                "stacked": true,
                "timezone": "local",
                "title": "Top Allowed by IP",
                "view": "timeSeries",
                "insightRule": {
                  "maxContributorCount": 10,
                  "orderBy": "Sum",
                  "ruleName": "${InsightsRuleClientIpAllowed.RuleName}"
                },
                "legend": {
                  "position": "right"
                },
                "yAxis": {
                  "left": {
                    "showUnits": true,
                    "min": 0
                  }
                }
              }
            },
            {
              "height": 6,
              "width": 12,
              "y": 12,
              "x": 12,
              "type": "metric",
              "properties": {
                "yAxis": {
                  "left": {
                    "showUnits": false,
                    "label": "",
                    "min": 0
                  },
                  "right": {
                    "showUnits": false
                  }
                },
                "period": 60,
                "region": "${AWS::Region}",
                "stacked": true,
                "timezone": "local",
                "title": "Top Blocked by IP",
                "view": "timeSeries",
                "insightRule": {
                  "maxContributorCount": 10,
                  "orderBy": "Sum",
                  "ruleName": "${InsightsRuleClientIpBlocked.RuleName}"
                },
                "legend": {
                  "position": "right"
                }
              }
            },
            {
              "height": 6,
              "width": 12,
              "y": 18,
              "x": 0,
              "type": "metric",
              "properties": {
                "period": 60,
                "region": "${AWS::Region}",
                "stacked": true,
                "timezone": "local",
                "title": "Top Allowed by Country",
                "view": "timeSeries",
                "insightRule": {
                  "maxContributorCount": 10,
                  "orderBy": "Sum",
                  "ruleName": "${InsightsRuleCountryAllowed.RuleName}"
                },
                "legend": {
                  "position": "bottom"
                },
                "yAxis": {
                  "left": {
                    "showUnits": true,
                    "min": 0
                  }
                }
              }
            },
            {
              "height": 6,
              "width": 12,
              "y": 18,
              "x": 12,
              "type": "metric",
              "properties": {
                "period": 60,
                "region": "${AWS::Region}",
                "stacked": true,
                "timezone": "local",
                "title": "Top Blocked by Country",
                "view": "timeSeries",
                "insightRule": {
                  "maxContributorCount": 10,
                  "orderBy": "Sum",
                  "ruleName": "${InsightsRuleCountryBlocked.RuleName}"
                },
                "legend": {
                  "position": "bottom"
                },
                "yAxis": {
                  "left": {
                    "showUnits": true,
                    "min": 0
                  }
                }
              }
            },
            {
              "height": 6,
              "width": 12,
              "y": 24,
              "x": 0,
              "type": "metric",
              "properties": {
                "period": 60,
                "region": "${AWS::Region}",
                "stacked": true,
                "timezone": "local",
                "title": "Top Allowed by Request URI",
                "view": "timeSeries",
                "insightRule": {
                  "maxContributorCount": 10,
                  "orderBy": "Sum",
                  "ruleName": "${InsightsRuleUriAllowed.RuleName}"
                },
                "legend": {
                  "position": "right"
                },
                "yAxis": {
                  "left": {
                    "showUnits": true,
                    "min": 0
                  }
                }
              }
            },
            {
              "height": 6,
              "width": 12,
              "y": 24,
              "x": 12,
              "type": "metric",
              "properties": {
                "period": 60,
                "region": "${AWS::Region}",
                "stacked": true,
                "timezone": "local",
                "title": "Top Blocked by URI Path",
                "view": "timeSeries",
                "insightRule": {
                  "maxContributorCount": 10,
                  "orderBy": "Sum",
                  "ruleName": "${InsightsRuleUriBlocked.RuleName}"
                },
                "legend": {
                  "position": "right"
                },
                "yAxis": {
                  "left": {
                    "showUnits": true,
                    "min": 0
                  }
                }
              }
            }
          ]
        }

Outputs:
  AvScanQueueUrl:
    Description: Queue URL of the SQS AV Scan Queue
    Value: !Ref AvScanQueue
    Export:
      Name: !Sub aftac-pipeline-av-scan-queue-${ResourceSuffix}

  AvScanQueueName:
    Description: Name of the SQS AV Scan Queue
    Value: !GetAtt AvScanQueue.QueueName
    Export:
      Name: !Sub aftac-pipeline-av-scan-queue-name-${ResourceSuffix}

  BucketObjectTaggerArn:
    Description: ARN of the Object Tagger Lambda Function
    Value: !GetAtt BucketObjectTagger.Arn
    Export:
      Name: !Sub aftac-pipeline-object-tagger-${ResourceSuffix}

  PresignedUrlGeneratorInvokeUrl:
    Value: !Sub https://${FileUploader}.execute-api.${AWS::Region}.amazonaws.com/prod/upload
    Description: URL of the Presign Generator API Endpoint
