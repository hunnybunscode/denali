Parameters:
  ResourceSuffix:
    Type: String
    Description: Suffix added to the named AWS resources

  VpcCidr:
    Type: String
    Description: The CIDR block of the existing VPC

  S3PrefixListId:
    Type: String
    Description: The S3 prefix list ID to use for the pipeline

  Bucket1CDSProfile:
    Type: String
    Description: The CDS Profile for the Bucket 1

  Bucket2CDSProfile:
    Type: String
    Description: The CDS Profile for the Bucket 2

  ObjectTaggerRoleARN:
    Type: String
    Description: ARN of the IAM role for the Object Tagger Lambda

  PresignGeneratorServiceRole:
    Type: String
    Description: ARN of the IAM role for the Presign Generator Lambda

  ObjectTaggerLambdaCodeKey:
    Type: String
    Description: S3 key for the Object Tagger Lambda code

  ObjectTaggerLambdaCodeKeyVersion:
    Type: String
    Description: S3 object version of the Object Tagger Lambda code

  LambdaStorageBucket:
    Type: String
    Description: S3 bucket where the Lambda code is stored

  ApiGwLambdaCodeKey:
    Type: String
    Description: S3 key for the API Gateway Lambda code

  ApiGwLambdaCodeKeyVersion:
    Type: String
    Description: S3 object version of the API Gateway Lambda code

  FileUploaderCloudWatchRole:
    Type: String
    Description: ARN of the file uploader CloudWatch role

  APILambdaInvokeRole:
    Type: String
    Description: ARN of the API Lambda invoke role

  VpcId:
    Type: String
    Description: VPC ID

  PrivateSubnetIds:
    Type: CommaDelimitedList
    Description: The list of private subnet IDs to use for the pipeline

  BucketOneGovPoc:
    Type: String
    Description: String to be added as a tag to objects in Bucket 1

  BucketOneDataOwner:
    Type: String
    Description: String to be added as a tag to objects in Bucket 1

  BucketOneKeyOwner:
    Type: String
    Description: String to be added as a tag to objects in Bucket 1

  BucketTwoGovPoc:
    Type: String
    Description: String to be added as a tag to objects in Bucket 2

  BucketTwoDataOwner:
    Type: String
    Description: String to be added as a tag to objects in Bucket 2

  BucketTwoKeyOwner:
    Type: String
    Description: String to be added as a tag to objects in Bucket 2

Resources:
  AvScanDeadLetterQueue:
    Type: AWS::SQS::Queue
    UpdateReplacePolicy: Delete
    DeletionPolicy: Delete
    Properties:
      MessageRetentionPeriod: 1209600 # 14 days
      ReceiveMessageWaitTimeSeconds: 20
      KmsMasterKeyId: alias/aws/sqs

  AvScanQueue:
    Type: AWS::SQS::Queue
    UpdateReplacePolicy: Delete
    DeletionPolicy: Delete
    Properties:
      MessageRetentionPeriod: 345600 # Default value (4 days)
      ReceiveMessageWaitTimeSeconds: 20
      KmsMasterKeyId: alias/aws/sqs
      RedrivePolicy:
        deadLetterTargetArn: !GetAtt AvScanDeadLetterQueue.Arn
        maxReceiveCount: 5

  AvScanQueuePolicy:
    Type: AWS::SQS::QueuePolicy
    Properties:
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Deny
            Principal:
              AWS: "*"
            Action: sqs:*
            Resource: !GetAtt AvScanQueue.Arn
            Condition:
              Bool:
                aws:SecureTransport: false
      Queues:
        - !Ref AvScanQueue

  LambdaFunctionSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security Group for Lambda Functions
      SecurityGroupEgress:
        - CidrIp: !Ref VpcCidr
          IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          Description: Allow TCP traffic out to VPC CIDR
        - DestinationPrefixListId: !Ref S3PrefixListId
          IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          Description: Allow TCP traffic out to S3 Gateway Endpoint
      VpcId: !Ref VpcId

  Bucket1ObjectTagger:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub bucket-1-object-tagger-${ResourceSuffix}
      Handler: object_tagger.lambda_handler
      Role: !Ref ObjectTaggerRoleARN
      Runtime: python3.11
      Timeout: 30
      Environment:
        Variables:
          DATA_OWNER: !Ref BucketOneDataOwner
          GOV_POC: !Ref BucketOneGovPoc
          KEY_OWNER: !Ref BucketOneKeyOwner
          CDS_PROFILE: !Ref Bucket1CDSProfile
          QUEUE_URL: !Ref AvScanQueue
      Code:
        S3Bucket: !Ref LambdaStorageBucket
        S3Key: !Ref ObjectTaggerLambdaCodeKey
        S3ObjectVersion: !Ref ObjectTaggerLambdaCodeKeyVersion
      VpcConfig:
        SecurityGroupIds:
          - !Ref LambdaFunctionSecurityGroup
        SubnetIds: !Ref PrivateSubnetIds

  Bucket1ObjectTaggerPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt Bucket1ObjectTagger.Arn
      Principal: s3.amazonaws.com
      Action: lambda:InvokeFunction
      SourceAccount: !Ref AWS::AccountId

  Bucket2ObjectTagger:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub bucket-2-object-tagger-${ResourceSuffix}
      Handler: object_tagger.lambda_handler
      Role: !Ref ObjectTaggerRoleARN
      Runtime: python3.11
      Timeout: 30
      Environment:
        Variables:
          DATA_OWNER: !Ref BucketTwoDataOwner
          GOV_POC: !Ref BucketTwoGovPoc
          KEY_OWNER: !Ref BucketTwoKeyOwner
          QUEUE_URL: !Ref AvScanQueue
          CDS_PROFILE: !Ref Bucket2CDSProfile
      Code:
        S3Bucket: !Ref LambdaStorageBucket
        S3Key: !Ref ObjectTaggerLambdaCodeKey
        S3ObjectVersion: !Ref ObjectTaggerLambdaCodeKeyVersion
      VpcConfig:
        SecurityGroupIds:
          - !Ref LambdaFunctionSecurityGroup
        SubnetIds: !Ref PrivateSubnetIds

  Bucket2ObjectTaggerPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt Bucket2ObjectTagger.Arn
      Principal: s3.amazonaws.com
      Action: lambda:InvokeFunction
      SourceAccount: !Ref AWS::AccountId

  IngestBucket1:
    Type: AWS::S3::Bucket
    Properties:
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      NotificationConfiguration:
        LambdaConfigurations:
          - Event: s3:ObjectCreated:*
            Function: !GetAtt Bucket1ObjectTagger.Arn

  IngestBucket1Policy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref IngestBucket1
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Deny
            Principal:
              AWS: "*"
            Action: s3:*
            Resource:
              - !Sub ${IngestBucket1.Arn}
              - !Sub ${IngestBucket1.Arn}/*
            Condition:
              Bool:
                aws:SecureTransport: false

  IngestBucket2:
    Type: AWS::S3::Bucket
    Properties:
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      NotificationConfiguration:
        LambdaConfigurations:
          - Event: s3:ObjectCreated:*
            Function: !GetAtt Bucket2ObjectTagger.Arn

  IngestBucket2Policy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref IngestBucket2
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Deny
            Principal:
              AWS: "*"
            Action: s3:*
            Resource:
              - !Sub ${IngestBucket2.Arn}
              - !Sub ${IngestBucket2.Arn}/*
            Condition:
              Bool:
                aws:SecureTransport: false

  PresignGenerator:
    Type: AWS::Lambda::Function
    Properties:
      Handler: presigner.lambda_handler
      Role: !Ref PresignGeneratorServiceRole
      Runtime: python3.11
      Environment:
        Variables:
          ingest_bucket: !Ref IngestBucket1
      Code:
        S3Bucket: !Ref LambdaStorageBucket
        S3Key: !Ref ApiGwLambdaCodeKey
        S3ObjectVersion: !Ref ApiGwLambdaCodeKeyVersion
      VpcConfig:
        SecurityGroupIds:
          - !Ref LambdaFunctionSecurityGroup
        SubnetIds: !Ref PrivateSubnetIds

  FileUploader:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: FileUploader1
      EndpointConfiguration:
        Types:
          - REGIONAL

  # Specifies the IAM role that Amazon API Gateway uses to write API logs to Amazon CloudWatch Logs
  # To avoid overwriting other roles, you should only have one AWS::ApiGateway::Account resource per region per account.
  # Should we create this outside CloudFormation?
  FileUploaderAccount:
    Type: AWS::ApiGateway::Account
    DependsOn:
      - FileUploader
      - FileUploader2
    UpdateReplacePolicy: Retain
    DeletionPolicy: Retain
    Properties:
      CloudWatchRoleArn: !Ref FileUploaderCloudWatchRole

  FileUploaderDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn:
      - APIModel
      - FileUploaderUploadOPTIONS
      - FileUploaderUploadPOST
      - FileUploaderUpload
    Properties:
      Description: Automatically created by the RestApi construct
      RestApiId: !Ref FileUploader

  FileUploaderDeploymentStageProd:
    Type: AWS::ApiGateway::Stage
    DependsOn: FileUploaderAccount
    Properties:
      AccessLogSetting:
        DestinationArn:
          Fn::ImportValue: !Sub aftac-pipeline-ApiGatewayStageLogGroup-${ResourceSuffix}
        Format: '{"requestId":"$context.requestId","ip":"$context.identity.sourceIp","user":"$context.identity.user","caller":"$context.identity.caller","requestTime":"$context.requestTime","httpMethod":"$context.httpMethod","resourcePath":"$context.resourcePath","status":"$context.status","protocol":"$context.protocol","responseLength":"$context.responseLength"}'
      CacheClusterEnabled: true
      CacheClusterSize: "0.5"
      DeploymentId: !Ref FileUploaderDeployment
      MethodSettings:
        - CacheDataEncrypted: true
          CachingEnabled: true
          DataTraceEnabled: false
          HttpMethod: "*"
          LoggingLevel: INFO
          ResourcePath: "/*"
      RestApiId: !Ref FileUploader
      StageName: prod

  FileUploaderUpload:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !GetAtt FileUploader.RootResourceId
      PathPart: upload
      RestApiId: !Ref FileUploader

  FileUploaderUploadPOSTApiPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref PresignGenerator
      Principal: apigateway.amazonaws.com
      Action: lambda:InvokeFunction
      SourceArn: !Sub arn:${AWS::Partition}:execute-api:${AWS::Region}:${AWS::AccountId}:${FileUploader}/${FileUploaderDeploymentStageProd}/POST/upload

  FileUploaderUploadPOST:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: AWS_IAM
      HttpMethod: POST
      Integration:
        Credentials: !Ref APILambdaInvokeRole
        IntegrationHttpMethod: POST
        IntegrationResponses:
          - StatusCode: "200"
        PassthroughBehavior: NEVER
        RequestTemplates:
          application/json: '{ "statusCode": 200 }'
        Type: AWS_PROXY
        Uri: !Sub arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${PresignGenerator.Arn}/invocations
      MethodResponses:
        - ResponseModels:
            application/json: !Ref APIModel
          StatusCode: "200"
      ResourceId: !Ref FileUploaderUpload
      RestApiId: !Ref FileUploader

  FileUploaderUploadPUT:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: AWS_IAM
      HttpMethod: PUT
      Integration:
        Credentials: !Ref APILambdaInvokeRole
        IntegrationHttpMethod: PUT
        IntegrationResponses:
          - StatusCode: "200"
        PassthroughBehavior: NEVER
        RequestTemplates:
          application/json: '{ "statusCode": 200 }'
        Type: AWS_PROXY
        Uri: !Sub arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${PresignGenerator.Arn}/invocations
      MethodResponses:
        - ResponseModels:
            application/json: !Ref APIModel
          StatusCode: "200"
      ResourceId: !Ref FileUploaderUpload
      RestApiId: !Ref FileUploader

  FileUploaderUploadOPTIONS:
    Type: AWS::ApiGateway::Method
    Properties:
      ApiKeyRequired: false # pragma: allowlist secret
      AuthorizationType: NONE
      HttpMethod: OPTIONS
      Integration:
        IntegrationResponses:
          - ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Access-Control-Allow-Methods: "'OPTIONS,GET,POST,PUT'"
            StatusCode: "200"
        RequestTemplates:
          application/json: "{ statusCode: 200 }"
        Type: MOCK
      MethodResponses:
        - ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Origin: true
            method.response.header.Access-Control-Allow-Methods: true
          StatusCode: "200"
      ResourceId: !Ref FileUploaderUpload
      RestApiId: !Ref FileUploader

  APIModel:
    Type: AWS::ApiGateway::Model
    Properties:
      ContentType: application/json
      RestApiId: !Ref FileUploader
      Schema:
        "$schema": http://json-schema.org/draft-04/schema#

  PresignGenerator2:
    Type: AWS::Lambda::Function
    Properties:
      Handler: presigner.lambda_handler
      Role: !Ref PresignGeneratorServiceRole
      Runtime: python3.11
      Environment:
        Variables:
          ingest_bucket: !Ref IngestBucket2
      Code:
        S3Bucket: !Ref LambdaStorageBucket
        S3Key: !Ref ApiGwLambdaCodeKey
        S3ObjectVersion: !Ref ApiGwLambdaCodeKeyVersion
      VpcConfig:
        SecurityGroupIds:
          - !Ref LambdaFunctionSecurityGroup
        SubnetIds: !Ref PrivateSubnetIds

  FileUploader2:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: FileUploader2
      EndpointConfiguration:
        Types:
          - REGIONAL

  FileUploaderDeployment2:
    Type: AWS::ApiGateway::Deployment
    DependsOn:
      - APIModel2
      - FileUploaderUploadOPTIONS2
      - FileUploaderUploadPOST2
      - FileUploaderUpload2
    Properties:
      Description: Automatically created by the RestApi construct
      RestApiId: !Ref FileUploader2

  FileUploaderDeploymentStageProd2:
    Type: AWS::ApiGateway::Stage
    DependsOn: FileUploaderAccount
    Properties:
      AccessLogSetting:
        DestinationArn:
          Fn::ImportValue: !Sub aftac-pipeline-ApiGatewayStageLogGroup-${ResourceSuffix}
        Format: '{"requestId":"$context.requestId","ip":"$context.identity.sourceIp","user":"$context.identity.user","caller":"$context.identity.caller","requestTime":"$context.requestTime","httpMethod":"$context.httpMethod","resourcePath":"$context.resourcePath","status":"$context.status","protocol":"$context.protocol","responseLength":"$context.responseLength"}'
      CacheClusterEnabled: true
      CacheClusterSize: "0.5"
      DeploymentId: !Ref FileUploaderDeployment2
      MethodSettings:
        - CacheDataEncrypted: true
          CachingEnabled: true
          DataTraceEnabled: false
          HttpMethod: "*"
          LoggingLevel: INFO
          ResourcePath: "/*"
      RestApiId: !Ref FileUploader2
      StageName: prod

  FileUploaderUpload2:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !GetAtt FileUploader2.RootResourceId
      PathPart: upload
      RestApiId: !Ref FileUploader2

  FileUploaderUploadPOSTApiPermission2:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt PresignGenerator2.Arn
      Principal: apigateway.amazonaws.com
      Action: lambda:InvokeFunction
      SourceArn: !Sub arn:${AWS::Partition}:execute-api:${AWS::Region}:${AWS::AccountId}:${FileUploader}/${FileUploaderDeploymentStageProd}/POST/upload

  FileUploaderUploadPOST2:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: AWS_IAM
      HttpMethod: POST
      Integration:
        Credentials: !Ref APILambdaInvokeRole
        IntegrationHttpMethod: POST
        IntegrationResponses:
          - StatusCode: "200"
        PassthroughBehavior: NEVER
        RequestTemplates:
          application/json: '{ "statusCode": 200 }'
        Type: AWS_PROXY
        Uri: !Sub arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${PresignGenerator2.Arn}/invocations
      MethodResponses:
        - ResponseModels:
            application/json: !Ref APIModel2
          StatusCode: "200"
      ResourceId: !Ref FileUploaderUpload2
      RestApiId: !Ref FileUploader2

  FileUploaderUploadOPTIONS2:
    Type: AWS::ApiGateway::Method
    Properties:
      ApiKeyRequired: false # pragma: allowlist secret
      AuthorizationType: NONE
      HttpMethod: OPTIONS
      Integration:
        IntegrationResponses:
          - ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Access-Control-Allow-Methods: "'OPTIONS,GET,POST,PUT'"
            StatusCode: "200"
        RequestTemplates:
          application/json: "{ statusCode: 200 }"
        Type: MOCK
      MethodResponses:
        - ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Origin: true
            method.response.header.Access-Control-Allow-Methods: true
          StatusCode: "200"
      ResourceId: !Ref FileUploaderUpload2
      RestApiId: !Ref FileUploader2

  APIModel2:
    Type: AWS::ApiGateway::Model
    Properties:
      ContentType: application/json
      RestApiId: !Ref FileUploader2
      Schema:
        "$schema": http://json-schema.org/draft-04/schema#

  AvScanQueueURLParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub /pipeline/AvScanQueueUrl-${ResourceSuffix}
      Description: URL of the SQS Queue which manages AV Scan
      Type: String
      Value: !GetAtt AvScanQueue.QueueUrl
  
  ### WEB ACL RESOURCES
  IngestAPIWebACL:
    Type: AWS::WAFv2::WebACL
    Properties:
      Description: WAF for API Gateway protection
      Scope: REGIONAL
      DefaultAction:
        Allow: {}
      VisibilityConfig:
        SampledRequestsEnabled: true
        CloudWatchMetricsEnabled: true
        MetricName: IngestAPILogsWAF
      Rules:
        - Name: AWS-AWSManagedRulesCommonRuleSet
          Priority: 1
          OverrideAction:
            None: {}
          Statement:
            ManagedRuleGroupStatement:
              VendorName: AWS
              Name: AWSManagedRulesCommonRuleSet
          VisibilityConfig:
            SampledRequestsEnabled: true
            CloudWatchMetricsEnabled: true
            MetricName: AWS-AWSManagedRulesCommonRuleSetMetric
        - Name: AWS-AWSManagedRulesAnonymousIpList
          Priority: 2
          OverrideAction:
            None: {}
          Statement:
            ManagedRuleGroupStatement:
              VendorName: AWS
              Name: AWSManagedRulesAnonymousIpList
          VisibilityConfig:
            SampledRequestsEnabled: true
            CloudWatchMetricsEnabled: true
            MetricName: AWS-AWSManagedRulesAnonymousIpListMetric
        - Name: AWS-AWSManagedRulesAmazonIpReputationList
          Priority: 3
          OverrideAction:
            None: {}
          Statement:
            ManagedRuleGroupStatement:
              VendorName: AWS
              Name: AWSManagedRulesAmazonIpReputationList
          VisibilityConfig:
            SampledRequestsEnabled: true
            CloudWatchMetricsEnabled: true
            MetricName: AWS-AWSManagedRulesAmazonIpReputationListMetric
        - Name: AWS-AWSManagedRulesKnownBadInputsRuleSet
          Priority: 4
          OverrideAction:
            None: {}
          Statement:
            ManagedRuleGroupStatement:
              VendorName: AWS
              Name: AWSManagedRulesKnownBadInputsRuleSet
          VisibilityConfig:
            SampledRequestsEnabled: true
            CloudWatchMetricsEnabled: true
            MetricName: AWS-AWSManagedRulesKnownBadInputsRuleSet

  # WAF Association with API Gateway stages
  WebACLAssociationAPI1:
    Type: AWS::WAFv2::WebACLAssociation
    Properties:
      ResourceArn: !Sub arn:${AWS::Partition}:apigateway:${AWS::Region}::/restapis/${FileUploader}/stages/prod
      WebACLArn: !GetAtt IngestAPIWebACL.Arn

  WebACLAssociationAPI2:
    Type: AWS::WAFv2::WebACLAssociation
    Properties:
      ResourceArn: !Sub arn:${AWS::Partition}:apigateway:${AWS::Region}::/restapis/${FileUploader2}/stages/prod
      WebACLArn: !GetAtt IngestAPIWebACL.Arn

  # WAF Logging
  WAFLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: aws-waf-logs-IngestAPIWebACL2
      RetentionInDays: 90

  WAFLoggingConfiguration:
    Type: AWS::WAFv2::LoggingConfiguration
    Properties:
      LogDestinationConfigs:
        - !GetAtt WAFLogGroup.Arn
      ResourceArn: !GetAtt IngestAPIWebACL.Arn
  
  # Cloudwatch Metric Filter
  MetricFilter:
    Type: AWS::Logs::MetricFilter
    Properties: 
      FilterName: WAF Rule Action
      FilterPattern: '{ $.action = "*" }'
      LogGroupName: !Ref WAFLogGroup
      MetricTransformations: 
        - Dimensions: 
            - Key: Action
              Value: $.action
          MetricName: RuleAction
          MetricNamespace: Custom/WAF
          MetricValue: 1
          Unit: Count

  InsightsRuleClientIpAllowed:
    Type: AWS::CloudWatch::InsightRule
    Properties: 
      RuleName:  !Sub ${WAFLogGroup}-ClientIpAllowed
      RuleState: ENABLED
      RuleBody: !Sub >
        {
          "AggregateOn": "Count",
          "Contribution": {
            "Filters": [
              {
                "Match": "$.action",
                "In": [
                  "ALLOW"
                ]
              }
            ],
            "Keys": [
              "$.httpRequest.clientIp"
            ]
          },
          "LogFormat": "JSON",
          "LogGroupNames": [
            "${WAFLogGroup}"
          ],
          "Schema": {
            "Name": "CloudWatchLogRule",
            "Version": 1
          }
        }
  InsightsRuleClientIpBlocked:
    Type: AWS::CloudWatch::InsightRule
    Properties: 
      RuleName:  !Sub ${WAFLogGroup}-ClientIpBlocked
      RuleState: ENABLED
      RuleBody: !Sub >
        {
          "AggregateOn": "Count",
          "Contribution": {
            "Filters": [
              {
                "Match": "$.action",
                "In": [
                  "BLOCK"
                ]
              }
            ],
            "Keys": [
              "$.httpRequest.clientIp"
            ]
          },
          "LogFormat": "JSON",
          "LogGroupNames": [
            "${WAFLogGroup}"
          ],
          "Schema": {
            "Name": "CloudWatchLogRule",
            "Version": 1
          }
        }
  InsightsRuleCountryAllowed:
    Type: AWS::CloudWatch::InsightRule
    Properties: 
      RuleName:  !Sub ${WAFLogGroup}-CountryAllowed
      RuleState: ENABLED
      RuleBody: !Sub >
        {
          "AggregateOn": "Count",
          "Contribution": {
            "Filters": [
              {
                "Match": "$.action",
                "In": [
                  "ALLOW"
                ]
              }
            ],
            "Keys": [
              "$.httpRequest.country"
            ]
          },
          "LogFormat": "JSON",
          "LogGroupNames": [
            "${WAFLogGroup}"
          ],
          "Schema": {
            "Name": "CloudWatchLogRule",
            "Version": 1
          }
        }
  InsightsRuleCountryBlocked:
    Type: AWS::CloudWatch::InsightRule
    Properties: 
      RuleName:  !Sub ${WAFLogGroup}-CountryBlocked
      RuleState: ENABLED
      RuleBody: !Sub >
        {
          "AggregateOn": "Count",
          "Contribution": {
            "Filters": [
              {
                "Match": "$.action",
                "In": [
                  "BLOCK"
                ]
              }
            ],
            "Keys": [
              "$.httpRequest.country"
            ]
          },
          "LogFormat": "JSON",
          "LogGroupNames": [
            "${WAFLogGroup}"
          ],
          "Schema": {
            "Name": "CloudWatchLogRule",
            "Version": 1
          }
        }
  InsightsRuleUriAllowed:
    Type: AWS::CloudWatch::InsightRule
    Properties: 
      RuleName:  !Sub ${WAFLogGroup}-UriAllowed
      RuleState: ENABLED
      RuleBody: !Sub >
        {
          "AggregateOn": "Count",
          "Contribution": {
            "Filters": [
              {
                "Match": "$.action",
                "In": [
                  "ALLOW"
                ]
              }
            ],
            "Keys": [
              "$.httpRequest.uri"
            ]
          },
          "LogFormat": "JSON",
          "LogGroupNames": [
            "${WAFLogGroup}"
          ],
          "Schema": {
            "Name": "CloudWatchLogRule",
            "Version": 1
          }
        }
  InsightsRuleUriBlocked:
    Type: AWS::CloudWatch::InsightRule
    Properties: 
      RuleName:  !Sub ${WAFLogGroup}-UriBlocked
      RuleState: ENABLED
      RuleBody: !Sub >
        {
          "AggregateOn": "Count",
          "Contribution": {
            "Filters": [
              {
                "Match": "$.action",
                "In": [
                  "BLOCK"
                ]
              }
            ],
            "Keys": [
              "$.httpRequest.uri"
            ]
          },
          "LogFormat": "JSON",
          "LogGroupNames": [
            "${WAFLogGroup}"
          ],
          "Schema": {
            "Name": "CloudWatchLogRule",
            "Version": 1
          }
        }
  InsightsRuleTerminatingRuleAllowed:
    Type: AWS::CloudWatch::InsightRule
    Properties: 
      RuleName:  !Sub ${WAFLogGroup}-TerminatingRuleAllowed
      RuleState: ENABLED
      RuleBody: !Sub >
        {
          "AggregateOn": "Count",
          "Contribution": {
            "Filters": [
              {
                "Match": "$.action",
                "In": [
                  "ALLOW"
                ]
              }
            ],
            "Keys": [
              "$.terminatingRuleId"
            ]
          },
          "LogFormat": "JSON",
          "LogGroupNames": [
            "${WAFLogGroup}"
          ],
          "Schema": {
            "Name": "CloudWatchLogRule",
            "Version": 1
          }
        }
  InsightsRuleTerminatingRuleBlocked:
    Type: AWS::CloudWatch::InsightRule
    Properties: 
      RuleName:  !Sub ${WAFLogGroup}-TerminatingRuleBlocked
      RuleState: ENABLED
      RuleBody: !Sub >
        {
          "AggregateOn": "Count",
          "Contribution": {
            "Filters": [
              {
                "Match": "$.action",
                "In": [
                  "BLOCK"
                ]
              }
            ],
            "Keys": [
              "$.terminatingRuleId"
            ]
          },
          "LogFormat": "JSON",
          "LogGroupNames": [
            "${WAFLogGroup}"
          ],
          "Schema": {
            "Name": "CloudWatchLogRule",
            "Version": 1
          }
        }
  AlarmBlockRatio:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub ${WAFLogGroup}-block-ratio-anomaly
      AlarmDescription: Abnormal percentage of total requests blocked over 5 minute period.
      ActionsEnabled: true
      EvaluationPeriods: 1
      DatapointsToAlarm: 1
      ComparisonOperator: GreaterThanUpperThreshold
      TreatMissingData: notBreaching
      Metrics:
          - Id: e1
            Label: Block Percentage
            ReturnData: true
            Expression: m2 / (m2 + m1) * 100
          - Id: m2
            ReturnData: false
            MetricStat:
                Metric:
                    Namespace: Custom/WAF
                    MetricName: RuleAction
                    Dimensions:
                        - Name: Action
                          Value: BLOCK
                Period: 300
                Stat: Sum
          - Id: m1
            ReturnData: false
            MetricStat:
                Metric:
                    Namespace: Custom/WAF
                    MetricName: RuleAction
                    Dimensions:
                        - Name: Action
                          Value: ALLOW
                Period: 300
                Stat: Sum
          - Id: ad1
            Label: Block Ratio (expected)
            ReturnData: true
            Expression: ANOMALY_DETECTION_BAND(e1, 2)
      ThresholdMetricId: ad1
  AlarmClientIpAllowed:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub ${WAFLogGroup}-top-clientip-allowed-anomaly
      AlarmDescription: Abnormal number of requests for the top allowed client IP over 5 minutes.
      ActionsEnabled: true
      EvaluationPeriods: 1
      DatapointsToAlarm: 1
      ComparisonOperator: LessThanLowerOrGreaterThanUpperThreshold
      TreatMissingData: notBreaching
      Metrics:
          - Id: e0
            Label: !Sub ${InsightsRuleClientIpAllowed.RuleName} MaxContributorValue
            ReturnData: true
            Expression: !Sub INSIGHT_RULE_METRIC('${InsightsRuleClientIpAllowed.RuleName}','MaxContributorValue')
            Period: 300
          - Id: ad1
            Label: !Sub ${InsightsRuleClientIpAllowed.RuleName} MaxContributorValue (expected)
            ReturnData: true
            Expression: ANOMALY_DETECTION_BAND(e0, 2)
      ThresholdMetricId: ad1
  AlarmClientIpBlocked:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub ${WAFLogGroup}-top-clientip-blocked-anomaly
      AlarmDescription: Abnormal number of requests for the top blocked client IP over 5 minutes.
      ActionsEnabled: true
      EvaluationPeriods: 1
      DatapointsToAlarm: 1
      ComparisonOperator: LessThanLowerOrGreaterThanUpperThreshold
      TreatMissingData: notBreaching
      Metrics:
          - Id: e0
            Label: !Sub ${InsightsRuleClientIpBlocked.RuleName} MaxContributorValue
            ReturnData: true
            Expression: !Sub INSIGHT_RULE_METRIC('${InsightsRuleClientIpBlocked.RuleName}','MaxContributorValue')
            Period: 300
          - Id: ad1
            Label: !Sub ${InsightsRuleClientIpBlocked.RuleName} MaxContributorValue (expected)
            ReturnData: true
            Expression: ANOMALY_DETECTION_BAND(e0, 2)
      ThresholdMetricId: ad1
  Dashboard:
    Type: AWS::CloudWatch::Dashboard
    Properties:
      DashboardName: !Ref WAFLogGroup
      DashboardBody: !Sub >
        {
          "start": "-PT1H",
          "widgets": [
            {
              "height": 3,
              "width": 3,
              "y": 0,
              "x": 0,
              "type": "metric",
              "properties": {
                "metrics": [
                  [
                    "Custom/WAF",
                    "RuleAction",
                    "Action",
                    "BLOCK",
                    { "label": "Requests Blocked", "color": "#ff7f0e" }
                  ]
                ],
                "view": "singleValue",
                "stacked": true,
                "region": "${AWS::Region}",
                "period": 60,
                "stat": "Sum",
                "yAxis": {
                  "left": {
                    "showUnits": false,
                    "label": "Requests",
                    "min": 0
                  },
                  "right": {
                    "showUnits": false
                  }
                },
                "liveData": false,
                "setPeriodToTimeRange": true,
                "title": " ",
                "singleValueFullPrecision": false
              }
            },
            {
              "height": 3,
              "width": 3,
              "y": 3,
              "x": 0,
              "type": "metric",
              "properties": {
                "metrics": [
                  [
                    "Custom/WAF",
                    "RuleAction",
                    "Action",
                    "ALLOW",
                    { "label": "Requests Allowed" }
                  ]
                ],
                "view": "singleValue",
                "stacked": true,
                "region": "${AWS::Region}",
                "period": 60,
                "stat": "Sum",
                "yAxis": {
                  "left": {
                    "showUnits": false,
                    "label": "Requests",
                    "min": 0
                  },
                  "right": {
                    "showUnits": false
                  }
                },
                "setPeriodToTimeRange": true,
                "title": " ",
                "singleValueFullPrecision": false
              }
            },
            {
              "height": 6,
              "width": 15,
              "y": 0,
              "x": 3,
              "type": "metric",
              "properties": {
                "metrics": [
                  [
                    {
                      "expression": "FILL(METRICS(), 0)",
                      "label": "",
                      "id": "fill",
                      "region": "${AWS::Region}",
                      "color": "#1f77b4"
                    }
                  ],
                  [
                    "Custom/WAF",
                    "RuleAction",
                    "Action",
                    "ALLOW",
                    {
                      "id": "allowed",
                      "color": "#1f77b4",
                      "visible": false,
                      "label": "Requests Allowed"
                    }
                  ],
                  [
                    "Custom/WAF",
                    "RuleAction",
                    "Action",
                    "BLOCK",
                    {
                      "id": "blocked",
                      "visible": false,
                      "label": "Requests Blocked",
                      "color": "#ff7f0e"
                    }
                  ]
                ],
                "view": "timeSeries",
                "stacked": true,
                "region": "${AWS::Region}",
                "period": 60,
                "stat": "Sum",
                "yAxis": {
                  "left": {
                    "showUnits": false,
                    "label": "",
                    "min": 0
                  },
                  "right": {
                    "showUnits": false
                  }
                },
                "setPeriodToTimeRange": true,
                "title": "",
                "legend": {
                  "position": "right"
                }
              }
            },
            {
              "height": 6,
              "width": 6,
              "y": 0,
              "x": 18,
              "type": "metric",
              "properties": {
                "metrics": [
                  [
                    {
                      "expression": "blocked / (allowed + blocked) * 100",
                      "label": "Block %",
                      "id": "blkratio",
                      "color": "#ff7f0e",
                      "region": "${AWS::Region}"
                    }
                  ],
                  [
                    "Custom/WAF",
                    "RuleAction",
                    "Action",
                    "BLOCK",
                    {
                      "id": "blocked",
                      "label": "Blocked",
                      "color": "#ff7f0e",
                      "visible": false
                    }
                  ],
                  [
                    "Custom/WAF",
                    "RuleAction",
                    "Action",
                    "ALLOW",
                    {
                      "id": "allowed",
                      "color": "#1f77b4",
                      "visible": false,
                      "label": "Allowed"
                    }
                  ]
                ],
                "region": "${AWS::Region}",
                "view": "gauge",
                "period": 60,
                "stat": "Sum",
                "yAxis": {
                  "left": {
                    "showUnits": false,
                    "min": 0,
                    "max": 100
                  },
                  "right": {
                    "showUnits": false
                  }
                },
                "setPeriodToTimeRange": true,
                "legend": {
                  "position": "bottom"
                },
                "singleValueFullPrecision": true
              }
            },
            {
              "height": 6,
              "width": 12,
              "y": 6,
              "x": 0,
              "type": "metric",
              "properties": {
                "period": 60,
                "region": "${AWS::Region}",
                "stacked": true,
                "timezone": "local",
                "title": "Top Allowed by Terminating Rule",
                "view": "timeSeries",
                "insightRule": {
                  "maxContributorCount": 10,
                  "orderBy": "Sum",
                  "ruleName": "${InsightsRuleTerminatingRuleAllowed.RuleName}"
                },
                "legend": {
                  "position": "right"
                },
                "yAxis": {
                  "left": {
                    "showUnits": true,
                    "min": 0
                  }
                }
              }
            },
            {
              "height": 6,
              "width": 12,
              "y": 6,
              "x": 12,
              "type": "metric",
              "properties": {
                "period": 60,
                "region": "${AWS::Region}",
                "stacked": true,
                "timezone": "local",
                "title": "Top Blocked by Terminating Rule",
                "view": "timeSeries",
                "insightRule": {
                  "maxContributorCount": 10,
                  "orderBy": "Sum",
                  "ruleName": "${InsightsRuleTerminatingRuleBlocked.RuleName}"
                },
                "legend": {
                  "position": "right"
                },
                "yAxis": {
                  "left": {
                    "showUnits": true,
                    "min": 0
                  }
                }
              }
            },
            {
              "height": 6,
              "width": 12,
              "y": 12,
              "x": 0,
              "type": "metric",
              "properties": {
                "period": 60,
                "region": "${AWS::Region}",
                "stacked": true,
                "timezone": "local",
                "title": "Top Allowed by IP",
                "view": "timeSeries",
                "insightRule": {
                  "maxContributorCount": 10,
                  "orderBy": "Sum",
                  "ruleName": "${InsightsRuleClientIpAllowed.RuleName}"
                },
                "legend": {
                  "position": "right"
                },
                "yAxis": {
                  "left": {
                    "showUnits": true,
                    "min": 0
                  }
                }
              }
            },
            {
              "height": 6,
              "width": 12,
              "y": 12,
              "x": 12,
              "type": "metric",
              "properties": {
                "yAxis": {
                  "left": {
                    "showUnits": false,
                    "label": "",
                    "min": 0
                  },
                  "right": {
                    "showUnits": false
                  }
                },
                "period": 60,
                "region": "${AWS::Region}",
                "stacked": true,
                "timezone": "local",
                "title": "Top Blocked by IP",
                "view": "timeSeries",
                "insightRule": {
                  "maxContributorCount": 10,
                  "orderBy": "Sum",
                  "ruleName": "${InsightsRuleClientIpBlocked.RuleName}"
                },
                "legend": {
                  "position": "right"
                }
              }
            },
            {
              "height": 6,
              "width": 12,
              "y": 18,
              "x": 0,
              "type": "metric",
              "properties": {
                "period": 60,
                "region": "${AWS::Region}",
                "stacked": true,
                "timezone": "local",
                "title": "Top Allowed by Country",
                "view": "timeSeries",
                "insightRule": {
                  "maxContributorCount": 10,
                  "orderBy": "Sum",
                  "ruleName": "${InsightsRuleCountryAllowed.RuleName}"
                },
                "legend": {
                  "position": "bottom"
                },
                "yAxis": {
                  "left": {
                    "showUnits": true,
                    "min": 0
                  }
                }
              }
            },
            {
              "height": 6,
              "width": 12,
              "y": 18,
              "x": 12,
              "type": "metric",
              "properties": {
                "period": 60,
                "region": "${AWS::Region}",
                "stacked": true,
                "timezone": "local",
                "title": "Top Blocked by Country",
                "view": "timeSeries",
                "insightRule": {
                  "maxContributorCount": 10,
                  "orderBy": "Sum",
                  "ruleName": "${InsightsRuleCountryBlocked.RuleName}"
                },
                "legend": {
                  "position": "bottom"
                },
                "yAxis": {
                  "left": {
                    "showUnits": true,
                    "min": 0
                  }
                }
              }
            },
            {
              "height": 6,
              "width": 12,
              "y": 24,
              "x": 0,
              "type": "metric",
              "properties": {
                "period": 60,
                "region": "${AWS::Region}",
                "stacked": true,
                "timezone": "local",
                "title": "Top Allowed by Request URI",
                "view": "timeSeries",
                "insightRule": {
                  "maxContributorCount": 10,
                  "orderBy": "Sum",
                  "ruleName": "${InsightsRuleUriAllowed.RuleName}"
                },
                "legend": {
                  "position": "right"
                },
                "yAxis": {
                  "left": {
                    "showUnits": true,
                    "min": 0
                  }
                }
              }
            },
            {
              "height": 6,
              "width": 12,
              "y": 24,
              "x": 12,
              "type": "metric",
              "properties": {
                "period": 60,
                "region": "${AWS::Region}",
                "stacked": true,
                "timezone": "local",
                "title": "Top Blocked by URI Path",
                "view": "timeSeries",
                "insightRule": {
                  "maxContributorCount": 10,
                  "orderBy": "Sum",
                  "ruleName": "${InsightsRuleUriBlocked.RuleName}"
                },
                "legend": {
                  "position": "right"
                },
                "yAxis": {
                  "left": {
                    "showUnits": true,
                    "min": 0
                  }
                }
              }
            }
          ]
        }

Outputs:
  AvScanQueueUrlExport:
    Description: Queue URL of the SQS AV Scan Queue
    Value: !Ref AvScanQueue
    Export:
      Name: !Sub aftac-pipeline-av-scan-queue-${ResourceSuffix}

  AvScanQueueNameExport:
    Description: Name of the SQS AV Scan Queue
    Value: !GetAtt AvScanQueue.QueueName
    Export:
      Name: !Sub aftac-pipeline-av-scan-queue-name-${ResourceSuffix}

  IngestBucket1Export:
    Value: !Ref IngestBucket1
    Description: Name of Ingest Bucket 1
    Export:
      Name: !Sub aftac-pipeline-IngestBucket1-${ResourceSuffix}

  IngestBucket2Export:
    Value: !Ref IngestBucket2
    Description: Name of Ingest Bucket 2
    Export:
      Name: !Sub aftac-pipeline-IngestBucket2-${ResourceSuffix}

  PresignGenerator1InvokeURL:
    Value: !Sub https://${FileUploader}.execute-api.${AWS::Region}.amazonaws.com/prod/upload
    Description: URL of the Presign Generator API Endpoint
