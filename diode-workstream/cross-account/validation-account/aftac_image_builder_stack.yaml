AWSTemplateFormatVersion: 2010-09-09

Description: Creates an EC2 Image Builder image pipeline

Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: General
        Parameters:
          - IamPrefix
          - PermissionsBoundaryPolicyArn
          - ResourceSuffix
          - AvScanMode
          - ProxyServerAddress
          - EmailEndPoint

      - Label:
          default: Image Builder
        Parameters:
          - SemVer
          - ParentImage
          - LaunchTemplateId
          - VpcId
          - SubnetId
          - OutboundCidrIp

    ParameterLabels:
      IamPrefix:
        default: IAM Resource Prefix
      PermissionsBoundaryPolicyArn:
        default: Permissions Boundary Policy ARN
      ResourceSuffix:
        default: Resource Suffix
      AvScanMode:
        default: Anti-Virus Scan Mode
      ProxyServerAddress:
        default: Proxy Server Address
      EmailEndPoint:
        default: Email Notification
      SemVer:
        default: Semantic Version
      ParentImage:
        default: Parent Image
      LaunchTemplateId:
        default: Launch Template ID
      VpcId:
        default: VPC ID
      SubnetId:
        default: Subnet ID
      OutboundCidrIp:
        default: Outbound CIDR

Parameters:
  IamPrefix:
    Type: String
    Description: Required prefix for IAM resources
    Default: AFC2S
    AllowedValues: [AFC2S]
    ConstraintDescription: Must be "AFC2S"

  PermissionsBoundaryPolicyArn:
    Type: String
    Description: ARN of the policy that is used to set the permissions boundary for IAM resources
    AllowedPattern: ^arn:(aws|aws-us-gov):iam::(\d{12}|aws):policy/.*
    ConstraintDescription: Must be a valid IAM policy ARN

  ResourceSuffix:
    Type: String
    Description: >-
      Suffix added to the named AWS resources. It must start with a lowercase letter and contain
      only lowercase letters, numbers, and hyphens; its length cannot exceed 20.
    AllowedPattern: ^[a-z][a-z0-9-]{0,19}$
    ConstraintDescription: Must start with a lowercase letter and contain only lowercase letters, numbers, and hyphens; its length cannot exceed 20.

  AvScanMode:
    Type: String
    Description: Select "Test" to simulate anti-virus scanning; otherwise, select "Live"
    Default: Live
    AllowedValues: [Test, Live]
    ConstraintDescription: Must be either "Test" or "Live"

  ProxyServerAddress:
    Type: String
    Description: The address of the proxy server for outbound internet access. It can be an http or IP address. The port is fixed at 3128
    AllowedPattern: ^(?!.*(:[0-9]{1,5}))(https?://([a-zA-Z0-9-_.]+)|((([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])))$
    ConstraintDescription: Must be a valid http or IP address, without the port number

  EmailEndPoint:
    Type: String
    Description: "[EXPERIMENTAL] The email address at which to receive notifications for ImageBuilder events"
    AllowedPattern: ^$|^\S+@\S+\.+\S+$
    ConstraintDescription: Must be left blank or a valid email address

  SemVer:
    Type: String
    Description: >
      Semantic version of the Diode Image Recipe and other associated resources. Increment this when updating the parent image below or any associated resources in the template itself.
      The format is <major>.<minor>.<patch> where each component is an integer (e.g. 1.0.0).
    Default: "1.0.0"

  ParentImage:
    Type: String
    Description: The parent (or base) image for the image recipe, in either an Image ARN or an AMI ID format.
    AllowedPattern: ^(arn:(aws|aws-us-gov):ec2:\S{1,30}::image\/)?ami-([a-f0-9]{8}|[a-f0-9]{17})$
    ConstraintDescription: Must be a valid Image ARN or AMI ID

  # This could be imported in later
  LaunchTemplateId:
    Type: String
    Description: The ID of the launch template to be used to launch EC2 instances.
    AllowedPattern: ^lt-([a-f0-9]{8}|[a-f0-9]{17})$
    ConstraintDescription: Must be a valid launch template ID

  VpcId:
    Type: AWS::EC2::VPC::Id
    Description: VPC ID
    AllowedPattern: \S+
    ConstraintDescription: Must select a VPC

  SubnetId:
    Type: AWS::EC2::Subnet::Id
    Description: The ID of the subnet in which EC2 instances launched by the image pipeline will run.
    AllowedPattern: \S+
    ConstraintDescription: Must select a subnet

  OutboundCidrIp:
    Type: String
    Description: Outbound CIDR block for ImageBuilder instances
    Default: 0.0.0.0/0
    AllowedPattern: ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(/([0-9]|[1-2][0-9]|3[0-2]))$
    ConstraintDescription: Must be a valid CIDR block

Conditions:
  IsEmailAddressProvided: !Not [!Equals [!Ref EmailEndPoint, ""]]

Resources:
  BuildComponentPrepareImage:
    Type: AWS::ImageBuilder::Component
    Properties:
      Name: !Sub prepare-image-${ResourceSuffix}
      Description: Prepares the image for data transfer pipeline
      Version: !Ref SemVer
      Platform: Linux
      SupportedOsVersions:
        - Red Hat Enterprise Linux 8
        - Red Hat Enterprise Linux 9
      KmsKeyId: !GetAtt ImageBuilderKmsKey.Arn
      ## If there is only one phase, and its name is "test", then the type is TEST. For all other components, the type is BUILD.
      Data: !Sub |
        name: Prepare image for data transfer pipeline
        description: Prepares image for data transfer pipeline
        schemaVersion: 1.0
        phases:
          - name: build
            steps:
              - name: PrepImage
                action: ExecuteBash
                inputs:
                  commands:
                    # Set environment variables for proxy servers
                    - export http_proxy=${ProxyServerAddress}:3128
                    - export https_proxy=${ProxyServerAddress}:3128
                    - export no_proxy='169.254.169.254,vi2e.io,s3.${AWS::Region}.amazonaws.com'

                    # Install python3.11, pip, and other libraries
                    - yum install -y python3.11 python3.11-pip curl unzip
                    - python3.11 -m pip install pip --upgrade
                    - python3.11 -m pip install boto3 puremagic pyjwt

                    # Update all packages
                    - yum update -y

                    # Install awscli
                    - ARCH=$(uname -m)
                    - curl "https://awscli.amazonaws.com/awscli-exe-linux-$ARCH.zip" -o /tmp/awscliv2.zip
                    - echo Unzipping awscliv2.zip
                    - unzip -q -o /tmp/awscliv2.zip
                    - BINARY=/usr/local/aws-cli/v2/current/bin/aws
                    - |
                      # If the binary exists, update it
                      if [ -x $BINARY ]; then
                          echo Updating awscli v2
                          ./aws/install --update
                      else
                          echo Installing awscli v2
                          ./aws/install
                      fi

                    # Install CloudWatch Agent
                    - ARCH=$(arch)
                    - |
                      if [ "$ARCH" = "arm64" ]; then
                          curl https://amazoncloudwatch-agent-${AWS::Region}.s3.${AWS::Region}.amazonaws.com/redhat/arm64/latest/amazon-cloudwatch-agent.rpm -o /tmp/amazon-cloudwatch-agent.rpm
                      else # x86_64
                          curl https://amazoncloudwatch-agent-${AWS::Region}.s3.${AWS::Region}.amazonaws.com/redhat/amd64/latest/amazon-cloudwatch-agent.rpm -o /tmp/amazon-cloudwatch-agent.rpm
                      fi
                    - rpm -U /tmp/amazon-cloudwatch-agent.rpm

                    # Download all files from S3 bucket
                    - aws s3 cp s3://${EC2RequiredFilesBucket}/ec2-files/ /usr/bin/validation-pipeline/ --recursive

                    # Enable CloudWatch Agent
                    - mv /usr/bin/validation-pipeline/amazon-cloudwatch-agent.json /opt/aws/amazon-cloudwatch-agent/etc/amazon-cloudwatch-agent.json
                    - systemctl enable amazon-cloudwatch-agent
                    - systemctl start amazon-cloudwatch-agent

                    # Enable SQS Poller Service
                    # Replaces the placeholder ("") with actual environment variables
                    - sed -i 's/""/av_scan_mode=${AvScanMode} resource_suffix=${ResourceSuffix}/g' /usr/bin/validation-pipeline/sqs_poller.service
                    - mv /usr/bin/validation-pipeline/sqs_poller.service /etc/systemd/system/sqs_poller.service
                    - systemctl enable sqs_poller.service
                    - systemctl start sqs_poller.service

  # ImageBuilderTestComponent:
  #   Type: AWS::ImageBuilder::Component
  #   Properties:
  #     Name: !Sub test-component-${ResourceSuffix}
  #     Description: Dummy description
  #     #############################################
  #     # Update Version and ChangeDescription when any changes are made to this resource #
  #     Version: "1.0.0"
  #     ChangeDescription: Initial version
  #     #############################################
  #     Platform: Linux
  #     SupportedOsVersions:
  #       - Red Hat Enterprise Linux 8
  #       - Red Hat Enterprise Linux 9
  #     # KmsKeyId: String
  #     # If there is only one phase, and its name is "test", then the type is TEST. For all other components, the type is BUILD.
  #     Data: |
  #       name: test-image
  #       description: This is hello world testing doc
  #       schemaVersion: 1.0
  #       phases:
  #         - name: test
  #           steps:
  #             - name: HelloWorldStep
  #               action: ExecuteBash
  #               inputs:
  #                 commands:
  #                   - echo "Hello World! Test."

  ImageRecipe:
    Type: AWS::ImageBuilder::ImageRecipe
    Properties:
      Name: !Sub image-recipe-${ResourceSuffix}
      Version: !Ref SemVer
      # Description: Testing ec2 scanner recipe
      ParentImage: !Ref ParentImage
      # WorkingDirectory: String # The default path is `/tmp`
      AdditionalInstanceConfiguration:
        SystemsManagerAgent:
          UninstallAfterBuild: false # Set this to `true` to remove SSM Agent after the final image
        # If overriding the user data, add commands to install SSM, unless it is pre-installed on the base image.
        UserDataOverride:
          Fn::Base64: !Sub |
            #!/bin/bash
            export http_proxy=${ProxyServerAddress}:3128
            export https_proxy=${ProxyServerAddress}:3128
            export no_proxy='169.254.169.254,vi2e.io,s3.${AWS::Region}.amazonaws.com'

            # Install SSM Agent
            ARCH=$(arch)
            if [ "$ARCH" = "arm64" ]; then
                yum install -y https://s3.${AWS::Region}.amazonaws.com/amazon-ssm-${AWS::Region}/latest/linux_arm64/amazon-ssm-agent.rpm
            else # x86_64
                yum install -y https://s3.${AWS::Region}.amazonaws.com/amazon-ssm-${AWS::Region}/latest/linux_amd64/amazon-ssm-agent.rpm
            fi

            ## Uncomment the below lines if an instance requires internet access
            # cat << EOF > /etc/profile.d/proxy.sh
            # #!/bin/bash
            # export http_proxy=${ProxyServerAddress}:3128
            # export https_proxy=${ProxyServerAddress}:3128
            # export no_proxy='169.254.169.254,vi2e.io,s3.${AWS::Region}.amazonaws.com'
            # EOF
            # chmod 755 /etc/profile.d/proxy.sh
            # /etc/profile.d/proxy.sh

            ## Uncomment the below lines for troubleshooting, if necessary
            # cat << EOF > /etc/profile.d/set_env.sh
            # #!/bin/bash
            # export av_scan_mode=${AvScanMode}
            # export resource_suffix=${ResourceSuffix}
            # EOF
            # chmod 755 /etc/profile.d/set_env.sh
            # /etc/profile.d/set_env.sh
      Components:
        - ComponentArn: !Ref BuildComponentPrepareImage
      # BlockDeviceMappings:
      #   - DeviceName: String
      #     Ebs:
      #       DeleteOnTermination: true
      #       Encrypted: true
      #       KmsKeyId: alias/aws/ebs # The default AWS managed key
      #       Iops: 100 # The range is 100-64000
      #       SnapshotId: String
      #       VolumeType: gp3 # standard | io1 | io2 | gp2 | gp3 | sc1 | st1
      #       Throughput: 125 # For gp3 volumes only; the range is 125–1000 MiB/s
      #       VolumeSize: 30 # The range is 1-16000
      #     NoDevice: "" # Enter an empty string to remove a mapping from the parent image.
      #     VirtualName: String # Manages the instance ephemeral devices.

  ImageBuilderImagePipeline:
    Type: AWS::ImageBuilder::ImagePipeline
    Properties:
      Name: !Sub image-pipeline-${ResourceSuffix}
      Status: ENABLED
      EnhancedImageMetadataEnabled: true # default value is true
      ImageRecipeArn: !Ref ImageRecipe
      DistributionConfigurationArn: !Ref ImageBuilderDistroConfig
      ImageScanningConfiguration:
        ImageScanningEnabled: false # Enable it if Amazon Inspector is activated
      ImageTestsConfiguration:
        ImageTestsEnabled: true
      InfrastructureConfigurationArn: !Ref InfraConfig
      # Schedule:
      #   PipelineExecutionStartCondition: EXPRESSION_MATCH_AND_DEPENDENCY_UPDATES_AVAILABLE
      #   ScheduleExpression: cron(0 0 * * ? *) # every day at 12:00 AM UTC
      # This Role is for the workflow
      # ExecutionRole: !Sub arn:${AWS::Partition}:iam::${AWS::AccountId}:role/aws-service-role/imagebuilder.amazonaws.com/AWSServiceRoleForImageBuilder
      # Workflows:
      #   - WorkflowArn: !GetAtt BuildWorkflow.Arn

  ImageBuilderDistroConfig:
    Type: AWS::ImageBuilder::DistributionConfiguration
    Properties:
      Name: !Sub distro-config-${ResourceSuffix}
      Distributions:
        - LaunchTemplateConfigurations:
            - AccountId: !Ref AWS::AccountId
              LaunchTemplateId: !Ref LaunchTemplateId # Identifies the Amazon EC2 launch template to use.
              SetDefaultVersion: true # Set the specified Amazon EC2 launch template as the default launch template for the specified account.
          # AmiDistributionConfiguration:
          #   Name: String
          #   Description: String
          #   KmsKeyId: String
          #   # LaunchPermissionConfiguration: LaunchPermissionConfiguration
          #   TargetAccountIds:
          #     - String
          Region: !Ref AWS::Region

  EC2RequiredFilesBucket:
    Type: AWS::S3::Bucket
    DeletionPolicy: Delete
    UpdateReplacePolicy: Delete
    Properties:
      OwnershipControls:
        Rules:
          - ObjectOwnership: BucketOwnerEnforced
      # LoggingConfiguration:
      #   DestinationBucketName: BucketName
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              KMSMasterKeyID: !GetAtt ImageBuilderKmsKey.Arn
              SSEAlgorithm: aws:kms # Uses aws/s3
            BucketKeyEnabled: true
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        IgnorePublicAcls: true
        BlockPublicPolicy: true
        RestrictPublicBuckets: true
      VersioningConfiguration:
        Status: Enabled
      ObjectLockEnabled: true

  EC2RequiredFilesBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref EC2RequiredFilesBucket
      PolicyDocument:
        Statement:
          - Effect: Deny
            Principal: "*"
            Action: s3:*
            Resource:
              - !Sub ${EC2RequiredFilesBucket.Arn}/*
              - !Sub ${EC2RequiredFilesBucket.Arn}
            Condition:
              Bool:
                aws:SecureTransport: false
          - Sid: AllowTls12Only
            Effect: Deny
            Principal: "*"
            Action: s3:*
            Resource:
              - !Sub ${EC2RequiredFilesBucket.Arn}
              - !Sub ${EC2RequiredFilesBucket.Arn}/*
            Condition:
              NumericLessThan:
                s3:TlsVersion: 1.2

  InfraConfig:
    Type: AWS::ImageBuilder::InfrastructureConfiguration
    Properties:
      Name: !Sub infra-config-${ResourceSuffix}
      InstanceMetadataOptions:
        HttpTokens: required
        HttpPutResponseHopLimit: 1
      InstanceProfileName: !Ref ImageBuilderInfraInstanceProfile
      SubnetId: !Ref SubnetId
      SecurityGroupIds:
        - !Ref ImageBuilderInfraSecurityGroup
      TerminateInstanceOnFailure: true # For troubleshooting, set it to false
      InstanceTypes: [t3.small]
      SnsTopicArn: !If
        - IsEmailAddressProvided
        - !Ref ImageBuilderNotificationTopic
        - !Ref AWS::NoValue
      # KeyPair: String
      # Logging:
      #   S3Logs:
      #     S3BucketName: String
      #     S3KeyPrefix: String
      # Placement: Placement
      # ResourceTags:
      #   Key: Value

  ImageBuilderInfraSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security Group for ImageBuilder infra
      SecurityGroupEgress:
        - CidrIp: !Ref OutboundCidrIp
          IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          Description: Allow outbound traffic on 443
        - CidrIp: !Ref OutboundCidrIp
          IpProtocol: tcp
          FromPort: 3128
          ToPort: 3128
          Description: Allow outbound traffic on 3128
      VpcId: !Ref VpcId

  ImageBuilderInfraInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      InstanceProfileName: !Sub ${IamPrefix}-image-builder-infra-instance-profile-${ResourceSuffix}
      Roles: [!Ref ImageBuilderInfraInstanceRole]

  ImageBuilderInfraInstanceRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${IamPrefix}-image-builder-infra-instance-role-${ResourceSuffix}
      PermissionsBoundary: !Ref PermissionsBoundaryPolicyArn
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action: sts:AssumeRole
            Condition:
              StringEquals:
                aws:SourceAccount: !Ref AWS::AccountId
      ManagedPolicyArns:
        - !Sub arn:${AWS::Partition}:iam::aws:policy/AmazonSSMManagedInstanceCore
        # TODO: Scope it down if possible
        - !Sub arn:${AWS::Partition}:iam::aws:policy/EC2InstanceProfileForImageBuilder
      Policies:
        - PolicyName: S3_Policy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Sid: AllowGetObject
                Effect: Allow
                Action: s3:GetObject
                Resource: !Sub ${EC2RequiredFilesBucket.Arn}/*
              - Sid: AllowListBucket
                Effect: Allow
                Action: s3:ListBucket
                Resource: !Sub ${EC2RequiredFilesBucket.Arn}
        - PolicyName: KMS_Policy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Sid: AllowKMS
                Effect: Allow
                Action: kms:Decrypt
                Resource: !GetAtt ImageBuilderKmsKey.Arn

  ImageBuilderNotificationTopic:
    Type: AWS::SNS::Topic
    Condition: IsEmailAddressProvided
    Properties:
      DisplayName: ImageBuilder Event Notification
      KmsMasterKeyId: alias/aws/sns

  ImageBuilderNotificationTopicSubscription:
    Type: AWS::SNS::Subscription
    Condition: IsEmailAddressProvided
    Properties:
      TopicArn: !Ref ImageBuilderNotificationTopic
      Protocol: email
      Endpoint: !Ref EmailEndPoint

  ImageBuilderKmsKey:
    Type: AWS::KMS::Key
    DeletionPolicy: Delete
    UpdateReplacePolicy: Delete
    Properties:
      Description: KMS key for ImageBuilder pipeline solution
      Enabled: true
      EnableKeyRotation: true
      PendingWindowInDays: 30
      KeyPolicy:
        Version: 2012-10-17
        Statement:
          - Sid: Allow administration of the key via IAM policies
            Effect: Allow
            Principal:
              AWS: !Sub arn:${AWS::Partition}:iam::${AWS::AccountId}:root
            NotAction:
              - kms:Encrypt
              - kms:Decrypt
              - kms:ReEncrypt*
              - kms:GenerateDataKey*
              - kms:CreateGrant
            Resource: "*"
          - Sid: Allow use of the key only for AWS via IAM policies
            Effect: Allow
            Principal:
              AWS: !Sub arn:${AWS::Partition}:iam::${AWS::AccountId}:root
            Action:
              - kms:Encrypt
              - kms:Decrypt
              - kms:ReEncrypt*
              - kms:GenerateDataKey*
              - kms:CreateGrant
            Resource: "*"
            # Condition:
            #   StringEquals:
            #     kms:CallerAccount: !Ref AWS::AccountId
            #     kms:ViaService:
            #       - !Sub s3.${AWS::Region}.amazonaws.com
            #       - !Sub sns.${AWS::Region}.amazonaws.com

          # - Sid: Allow logs service principal to use the key
          #   Effect: Allow
          #   Principal:
          #     Service: !Sub logs.${AWS::Region}.amazonaws.com
          #   Action:
          #     - kms:Encrypt
          #     - kms:Decrypt
          #     - kms:ReEncrypt*
          #     - kms:GenerateDataKey*
          #     - kms:DescribeKey
          #   Resource: "*"
          #   Condition:
          #     ArnEquals:
          #       kms:EncryptionContext:aws:logs:arn:
          #         - !Sub arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/${ResourceSuffix}-Lambda
          # - Sid: Allow service principal to use the key
          #   Effect: Allow
          #   Principal:
          #     Service:
          #       - events.amazonaws.com
          #   Action:
          #     - kms:GenerateDataKey
          #     - kms:Decrypt
          #   Resource: "*"

  # BuildWorkflow:
  #   Type: AWS::ImageBuilder::Workflow
  #   Properties:
  #     Name: !Sub ${ResourceSuffix}-build-workflow
  #     Type: BUILD # BUILD | TEST | DISTRIBUTION
  #     # KmsKeyId: String
  #     #############################################
  #     # Update Version and ChangeDescription when any changes are made to this resource #
  #     Version: "1.0.0"
  #     ChangeDescription: Initial version
  #     #############################################
  #     Data: |
  #       name: build-image
  #       description: Workflow to build an AMI
  #       schemaVersion: 1.0

  #       steps:
  #         - name: LaunchBuildInstance
  #           action: LaunchInstance
  #           onFailure: Abort
  #           inputs:
  #             waitFor: "ssmAgent"

  #         - name: ApplyBuildComponents
  #           action: ExecuteComponents
  #           onFailure: Abort
  #           inputs:
  #             instanceId.$: "$.stepOutputs.LaunchBuildInstance.instanceId"

  #         - name: InventoryCollection
  #           action: CollectImageMetadata
  #           onFailure: Abort
  #           if:
  #             and:
  #               - stringEquals: "AMI"
  #                 value: "$.imagebuilder.imageType"
  #               - booleanEquals: true
  #                 value: "$.imagebuilder.collectImageMetadata"
  #           inputs:
  #             instanceId.$: "$.stepOutputs.LaunchBuildInstance.instanceId"

  #         - name: RunSanitizeScript
  #           action: SanitizeInstance
  #           onFailure: Abort
  #           if:
  #             and:
  #               - stringEquals: "AMI"
  #                 value: "$.imagebuilder.imageType"
  #               - not:
  #                   stringEquals: "Windows"
  #                   value: "$.imagebuilder.platform"
  #           inputs:
  #             instanceId.$: "$.stepOutputs.LaunchBuildInstance.instanceId"

  #         - name: CreateOutputAMI
  #           action: CreateImage
  #           onFailure: Abort
  #           if:
  #             stringEquals: "AMI"
  #             value: "$.imagebuilder.imageType"
  #           inputs:
  #             instanceId.$: "$.stepOutputs.LaunchBuildInstance.instanceId"

  #         - name: TerminateBuildInstance
  #           action: TerminateInstance
  #           onFailure: Continue
  #           inputs:
  #             instanceId.$: "$.stepOutputs.LaunchBuildInstance.instanceId"

  #       outputs:
  #         - name: "ImageId"
  #           value: "$.stepOutputs.CreateOutputAMI.imageId"

  # TestWorkflow:
  #   Type: AWS::ImageBuilder::Workflow
  #   Properties:
  #     Name: !Sub ${ResourceSuffix}-test-workflow
  #     # Description: ec2-scanner-workflow description
  #     Type: TEST
  #     # KmsKeyId: String
  #     #############################################
  #     # Update Version and ChangeDescription when any changes are made to this resource #
  #     Version: "1.0.0"
  #     ChangeDescription: Initial version
  #     #############################################
  #     Data: |
  #       name: test-image
  #       description: Workflow to test an image
  #       schemaVersion: 1.0

  #       steps:
  #         - name: LaunchTestInstance
  #           action: LaunchInstance
  #           onFailure: Abort
  #           inputs:
  #             waitFor: "ssmAgent"

  #         # - name: CollectImageScanFindings
  #         #   action: CollectImageScanFindings
  #         #   onFailure: Continue
  #         #   if:
  #         #     booleanEquals: true
  #         #     value: "$.imagebuilder.collectImageScanFindings"
  #         #   inputs:
  #         #     instanceId.$: "$.stepOutputs.LaunchTestInstance.instanceId"

  #         - name: ApplyTestComponents
  #           action: ExecuteComponents
  #           onFailure: Abort
  #           inputs:
  #             instanceId.$: "$.stepOutputs.LaunchTestInstance.instanceId"

  #         - name: TerminateTestInstance
  #           action: TerminateInstance
  #           onFailure: Continue
  #           inputs:
  #             instanceId.$: "$.stepOutputs.LaunchTestInstance.instanceId"
