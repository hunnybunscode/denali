AWSTemplateFormatVersion: 2010-09-09
Description: This stack consists of VPC Endpoints and other resources

Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: ""
        Parameters:
          - VpcId
          - VpcCidr
          - PrivateSubnetIds
          - PrivateRouteTableIds

    ParameterLabels:
      VpcId:
        default: VPC ID
      VpcCidr:
        default: VPC CIDR
      PrivateSubnetIds:
        default: Private Subnet IDs
      PrivateRouteTableIds:
        default: Private Route Table IDs

Parameters:
  VpcId:
    Type: AWS::EC2::VPC::Id
    Description: VPC ID
    AllowedPattern: ^vpc-([a-f0-9]{8}|[a-f0-9]{17})$
    ConstraintDescription: Must be a valid VPC ID.

  VpcCidr:
    Type: String
    Description: Enter the VPC CIDR in the form of x.x.x.x/x (e.g. 10.162.208.0/20)

  PrivateSubnetIds:
    Type: List<AWS::EC2::Subnet::Id>
    Description: Select three (3) private subnet IDs
    AllowedPattern: ^subnet-([a-f0-9]{8}|[a-f0-9]{17})$
    ConstraintDescription: Must select valid subnet IDs

  PrivateRouteTableIds:
    Type: CommaDelimitedList
    Description: Enter route table IDs associated with the subnets selected above, separated by commas (e.g. rtb-1111111111abcdefg, rtb-2222222222abcdefg)
    AllowedPattern: ^rtb-([a-f0-9]{8}|[a-f0-9]{17})$
    ConstraintDescription: Must be valid route table IDs.

Conditions:
  IsLCK: !Equals [!Ref "AWS::Partition", aws-iso-b]
  IsDCA: !Equals [!Ref "AWS::Partition", aws-iso]
  IsHighSide: !Or [Condition: IsLCK, Condition: IsDCA]
  IsLowSide: !Not [Condition: IsHighSide]

Resources:
  DynamoDbVpcEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      RouteTableIds: !Ref PrivateRouteTableIds
      ServiceName: !Sub com.amazonaws.${AWS::Region}.dynamodb
      VpcEndpointType: Gateway
      VpcId: !Ref VpcId

  VpcEndpointSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security Group for VPC Endpoints
      SecurityGroupEgress:
        - CidrIp: 127.0.0.1/32
          Description: No outbound traffic allowed
          IpProtocol: "-1"
      SecurityGroupIngress:
        - CidrIp: !Ref VpcCidr
          Description: Allows inbound HTTPS traffic
          FromPort: 443
          IpProtocol: tcp
          ToPort: 443
      VpcId: !Ref VpcId

  SsmVpcEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      PrivateDnsEnabled: true
      SecurityGroupIds:
        - !GetAtt VpcEndpointSecurityGroup.GroupId
      ServiceName: !Sub com.amazonaws.${AWS::Region}.ssm
      SubnetIds: !Ref PrivateSubnetIds
      VpcEndpointType: Interface
      VpcId: !Ref VpcId

  SsmMessagesVpcEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      PrivateDnsEnabled: true
      SecurityGroupIds:
        - !GetAtt VpcEndpointSecurityGroup.GroupId
      ServiceName: !Sub com.amazonaws.${AWS::Region}.ssmmessages
      SubnetIds: !Ref PrivateSubnetIds
      VpcEndpointType: Interface
      VpcId: !Ref VpcId

  Ec2MessagesVpcEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      PrivateDnsEnabled: true
      SecurityGroupIds:
        - !GetAtt VpcEndpointSecurityGroup.GroupId
      ServiceName: !Sub com.amazonaws.${AWS::Region}.ec2messages
      SubnetIds: !Ref PrivateSubnetIds
      VpcEndpointType: Interface
      VpcId: !Ref VpcId

  # Note: As of now, this is NOT supported in usibe1-az1
  SqsVpcEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      PrivateDnsEnabled: true
      SecurityGroupIds:
        - !GetAtt VpcEndpointSecurityGroup.GroupId
      ServiceName: !If
        - IsLCK
        - !Sub gov.sgov.sc2s.${AWS::Region}.sqs
        - !If
          - IsDCA
          - !Sub gov.ic.c2s.${AWS::Region}.sqs
          - !Sub com.amazonaws.${AWS::Region}.sqs
      SubnetIds: !Ref PrivateSubnetIds
      VpcEndpointType: Interface
      VpcId: !Ref VpcId

  LogsVpcEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      PrivateDnsEnabled: true
      SecurityGroupIds:
        - !GetAtt VpcEndpointSecurityGroup.GroupId
      ServiceName: !Sub com.amazonaws.${AWS::Region}.logs
      SubnetIds: !Ref PrivateSubnetIds
      VpcEndpointType: Interface
      VpcId: !Ref VpcId

  SnsVpcEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      PrivateDnsEnabled: true
      SecurityGroupIds:
        - !GetAtt VpcEndpointSecurityGroup.GroupId
      ServiceName: !If
        - IsLCK
        - !Sub gov.sgov.sc2s.${AWS::Region}.sns
        - !If
          - IsDCA
          - !Sub gov.ic.c2s.${AWS::Region}.sns
          - !Sub com.amazonaws.${AWS::Region}.sns
      SubnetIds: !Ref PrivateSubnetIds
      VpcEndpointType: Interface
      VpcId: !Ref VpcId

  ImagebuilderVpcEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Condition: IsLowSide
    Properties:
      PrivateDnsEnabled: true
      SecurityGroupIds:
        - !GetAtt VpcEndpointSecurityGroup.GroupId
      ServiceName: !Sub com.amazonaws.${AWS::Region}.imagebuilder
      SubnetIds: !Ref PrivateSubnetIds
      VpcEndpointType: Interface
      VpcId: !Ref VpcId

  AutoScalingVpcEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      PrivateDnsEnabled: true
      SecurityGroupIds:
        - !GetAtt VpcEndpointSecurityGroup.GroupId
      ServiceName: !If
        - IsLCK
        - !Sub gov.sgov.sc2s.${AWS::Region}.autoscaling
        - !If
          - IsDCA
          - !Sub gov.ic.c2s.${AWS::Region}.autoscaling
          - !Sub com.amazonaws.${AWS::Region}.autoscaling
      SubnetIds: !Ref PrivateSubnetIds
      VpcEndpointType: Interface
      VpcId: !Ref VpcId
