AWSTemplateFormatVersion: 2010-09-09

Description: Creates DCV Session Manager ImageBuilder Pipeline Stack

Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: General
        Parameters:
          - IamPrefix
          - PermissionsBoundaryPolicyArn
          - EmailEndPoint

      - Label:
          default: Image Builder
        Parameters:
          - SemVer
          - ParentImage
          - ParentImageInstanceType
          - VpcId
          - SubnetId
          - OutboundCidrIp
          - ProxyServerAddress
          - NoProxyList
          - DcvResourceBucket

Parameters:
  IamPrefix:
    Type: String
    Description: Required prefix for IAM resources
    Default: AFC2S
    AllowedValues: [AFC2S]
    ConstraintDescription: Must be "AFC2S"

  PermissionsBoundaryPolicyArn:
    Type: String
    Description: ARN of the policy that is used to set the permissions boundary for IAM resources
    AllowedPattern: ^arn:(aws|aws-us-gov|aws-iso-b|aws-iso):iam::(\d{12}|aws):policy/.*
    ConstraintDescription: Must be a valid IAM policy ARN
    Default: arn:aws-us-gov:iam::aws:policy/AdministratorAccess

  EmailEndPoint:
    Type: String
    Description: "The email address at which to receive notifications for ImageBuilder events"
    AllowedPattern: ^$|^\S+@\S+\.+\S+$
    ConstraintDescription: Must be left blank or a valid email address

  SemVer:
    Type: String
    Description: >
      Semantic version of the DCV Image Recipe and other associated resources. Increment this when updating the parent image below or any associated resources in the template itself.
      The format is <major>.<minor>.<patch> where each component is an integer (e.g. 1.0.0).
    Default: "1.0.0"

  ParentImage:
    Type: String
    Description: The parent (or base) image for the image recipe, in either an Image ARN or an AMI ID format.
    AllowedPattern: ^(arn:(aws|aws-us-gov|aws-iso-b|aws-iso):ec2:\S{1,30}::image\/)?ami-([a-f0-9]{8}|[a-f0-9]{17})$
    ConstraintDescription: Must be a valid Image ARN or AMI ID
    Default: ami-008177b99929ea0db

  ParentImageInstanceType:
    Type: String
    Description: The instance type to use for the parent image.
    Default: t3.2xlarge

  VpcId:
    Type: AWS::EC2::VPC::Id
    Description: VPC ID
    AllowedPattern: \S+
    ConstraintDescription: Must select a VPC

  SubnetId:
    Type: AWS::EC2::Subnet::Id
    Description: The ID of the subnet in which EC2 instances launched by the image pipeline will run.
    AllowedPattern: \S+
    ConstraintDescription: Must select a subnet

  OutboundCidrIp:
    Type: String
    Description: Outbound CIDR block for ImageBuilder instances
    Default: 0.0.0.0/0
    AllowedPattern: ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(/([0-9]|[1-2][0-9]|3[0-2]))$
    ConstraintDescription: Must be a valid CIDR block

  ProxyServerAddress:
    Type: String
    Description: The address of the proxy server for outbound internet access. It can be an http or IP address. The port is fixed at 3128.
    AllowedPattern: ^(?!.*(:[0-9]{1,5}))(https?://([a-zA-Z0-9-_.]+)|((([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])))$
    ConstraintDescription: Must be a valid http or IP address, without the port number

  NoProxyList:
    Type: String
    Description: A comma-separated list of addresses that should bypass the proxy server. These can be either http or IP addresses.
    Default: 169.254.169.254,vi2e.io,s3.us-gov-west-1.amazonaws.com,secretsmanager.us-gov-west-1.amazonaws.com,ssm.us-gov-west-1.amazonaws.com,ssmmessages.us-gov-west-1.amazonaws.com,ec2messages.us-gov-west-1.amazonaws.com


  DcvResourceBucket:
    Type: String
    Description: The name of the S3 bucket where the DCV Resources are located
    AllowedPattern: ^$|^[0-9a-zA-Z]+([0-9a-zA-Z-]*[0-9a-zA-Z])*$
    ConstraintDescription: Bucket name can include numbers, lowercase letters, uppercase letters, and hyphens. Or blank

Conditions:
  HasDcvResourceBucket: !Not [!Equals [!Ref DcvResourceBucket, ""]]
  IsLCK: !Equals [!Ref "AWS::Partition", aws-iso-b]
  IsDCA: !Equals [!Ref "AWS::Partition", aws-iso]
  IsHighSide: !Or [Condition: IsLCK, Condition: IsDCA]
  IsLowSide: !Not [Condition: IsHighSide]

Resources:
  DcvConnectionGwyPipelineKmsKey:
    Type: AWS::KMS::Key
    DeletionPolicy: Delete
    UpdateReplacePolicy: Delete
    Properties:
      Description: KMS key for DCV Server Pipeline solution
      Enabled: true
      EnableKeyRotation: true
      PendingWindowInDays: 30
      KeyPolicy:
        Version: 2012-10-17
        Statement:
          - Sid: Allow administration of the key via IAM policies
            Effect: Allow
            Principal:
              AWS: !Sub arn:${AWS::Partition}:iam::${AWS::AccountId}:root
            NotAction:
              - kms:Encrypt
              - kms:Decrypt
              - kms:ReEncrypt*
              - kms:GenerateDataKey*
              - kms:CreateGrant
            Resource: "*"
          - Sid: Allow use of the key only for AWS via IAM policies
            Effect: Allow
            Principal:
              AWS: !Sub arn:${AWS::Partition}:iam::${AWS::AccountId}:root
            Action:
              - kms:Encrypt
              - kms:Decrypt
              - kms:ReEncrypt*
              - kms:GenerateDataKey*
              - kms:CreateGrant
            Resource: "*"

  DcvConnectionGwyAmi:
    Type: AWS::ImageBuilder::Component
    Properties:
      Name: dcv-connection-gwy-ami-component
      Description: Prepares the image for dcv connection gateway pipeline
      Platform: Linux
      Version: !Ref SemVer
      SupportedOsVersions:
        - Red Hat Enterprise Linux 8
        - Red Hat Enterprise Linux 9
      KmsKeyId: !GetAtt DcvConnectionGwyPipelineKmsKey.Arn
      Data: !Sub |-
        name: DCVConnGatewayInstallBuildDocument
        description: This is a build document for NICE DCV Connection Gateway installation.
        schemaVersion: 1.0
        phases:
          - name: build
            steps:
              - name: InstallDCVConnectionGateway
                action: ExecuteBash
                inputs:
                  commands:
                    - |
                      #!/bin/bash
                      set -eE

                      # Set up logging
                      LOG_PATH="/var/log/dcv-connection-gateway-install.log"
                      LOG_DIR=$(dirname "$LOG_PATH")
                      echo $(date -u) "DCV Connection Gateway Installation" | tee -a "$LOG_PATH"

                      # Retrieve System Info
                      read -r system version <<<$(echo $(cat /etc/os-release | grep "^ID=\|^VERSION_ID=" | sort | cut -d"=" -f2 | tr -d "\"" | tr '[:upper:]' '[:lower:]'))
                      major_version=$(echo "$version" | cut -d. -f1)
                      arch="$(arch)"
                      
                      echo "System: $system" | tee -a "$LOG_PATH"
                      echo "Version: $version" | tee -a "$LOG_PATH"
                      echo "Major Version: $major_version" | tee -a "$LOG_PATH"
                      echo "Architecture: $arch" | tee -a "$LOG_PATH"

                      TMP_DIR="$(mktemp -d /tmp/XXXXXX)"
                      trap 'rm -rf -- "$TMP_DIR"' ERR

                      # Determine package type and manager
                      case $system in
                          amzn )
                              if [ "$major_version" = 2 ]; then
                                  package_type="el7"
                                  package_manager="yum"
                                  package_extension="rpm"
                              elif [ "$major_version" = 2023 ]; then
                                  package_type="el9"
                                  package_manager="dnf"
                                  package_extension="rpm"
                              fi
                              ;;
                          centos|rhel )
                              if [[ "$major_version" =~ ^(7|8|9) ]]; then
                                  package_type="el$major_version"
                                  if [[ "$major_version" =~ ^(8|9) ]]; then
                                      package_manager="dnf"
                                  else
                                      package_manager="yum"
                                  fi
                                  package_extension="rpm"
                              fi
                              ;;
                          * )
                              echo "Error: Unsupported system: $system" | tee -a "$LOG_PATH"
                              exit 1
                              ;;
                      esac

                      if [ -z "$package_type" ]; then
                          echo "Error: system '$system' with version '$version' is not supported for arch '$arch'"
                          exit 1
                      fi

                      # Update system packages
                      echo $(date -u) "Updating system packages..." | tee -a "$LOG_PATH"
                      $package_manager update -y

                      # Remove the RHEL packages and Update SubscriptionManager values
                      if [ "${AWS::Partition}" = "aws-iso-b" ] || [ "${AWS::Partition}" = "aws-iso" ]; then
                          if [ -f /etc/yum/pluginconf.d/subscription-manager.conf ]; then
                              echo "Updating subscription manager configuration..." | tee -a "$LOG_PATH"
                              sed -i 's/enabled=1/enabled=0/g' /etc/yum/pluginconf.d/subscription-manager.conf
                          fi
                          echo "Removing RHEL repositories..." | tee -a "$LOG_PATH"
                          rm -rf /etc/yum.repos.d/r* /etc/yum.repos.d/e*
                      fi

                      # Install required packages
                      echo $(date -u) "Installing required packages..." | tee -a "$LOG_PATH"
                      $package_manager install -y zip curl wget

                      # Install AWS CLI
                      echo $(date -u) "Installing AWS CLI..." | tee -a "$LOG_PATH"

                      # Update PATH and create necessary directories
                      export PATH=/usr/local/bin:/usr/bin:$PATH
                      mkdir -p /usr/local/bin

                      # Create temporary directory
                      TEMP_DIR=$(mktemp -d)
                      cd "$TEMP_DIR" || exit 1

                      if [ "${AWS::Partition}" = "aws-iso-b" ] || [ "${AWS::Partition}" = "aws-iso" ]; then
                          if [ "${AWS::Partition}" = "aws-iso-b" ]; then
                              aws_region=lck
                          else
                              aws_region=dca
                          fi
                          
                          echo "Downloading AWS CLI for high-side environment..." | tee -a "$LOG_PATH"
                          if ! curl -o awscliv2.zip https://aws-sdk-common-infra-"$aws_region"-prod-deployment-bucket.s3.${AWS::Region}.${AWS::URLSuffix}/aws-cli-v2/linux/"$arch"/awscli-exe-linux-"$arch".zip --no-verify-ssl; then
                              echo "Failed to download AWS CLI from high-side source" | tee -a "$LOG_PATH"
                              exit 1
                          fi
                      else
                          echo "Downloading AWS CLI for commercial/GovCloud environment..." | tee -a "$LOG_PATH"
                          if [ "$arch" = "x86_64" ]; then
                              curl -o awscliv2.zip https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip
                          else
                              curl -o awscliv2.zip https://awscli.amazonaws.com/awscli-exe-linux-aarch64.zip
                          fi
                      fi

                      echo "Unzipping awscliv2.zip..." | tee -a "$LOG_PATH"
                      if ! unzip -q -o awscliv2.zip; then
                          echo "Failed to unzip AWS CLI package" | tee -a "$LOG_PATH"
                          exit 1
                      fi

                      echo "Installing AWS CLI..." | tee -a "$LOG_PATH"
                      BINARY=/usr/local/aws-cli/v2/current/bin/aws
                      if [ -x "$BINARY" ]; then
                          echo "Updating existing AWS CLI installation..." | tee -a "$LOG_PATH"
                          if ! ./aws/install --update --bin-dir /usr/local/bin --install-dir /usr/local/aws-cli; then
                              echo "Failed to update AWS CLI" | tee -a "$LOG_PATH"
                              exit 1
                          fi
                      else
                          echo "Performing fresh AWS CLI installation..." | tee -a "$LOG_PATH"
                          if ! ./aws/install --bin-dir /usr/local/bin --install-dir /usr/local/aws-cli; then
                              echo "Failed to install AWS CLI" | tee -a "$LOG_PATH"
                              exit 1
                          fi
                      fi

                      # Clean up installation files
                      cd /
                      rm -rf "$TEMP_DIR"

                      # Create symlinks if needed
                      if [ ! -f "/usr/bin/aws" ]; then
                          ln -s /usr/local/bin/aws /usr/bin/aws
                      fi

                      # Verify installation
                      if ! command -v aws &> /dev/null; then
                          echo "AWS CLI installation failed - command not found" | tee -a "$LOG_PATH"
                          exit 1
                      fi

                      AWS_VERSION=$(aws --version 2>&1)
                      echo "AWS CLI version: $AWS_VERSION" | tee -a "$LOG_PATH"

                      echo $(date -u) "AWS CLI installation completed successfully" | tee -a "$LOG_PATH"

                      # Download Packages
                      echo $(date -u) "Downloading DCV Connection Gateway Packages" | tee -a "$LOG_PATH"

                      # Set DCV versions
                      DCV_VERSION="2024.0-17979"
                      GATEWAY_VERSION="2023.1.710-1"

                      if [[ "${AWS::Partition}" == "aws-iso" || "${AWS::Partition}" == "aws-iso-b" ]]; then
                          echo "Running in Secret/Top Secret region, using S3 bucket for resources..." | tee -a "$LOG_PATH"
                          RESOURCE_PATH="s3://${DcvResourceBucket}"

                          if [ "$arch" != "x86_64" ]; then
                              deb_arch="arm64"
                              DCV_PACKAGE="nice-dcv-$DCV_VERSION-ubuntu2204-aarch64.tgz"
                              aws s3 cp "$RESOURCE_PATH/$DCV_PACKAGE" "$TMP_DIR/nice-dcv-server.tgz" --no-verify-ssl
                          else
                              deb_arch="amd64"
                              DCV_PACKAGE="nice-dcv-$DCV_VERSION-$package_type-$arch.tgz"
                              aws s3 cp "$RESOURCE_PATH/$DCV_PACKAGE" "$TMP_DIR/nice-dcv-server.tgz" --no-verify-ssl
                          fi
                          
                          aws s3 cp "$RESOURCE_PATH/2023.1/Gateway/nice-dcv-connection-gateway-$GATEWAY_VERSION.$deb_arch.$package_type.$package_extension" \
                              "$TMP_DIR/nice-dcv-connection-gateway.$package_extension" --no-verify-ssl
                      else
                          echo "Running in Commercial/GovCloud region, using CloudFront for resources..."
                          CLOUDFRONT_PREFIX="https://d1uj6qtbmh3dt5.cloudfront.net"

                          # Download Packages
                          if [ "$package_manager" = apt ]; then
                              curl -o "$TMP_DIR/NICE-GPG-KEY" "$CLOUDFRONT_PREFIX/NICE-GPG-KEY"
                              gpg --import "$TMP_DIR/NICE-GPG-KEY"
                              if [ $arch != "x86_64" ]; then
                                  deb_arch="arm64"
                                  curl -o "$TMP_DIR/nice-dcv-server.tgz" "$CLOUDFRONT_PREFIX/nice-dcv-ubuntu2204-aarch64.tgz"
                              else
                                  deb_arch="amd64"
                                  curl -o "$TMP_DIR/nice-dcv-server.tgz" "$CLOUDFRONT_PREFIX/nice-dcv-$package_type-$arch.tgz"
                              fi
                              curl -o "$TMP_DIR/nice-dcv-connection-gateway.$package_extension" "$CLOUDFRONT_PREFIX/nice-dcv-connection-gateway_$deb_arch.$package_type.$package_extension"
                          else
                              rpm --import "$CLOUDFRONT_PREFIX"/NICE-GPG-KEY
                              curl -o "$TMP_DIR/nice-dcv-connection-gateway.$package_extension" "$CLOUDFRONT_PREFIX/nice-dcv-connection-gateway-$package_type.$arch.$package_extension"
                              curl -o "$TMP_DIR/nice-dcv-server.tgz" "$CLOUDFRONT_PREFIX/nice-dcv-$package_type-$arch.tgz"
                          fi
                      fi

                      # Install Packages
                      echo $(date -u) "Installing DCV Connection Gateway" | tee -a "$LOG_PATH"
                      tar -xvzf "$TMP_DIR/nice-dcv-server.tgz" -C "$TMP_DIR"
                      for package_pattern in "nice-dcv-web-viewer*" "nice-dcv-connection-gateway.$package_extension"; do
                          package_full_path=$(find "$TMP_DIR" -name "$package_pattern")
                          "$package_manager" install -y "$package_full_path" --nogpgcheck
                      done

                      # Enables Web Access through the Gateway
                      sed -i --expression 's|url = "https://localhost:8080"|local-resources-path = "/usr/share/dcv/www"|' /etc/dcv-connection-gateway/dcv-connection-gateway.conf

                      # Enable and start Gateway
                      systemctl enable dcv-connection-gateway
                      systemctl start dcv-connection-gateway

                      # Clean Up
                      rm -rf "$TMP_DIR"
                      echo $(date -u) "DCV Connection Gateway Installation Complete" | tee -a "$LOG_PATH"

  DcvConnectionGwyRecipe:
    Type: AWS::ImageBuilder::ImageRecipe
    Properties:
      Name: dcv-connection-gwy-ami-recipe
      ParentImage: !Ref ParentImage
      Version: !Ref SemVer
      Components:
        - !If
          - IsLowSide
          - ComponentArn: !Sub arn:${AWS::Partition}:imagebuilder:${AWS::Region}:aws:component/aws-cli-version-2-linux/x.x.x
          - !Ref AWS::NoValue
        - ComponentArn: !GetAtt DcvConnectionGwyAmi.Arn
      AdditionalInstanceConfiguration:
        SystemsManagerAgent:
          UninstallAfterBuild: false
        UserDataOverride:
          Fn::Base64: !Sub |
            #!/bin/bash
            set -e

            # cat >/etc/environment <<EOF
            # HTTP_PROXY=${ProxyServerAddress}:3128
            # HTTPS_PROXY=${ProxyServerAddress}:3128
            # NO_PROXY=${NoProxyList}
            # http_proxy=${ProxyServerAddress}:3128
            # https_proxy=${ProxyServerAddress}:3128
            # no_proxy=${NoProxyList}
            # EOF
            # source /etc/environment

            # mkdir -p /etc/systemd/system/amazon-ssm-agent.service.d
            # cat > /etc/systemd/system/amazon-ssm-agent.service.d/proxy.conf <<EOF
            # [Service]
            # EnvironmentFile=/etc/environment
            # PassEnvironment=HTTP_PROXY,HTTPS_PROXY,NO_PROXY,http_proxy,https_proxy,no_proxy
            # EOF

            # cat >> /etc/yum.conf <<EOF
            # proxy=$https_proxy
            # EOF

            # Install SSM Agent
            arch=$(arch)
            if [ "$arch" = "arm64" ]; then
                yum install -y https://s3.${AWS::Region}.${AWS::URLSuffix}/amazon-ssm-${AWS::Region}/latest/linux_arm64/amazon-ssm-agent.rpm --nogpgcheck
            else # x86_64
                yum install -y https://s3.${AWS::Region}.${AWS::URLSuffix}/amazon-ssm-${AWS::Region}/latest/linux_amd64/amazon-ssm-agent.rpm --nogpgcheck
            fi

            # Start SSM Agent
            systemctl daemon-reload
            systemctl enable amazon-ssm-agent
            systemctl start amazon-ssm-agent

  DcvConnectionGwyAmiDistConfig:
    Type: AWS::ImageBuilder::DistributionConfiguration
    Properties:
      Name: dcv-connection-gwy-ami-dist-config
      Distributions:
        - Region: !Ref AWS::Region
          AmiDistributionConfiguration:
            Name: dcv-connection-gwy-ami-{{ imagebuilder:buildDate }}
            Description: NICE DCV AMI
            TargetAccountIds:
              - !Ref AWS::AccountId

  DcvConnectionGwyAmiRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${IamPrefix}dcv-connection-gwy-ami-role
      PermissionsBoundary: !Ref PermissionsBoundaryPolicyArn
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
      ManagedPolicyArns:
        - !Sub arn:${AWS::Partition}:iam::aws:policy/AmazonSSMManagedInstanceCore
        - !Sub arn:${AWS::Partition}:iam::aws:policy/EC2InstanceProfileForImageBuilder
      Policies:
        - PolicyName: !Sub ${IamPrefix}-dcv-session-manager-policy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - ssm:GetParameter
                Resource: !Sub arn:${AWS::Partition}:ssm:${AWS::Region}:${AWS::AccountId}:parameter/dcv-*
        - PolicyName: KMS_Policy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Sid: AllowKMS
                Effect: Allow
                Action: kms:Decrypt
                Resource: !GetAtt DcvConnectionGwyPipelineKmsKey.Arn
        - !If
          - HasDcvResourceBucket
          - PolicyName: CustomBucketAccess
            PolicyDocument:
              Version: "2012-10-17"
              Statement:
                - Effect: Allow
                  Action:
                    - s3:GetObject
                    - s3:ListBucket
                  Resource:
                    - !Sub arn:${AWS::Partition}:s3:::${DcvResourceBucket}
                    - !Sub arn:${AWS::Partition}:s3:::${DcvResourceBucket}/*
          - !Ref AWS::NoValue

  DcvConnectionGwyAmiInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      InstanceProfileName: !Sub ${IamPrefix}-dcv-connection-gwy-ami-instance-profile
      Roles:
        - !Ref DcvConnectionGwyAmiRole

  DcvAmiCreationSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: SG default ports for DCV
      SecurityGroupEgress:
        - CidrIp: !Ref OutboundCidrIp
          IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          Description: Allow outbound traffic on 443
        - CidrIp: !Ref OutboundCidrIp
          IpProtocol: tcp
          FromPort: 3128
          ToPort: 3128
          Description: Allow outbound traffic on 3128
      VpcId: !Ref VpcId

  DcvConnectionGwyAmiInfraConfig:
    Type: AWS::ImageBuilder::InfrastructureConfiguration
    Properties:
      InstanceProfileName: !Ref DcvConnectionGwyAmiInstanceProfile
      InstanceTypes:
        - !Ref ParentImageInstanceType
      Name: dcv-connection-gwy-ami-infra-config
      SecurityGroupIds:
        - !GetAtt DcvAmiCreationSecurityGroup.GroupId
      SubnetId: !Ref SubnetId

  DcvConnectionGwyAmiPipeline:
    Type: AWS::ImageBuilder::ImagePipeline
    Properties:
      Name: dcv-connection-gwy-ami
      ImageRecipeArn: !GetAtt DcvConnectionGwyRecipe.Arn
      InfrastructureConfigurationArn: !GetAtt DcvConnectionGwyAmiInfraConfig.Arn
      DistributionConfigurationArn: !GetAtt DcvConnectionGwyAmiDistConfig.Arn

  DcvConnectionGwyAmiNotificationTopic:
    Type: AWS::SNS::Topic
    Properties:
      DisplayName: DCV Connection Gateway AMI Creation Notification Topic
      TopicName: dcv-connection-gwy-ami-notification-topic
      KmsMasterKeyId: alias/aws/sns

  DcvConnectionGwyAmiNotificationTopicSubscription:
    Type: AWS::SNS::Subscription
    Properties:
      TopicArn: !Ref DcvConnectionGwyAmiNotificationTopic
      Protocol: email
      Endpoint: !Ref EmailEndPoint
