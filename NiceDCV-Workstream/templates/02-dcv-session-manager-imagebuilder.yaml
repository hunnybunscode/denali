AWSTemplateFormatVersion: 2010-09-09

Description: Creates DCV Session Manager ImageBuilder Pipeline Stack

Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: General
        Parameters:
          - IamPrefix
          - PermissionsBoundaryPolicyArn
          - EmailEndPoint

      - Label:
          default: Image Builder
        Parameters:
          - SemVer
          - ParentImage
          - ParentImageInstanceType
          - VpcId
          - SubnetId
          - OutboundCidrIp
          - ProxyServerAddress
          - NoProxyList
          - DcvResourceBucket

Parameters:
  IamPrefix:
    Type: String
    Description: Required prefix for IAM resources
    Default: AFC2S
    AllowedValues: [AFC2S]
    ConstraintDescription: Must be "AFC2S"

  PermissionsBoundaryPolicyArn:
    Type: String
    Description: ARN of the policy that is used to set the permissions boundary for IAM resources
    AllowedPattern: ^arn:(aws|aws-us-gov|aws-iso-b|aws-iso):iam::(\d{12}|aws):policy/.*
    ConstraintDescription: Must be a valid IAM policy ARN
    Default: arn:aws-us-gov:iam::aws:policy/AdministratorAccess

  EmailEndPoint:
    Type: String
    Description: "The email address at which to receive notifications for ImageBuilder events"
    AllowedPattern: ^$|^\S+@\S+\.+\S+$
    ConstraintDescription: Must be left blank or a valid email address

  SemVer:
    Type: String
    Description: >
      Semantic version of the DCV Image Recipe and other associated resources. Increment this when updating the parent image below or any associated resources in the template itself.
      The format is <major>.<minor>.<patch> where each component is an integer (e.g. 1.0.0).
    Default: "1.0.0"

  ParentImage:
    Type: String
    Description: The parent (or base) image for the image recipe, in either an Image ARN or an AMI ID format.
    AllowedPattern: ^(arn:(aws|aws-us-gov|aws-iso-b|aws-iso):ec2:\S{1,30}::image\/)?ami-([a-f0-9]{8}|[a-f0-9]{17})$
    ConstraintDescription: Must be a valid Image ARN or AMI ID
    Default: ami-030d1cf861950bc2b

  ParentImageInstanceType:
    Type: String
    Description: The instance type to use for the parent image.
    Default: t3.2xlarge

  VpcId:
    Type: AWS::EC2::VPC::Id
    Description: VPC ID
    AllowedPattern: \S+
    ConstraintDescription: Must select a VPC

  SubnetId:
    Type: AWS::EC2::Subnet::Id
    Description: The ID of the subnet in which EC2 instances launched by the image pipeline will run.
    AllowedPattern: \S+
    ConstraintDescription: Must select a subnet

  OutboundCidrIp:
    Type: String
    Description: Outbound CIDR block for ImageBuilder instances
    Default: 0.0.0.0/0
    AllowedPattern: ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(/([0-9]|[1-2][0-9]|3[0-2]))$
    ConstraintDescription: Must be a valid CIDR block

  ProxyServerAddress:
    Type: String
    Description: The address of the proxy server for outbound internet access. It can be an http or IP address. The port is fixed at 3128.
    AllowedPattern: ^(?!.*(:[0-9]{1,5}))(https?://([a-zA-Z0-9-_.]+)|((([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])))$
    ConstraintDescription: Must be a valid http or IP address, without the port number

  NoProxyList:
    Type: String
    Description: A comma-separated list of addresses that should bypass the proxy server. These can be either http or IP addresses.
    Default: 169.254.169.254,vi2e.io,s3.us-gov-west-1.amazonaws.com,secretsmanager.us-gov-west-1.amazonaws.com,ssm.us-gov-west-1.amazonaws.com,ssmmessages.us-gov-west-1.amazonaws.com,ec2messages.us-gov-west-1.amazonaws.com


  DcvResourceBucket:
    Type: String
    Description: The name of the S3 bucket where the DCV Resources are located
    AllowedPattern: ^$|^[0-9a-zA-Z]+([0-9a-zA-Z-]*[0-9a-zA-Z])*$
    ConstraintDescription: Bucket name can include numbers, lowercase letters, uppercase letters, and hyphens. Or blank

Conditions:
  HasDcvResourceBucket: !Not [!Equals [!Ref DcvResourceBucket, ""]]
  IsLCK: !Equals [!Ref "AWS::Partition", aws-iso-b]
  IsDCA: !Equals [!Ref "AWS::Partition", aws-iso]
  IsHighSide: !Or [Condition: IsLCK, Condition: IsDCA]
  IsLowSide: !Not [Condition: IsHighSide]

Resources:
  DcvSessionMgrPipelineKmsKey:
    Type: AWS::KMS::Key
    DeletionPolicy: Delete
    UpdateReplacePolicy: Delete
    Properties:
      Description: KMS key for DCV Server Pipeline solution
      Enabled: true
      EnableKeyRotation: true
      PendingWindowInDays: 30
      KeyPolicy:
        Version: 2012-10-17
        Statement:
          - Sid: Allow administration of the key via IAM policies
            Effect: Allow
            Principal:
              AWS: !Sub arn:${AWS::Partition}:iam::${AWS::AccountId}:root
            NotAction:
              - kms:Encrypt
              - kms:Decrypt
              - kms:ReEncrypt*
              - kms:GenerateDataKey*
              - kms:CreateGrant
            Resource: "*"
          - Sid: Allow use of the key only for AWS via IAM policies
            Effect: Allow
            Principal:
              AWS: !Sub arn:${AWS::Partition}:iam::${AWS::AccountId}:root
            Action:
              - kms:Encrypt
              - kms:Decrypt
              - kms:ReEncrypt*
              - kms:GenerateDataKey*
              - kms:CreateGrant
            Resource: "*"

  DcvSessionMgrAmi:
    Type: AWS::ImageBuilder::Component
    Properties:
      Name: dcv-session-mgr-ami-component1
      Description: Prepares the image for dcv session manager pipeline
      Platform: Linux
      Version: !Ref SemVer
      SupportedOsVersions:
        - Red Hat Enterprise Linux 8
        - Red Hat Enterprise Linux 9
      KmsKeyId: !GetAtt DcvSessionMgrPipelineKmsKey.Arn
      Data: !Sub |-
        name: DCVConnGatewayInstallBuildDocument
        description: This is a build document for NICE DCV Session Manager installation.
        schemaVersion: 1.0
        phases:
          - name: build
            steps:
              - name: InstallDCVCSessionManager
                action: ExecuteBash
                inputs:
                  commands:
                    - |
                      #!/bin/bash
                      set -e

                      # Set up logging
                      LOG_PATH="/var/log/dcv-session-mgr-broker.log"
                      LOG_DIR=$(dirname "$LOG_PATH")
                      echo $(date -u) "DCV Session Manager Installation" | tee -a "$LOG_PATH"

                      # Retrieve System Info
                      read -r system version <<<$(echo $(cat /etc/os-release | grep "^ID=\|^VERSION_ID=" | sort | cut -d"=" -f2 | tr -d "\"" | tr '[:upper:]' '[:lower:]'))
                      major_version=$(echo "$version" | cut -d. -f1)
                      arch="$(arch)"

                      echo "System: $system" | tee -a "$LOG_PATH"
                      echo "Version: $version" | tee -a "$LOG_PATH"
                      echo "Major Version: $major_version" | tee -a "$LOG_PATH"
                      echo "Architecture: $arch" | tee -a "$LOG_PATH"

                      TMP_DIR="$(mktemp -d /tmp/XXXXXX)"
                      trap 'rm -rf -- "$TMP_DIR"' ERR

                      # Determine package type and manager
                      case $system in
                          amzn )
                              if [ "$major_version" = 2 ]; then
                                  package_type="el7"
                                  package_manager="yum"
                                  package_extension="rpm"
                              elif [ "$major_version" = 2023 ]; then
                                  package_type="el9"
                                  package_manager="dnf"
                                  package_extension="rpm"
                              fi
                              ;;
                          centos|rhel )
                              if [[ "$major_version" =~ ^(7|8|9) ]]; then
                                  package_type="el$major_version"
                                  if [[ "$major_version" =~ ^(8|9) ]]; then
                                      package_manager="dnf"
                                  else
                                      package_manager="yum"
                                  fi
                                  package_extension="rpm"
                              fi
                              ;;
                          * )
                              echo "Error: Unsupported system: $system" | tee -a "$LOG_PATH"
                              exit 1
                              ;;
                      esac

                      if [ -z "$package_type" ]; then
                          echo "Error: system '$system' with version '$version' is not supported for arch '$arch'"
                          exit 1
                      fi

                      # Update system packages
                      echo $(date -u) "Updating system packages..." | tee -a "$LOG_PATH"
                      $package_manager update -y

                      # Remove the RHEL packages and Update SubscriptionManager values
                      if [ "${AWS::Partition}" = "aws-iso-b" ] || [ "${AWS::Partition}" = "aws-iso" ]; then
                          if [ -f /etc/yum/pluginconf.d/subscription-manager.conf ]; then
                              echo "Updating subscription manager configuration..." | tee -a "$LOG_PATH"
                              sed -i 's/enabled=1/enabled=0/g' /etc/yum/pluginconf.d/subscription-manager.conf
                          fi
                          echo "Removing RHEL repositories..." | tee -a "$LOG_PATH"
                          rm -rf /etc/yum.repos.d/r* /etc/yum.repos.d/e*
                      fi

                      # Install required packages
                      echo $(date -u) "Installing required packages..." | tee -a "$LOG_PATH"
                      $package_manager install -y zip curl wget

                      # Install AWS CLI
                      echo $(date -u) "Installing AWS CLI..." | tee -a "$LOG_PATH"

                      # Update PATH and create necessary directories
                      export PATH=/usr/local/bin:/usr/bin:$PATH
                      mkdir -p /usr/local/bin

                      # Create temporary directory
                      TEMP_DIR=$(mktemp -d)
                      cd "$TEMP_DIR" || exit 1

                      if [ "${AWS::Partition}" = "aws-iso-b" ] || [ "${AWS::Partition}" = "aws-iso" ]; then
                          if [ "${AWS::Partition}" = "aws-iso-b" ]; then
                              aws_region=lck
                          else
                              aws_region=dca
                          fi
                          
                          echo "Downloading AWS CLI for high-side environment..." | tee -a "$LOG_PATH"
                          if ! curl -o awscliv2.zip https://aws-sdk-common-infra-"$aws_region"-prod-deployment-bucket.s3.${AWS::Region}.${AWS::URLSuffix}/aws-cli-v2/linux/"$arch"/awscli-exe-linux-"$arch".zip --no-verify-ssl; then
                              echo "Failed to download AWS CLI from high-side source" | tee -a "$LOG_PATH"
                              exit 1
                          fi
                      else
                          echo "Downloading AWS CLI for commercial/GovCloud environment..." | tee -a "$LOG_PATH"
                          if [ "$arch" = "x86_64" ]; then
                              curl -o awscliv2.zip https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip
                          else
                              curl -o awscliv2.zip https://awscli.amazonaws.com/awscli-exe-linux-aarch64.zip
                          fi
                      fi

                      echo "Unzipping awscliv2.zip..." | tee -a "$LOG_PATH"
                      if ! unzip -q -o awscliv2.zip; then
                          echo "Failed to unzip AWS CLI package" | tee -a "$LOG_PATH"
                          exit 1
                      fi

                      echo "Installing AWS CLI..." | tee -a "$LOG_PATH"
                      BINARY=/usr/local/aws-cli/v2/current/bin/aws
                      if [ -x "$BINARY" ]; then
                          echo "Updating existing AWS CLI installation..." | tee -a "$LOG_PATH"
                          if ! ./aws/install --update --bin-dir /usr/local/bin --install-dir /usr/local/aws-cli; then
                              echo "Failed to update AWS CLI" | tee -a "$LOG_PATH"
                              exit 1
                          fi
                      else
                          echo "Performing fresh AWS CLI installation..." | tee -a "$LOG_PATH"
                          if ! ./aws/install --bin-dir /usr/local/bin --install-dir /usr/local/aws-cli; then
                              echo "Failed to install AWS CLI" | tee -a "$LOG_PATH"
                              exit 1
                          fi
                      fi

                      # Clean up installation files
                      cd /
                      rm -rf "$TEMP_DIR"

                      # Create symlinks if needed
                      if [ ! -f "/usr/bin/aws" ]; then
                          ln -s /usr/local/bin/aws /usr/bin/aws
                      fi

                      # Verify installation
                      if ! command -v aws &> /dev/null; then
                          echo "AWS CLI installation failed - command not found" | tee -a "$LOG_PATH"
                          exit 1
                      fi

                      AWS_VERSION=$(aws --version 2>&1)
                      echo "AWS CLI version: $AWS_VERSION" | tee -a "$LOG_PATH"

                      echo $(date -u) "AWS CLI installation completed successfully" | tee -a "$LOG_PATH"

                      echo $(date -u) "Downloading Session Manager Packages" | tee -a "$LOG_PATH"

                      # Set DCV Session Manager version
                      TMP_DIR=$(mktemp -d)
                      trap 'rm -rf -- "$TMP_DIR"' ERR
                      DCV_SM_VERSION="2024.0.457-1"

                      if [[ "${AWS::Partition}" == "aws-iso" || "${AWS::Partition}" == "aws-iso-b" ]]; then
                          echo "Running in TS/Secret region, using S3 bucket for resources..." | tee -a "$LOG_PATH"
                          RESOURCE_PATH="s3://${DcvResourceBucket}"

                          # Download Packages from S3
                          if [ "$package_manager" = apt ]; then
                              aws s3 cp "$RESOURCE_PATH/2024.0/SessionManagerBrokers/nice-dcv-session-manager-broker_all.$package_type.$package_extension" \
                                  "$TMP_DIR/nice-dcv-session-manager-broker.$package_extension" \
                                  --no-verify-ssl
                          else
                              aws s3 cp "$RESOURCE_PATH/2024.0/SessionManagerBrokers/nice-dcv-session-manager-broker-$DCV_SM_VERSION.$package_type.noarch.$package_extension" \
                                  "$TMP_DIR/nice-dcv-session-manager-broker.$package_extension" \
                                  --no-verify-ssl
                          fi

                      else
                            echo "Running in Commercial/GovCloud region, using CloudFront for resources..."
                            CLOUDFRONT_PREFIX="https://d1uj6qtbmh3dt5.cloudfront.net"

                            # Download Packages from CloudFront
                            if [ "$package_manager" = apt ]; then
                                curl -o "$TMP_DIR/NICE-GPG-KEY" "$CLOUDFRONT_PREFIX/NICE-GPG-KEY"
                                gpg --import "$TMP_DIR/NICE-GPG-KEY"
                                curl -o "$TMP_DIR/nice-dcv-session-manager-broker.$package_extension" "$CLOUDFRONT_PREFIX/nice-dcv-session-manager-broker_all.$package_type.$package_extension"
                            else
                                rpm --import "$CLOUDFRONT_PREFIX"/NICE-GPG-KEY
                                curl -o "$TMP_DIR/nice-dcv-session-manager-broker.$package_extension" "$CLOUDFRONT_PREFIX/nice-dcv-session-manager-broker-$package_type.noarch.$package_extension"
                            fi
                      fi

                      # Install Packages
                      for package_pattern in "nice-dcv-session-manager-broker.$package_extension"; do
                          package_full_path=$(find "$TMP_DIR" -name "$package_pattern")
                          "$package_manager" install -y "$package_full_path"
                      done

                      # Enable and start DCV Session Manager service
                      systemctl start dcv-session-manager-broker
                      systemctl enable dcv-session-manager-broker

                      # Configure DCV Session Manager
                      CONFIG_PATH="/etc/dcv-session-manager-broker/session-manager-broker.properties"
                      TOKEN=`curl -X PUT "http://169.254.169.254/latest/api/token" -H "X-aws-ec2-metadata-token-ttl-seconds: 21600"`
                      REGION=$(curl -H "X-aws-ec2-metadata-token: $TOKEN" http://169.254.169.254/latest/meta-data/placement/region)
                      ## Enable the gateway in config
                      sed -i '/^enable-gateway/s/=.*$/= true/' "$CONFIG_PATH"
                      ## Uncomment the broker connector host and port in config
                      sed -i '/gateway-to-broker-connector-https-port/s/^#\s//g' "$CONFIG_PATH"
                      sed -i '/gateway-to-broker-connector-bind-host/s/^#\s//g' "$CONFIG_PATH"

                      # Restart the broker service
                      systemctl restart dcv-session-manager-broker.service

                      # Clean Up
                      rm -rf "$TMP_DIR"

                      echo $(date -u) "DCV Session Manager Installation Completed" | tee -a "$LOG_PATH"

  DcvSessionMgrStigComponent:
    Type: AWS::ImageBuilder::Component
    Properties:
      Name: dcv-session-mgr-stig-build-linux-high
      Description: Implement STIG security controls for DCV Session Manager Instance
      Platform: Linux
      Version: !Ref SemVer
      SupportedOsVersions:
        - Red Hat Enterprise Linux 8
        - Red Hat Enterprise Linux 9
      Data: !Sub |-
        name: 'STIG-Build-Linux-High'
        description: 'Applies the high, medium, and low severity STIG settings for Red Hat Enterprise Linux (RHEL) 8/9 instances. For more information, see https://docs.aws.amazon.com/imagebuilder/latest/userguide/toe-stig.html.'
        schemaVersion: 1.0
        constants:
          - FileName:
              type: string
              value: 'LinuxAWSConfigureSTIG_2025_Q1_3.tgz'
          - Level:
              type: string
              value: 'High'

        parameters:
          - InstallPackages:
              type: string
              default: "No"
              description: "(Optional) Installs the required STIG packages for maximum compliance."
          - SetDoDConsentBanner:
              type: string
              default: "No"
              description: "(Optional) Sets the Department of Defense (DoD) consent banner to display at login."

        phases:
          - name: build
            steps:
              - name: ValidateInstallPackagesInput
                action: Assert
                onFailure: Abort
                inputs:
                  patternMatches: '^[Yy][eE][sS]$|^[nN][oO]$'
                  value: '{{ InstallPackages }}'

              - name: ValidateSetDoDConsentBannerInput
                action: Assert
                onFailure: Abort
                inputs:
                  patternMatches: '^[Yy][eE][sS]$|^[nN][oO]$'
                  value: '{{ SetDoDConsentBanner }}'

              - name: MakeStagingDIR
                action: ExecuteBash
                inputs:
                  commands:
                    - |
                      mktemp -d

              - name: SettingStagingDirPermissions
                action: SetFolderPermissions
                inputs:
                  - path: '{{build.MakeStagingDIR.outputs.stdout}}'
                    permissions: 0700

              - name: SetUpSourceFile
                action: ExecuteBash
                onFailure: Abort
                inputs:
                  commands:
                    - |
                      FILE=/etc/os-release
                      if [ -e "$FILE" ]; then
                        . "$FILE"
                        RELEASE="$ID$VERSION_ID"
                      else
                        echo "The file $FILE does not exist. Exiting."
                        exit 1
                      fi

                      sourceFile='{{build.MakeStagingDIR.outputs.stdout}}/releaseinfo.cfg'

                      case "$RELEASE" in
                        amzn2023|centos8*|rhel8*)
                          echo 'PACKAGE_MANAGER=yum' >> "$sourceFile"
                          echo 'SCRIPT=RHEL8stigconfig.sh' >> "$sourceFile"
                          echo 'SEARCH="rpm -q"' >> "$sourceFile"
                          echo 'SHELL_CMD=sh' >> "$sourceFile"
                          ;;
                        centos9*|rhel9*)
                          echo 'PACKAGE_MANAGER=dnf' >> "$sourceFile"
                          echo 'SCRIPT=RHEL9stigconfig.sh' >> "$sourceFile"
                          echo 'SEARCH="rpm -q"' >> "$sourceFile"
                          echo 'SHELL_CMD=sh' >> "$sourceFile"
                          ;;
                        *)
                          echo "Operating System '$RELEASE' is not supported. Exiting."
                          exit 1
                          ;;
                      esac


              - name: VerifyPrerequisite
                action: ExecuteBash
                onFailure: Abort
                inputs:
                  commands:
                    - |
                      sourceFile='{{build.MakeStagingDIR.outputs.stdout}}'/releaseinfo.cfg
                      source "$sourceFile"
                      if ! eval $SEARCH tar; then
                        $PACKAGE_MANAGER install -y tar
                        echo INSTALLED_TAR=true >> "$sourceFile"
                      else
                        echo INSTALLED_TAR=false >> "$sourceFile"
                      fi

              - name: DownloadSTIG
                action: S3Download
                inputs:
                  - source: s3://${DcvResourceBucket}/{{ FileName }}
                    destination: '{{build.MakeStagingDIR.outputs.stdout}}/{{ FileName }}'

              - name: UnzipSTIG
                action: ExecuteBash
                onFailure: Continue
                inputs:
                  commands:
                    - |
                      source '{{build.MakeStagingDIR.outputs.stdout}}'/releaseinfo.cfg
                      sudo tar -xvf '{{build.MakeStagingDIR.outputs.stdout}}/{{ FileName }}' -C '{{build.MakeStagingDIR.outputs.stdout}}/'

                      if [ $(echo $?) = 0 ]; then
                        $INSTALLED_TAR && $PACKAGE_MANAGER remove -y tar
                        exit 0
                      else
                        echo "File extraction failed. Exiting"
                        $INSTALLED_TAR && $PACKAGE_MANAGER remove -y tar
                        exit 1
                      fi

              - name: ConfigureSTIG
                action: ExecuteBash
                onFailure: Continue
                maxAttempts: 5
                inputs:
                  commands:
                    - |
                      source '{{build.MakeStagingDIR.outputs.stdout}}'/releaseinfo.cfg
                      ($SHELL {{build.MakeStagingDIR.outputs.stdout}}/$SCRIPT "{{ Level }}" "{{ InstallPackages }}" "{{ SetDoDConsentBanner }}" && exit 0) || {
                        echo "Failed to run STIG"
                        exit 1
                      }

              - name: Cleanup
                action: DeleteFolder
                inputs:
                  - path: '{{build.MakeStagingDIR.outputs.stdout}}'
                    force: true

  DcvSessionMgrScapComponent:
    Type: AWS::ImageBuilder::Component
    Properties:
      Name: dcv-session-mgr-scap-compliance-checker
      Description: SCAP Compliance Checker (SCC) for RHEL with STIG Q1 2025 Benchmarks
      Platform: Linux
      Version: !Ref SemVer
      SupportedOsVersions:
        - Red Hat Enterprise Linux 8
        - Red Hat Enterprise Linux 9
      Data: !Sub |-
        name: 'SCAP Compliance Checker (SCC) 5.10.2 with all current STIG Q1 2025 Benchmarks'
        description: 'Installs and runs SCAP Compliance Checker (SCC) 5.10.2 for Red Hat Enterprise Linux (RHEL) 8/9 with all current STIG Q1 2025 benchmarks. SCC supports the AMD64 architecture. Other architectures are not currently supported or contain issues within the EC2 environment. For more information, see https://docs.aws.amazon.com/imagebuilder/latest/userguide/toe-stig.html.'
        schemaVersion: 1.0
        constants:
          - SCCFileName:
              type: string
              value: 'scc-5.10.2_rhel_x86_64.tar.gz'
          - BenchmarksFileName:
              type: string
              value: 'benchmarks_2025_Q1.zip'
          - SCCVersion:
              type: string
              value: '5.10.2'
          - SCCExe:
              type: string
              value: '/opt/scc/cscc'
          - SCCResultsDir:
              type: string
              value: '/opt/scc/SCCResults'
          - SupportedVersions:
              type: string
              value: 'rhel8x86_64,rhel9x86_64'
          - OSFile:
              type: string
              value: '/etc/os-release'

        phases:
          - name: build
            steps:
              - name: RebootStep
                if:
                  and:
                      - binaryExists: 'apt-get'
                action: Reboot
                maxAttempts: 2

              - name: DetermineArchitecture
                action: ExecuteBash
                onFailure: Abort
                if:
                  fileExists: '{{ OSFile }}'
                  else: Abort
                inputs:
                  commands:
                    - |
                      ARCH=$(uname -m)
                      if [[ $ARCH != "x86_64" ]]; then
                        echo "Architecture is currently not supported, or has bugs preventing installation. Failing."
                        exit 1
                      elif [[ $(grep -i "ubuntu" '{{ OSFile }}') ]]; then
                        [[ $ARCH == "x86_64" ]] && ARCH="amd64"
                        echo $ARCH
                      else
                        echo $ARCH
                      fi

              - name: OperatingSystemRelease
                action: ExecuteBash
                onFailure: Abort
                inputs:
                  commands:
                    - |
                      ARCH='{{ build.DetermineArchitecture.outputs.stdout }}'
                      SUPPORTED_VERSIONS=('{{ SupportedVersions }}')
                      . '{{ OSFile }}'
                      OS_VERSION=$(echo "$ID$VERSION_ID" | cut -d"." -f 1)
                      IFS=","
                      if [[ $SUPPORTED_VERSIONS[*] =~ "$OS_VERSION$ARCH" ]]; then
                        echo $OS_VERSION
                      else
                        echo "The SCAP Compliance Checker {{ SCCVersion }} doesn't support $OS_VERSION. Exiting."
                        exit 1
                      fi

              - name: StagingPath
                action: ExecuteBash
                onFailure: Abort
                inputs:
                  commands:
                    - mktemp -d

              - name: SetUpSourceFile
                action: ExecuteBash
                onFailure: Abort
                inputs:
                  commands:
                    - |
                      RELEASE='{{ build.OperatingSystemRelease.outputs.stdout }}'
                      STAGING_PATH="{{build.StagingPath.outputs.stdout}}"
                      sourceFile=$STAGING_PATH/releaseinfo.cfg

                      case "$RELEASE" in
                        rhel*)
                          sccInstaller="scc-{{ SCCVersion }}.$RELEASE.$(uname -m).rpm"
                          echo "INSTALLER_PATH=$STAGING_PATH/$sccInstaller" >> "$sourceFile"
                          echo 'PACKAGE_MANAGER=yum' >> "$sourceFile"
                          echo "SEARCH=\"rpm -q\"" >> "$sourceFile"
                          echo "INSTALL_CMD=\"rpm -ivh\"" >> "$sourceFile"
                          ;;
                        ubuntu*)
                          [[ $(uname -m) == "x86_64" ]] && ARCH="amd64" || ARCH="arm64"
                          sccInstaller="scc-{{ SCCVersion }}.$RELEASE.$ARCH.deb"
                          echo "INSTALLER_PATH=$STAGING_PATH/$sccInstaller" >> "$sourceFile"
                          echo 'PACKAGE_MANAGER=apt-get' >> "$sourceFile"
                          echo "SEARCH=\"dpkg -l\"" >> "$sourceFile"
                          echo "INSTALL_CMD=\"dpkg -i -E\"" >> "$sourceFile"
                          ;;
                        *)
                          echo "Operating System '$RELEASE' is not supported. Exiting."
                          exit 1
                          ;;
                      esac

              - name: VerifyPrerequisite
                action: ExecuteBash
                onFailure: Abort
                inputs:
                  commands:
                    - |
                      sourceFile='{{build.StagingPath.outputs.stdout}}'/releaseinfo.cfg
                      source "$sourceFile"
                      if ! eval $SEARCH tar; then
                        $PACKAGE_MANAGER install -y tar
                        echo INSTALLED_TAR=true >> "$sourceFile"
                      else
                        echo INSTALLED_TAR=false >> "$sourceFile"
                      fi

              - name: DownloadSCCAndBenchmarks
                action: S3Download
                inputs:
                  - source: s3://${DcvResourceBucket}/{{ SCCFileName }}
                    destination: '{{ build.StagingPath.outputs.stdout }}/{{ SCCFileName }}'
                    overwrite: true
          
                  - source: s3://${DcvResourceBucket}/{{ BenchmarksFileName }}
                    destination: '{{ build.StagingPath.outputs.stdout }}/{{ BenchmarksFileName }}'
                    overwrite: true

              - name: DecompressSCC
                action: ExecuteBash
                inputs:
                  commands:
                    - tar -xvf '{{ build.StagingPath.outputs.stdout }}/{{ SCCFileName }}' -C '{{ build.StagingPath.outputs.stdout }}/' || ( echo "File failed to extract properly. Unable to continue." ; exit 1; )

              - name: InstallSCC
                action: ExecuteBash
                maxAttempts: 20
                inputs:
                  commands:
                    - |
                      sourceFile='{{build.StagingPath.outputs.stdout}}'/releaseinfo.cfg
                      source "$sourceFile"

                      echo "Attempting to install SCAP Compliance Checker {{ SCCVersion }}"
                      eval $INSTALL_CMD $INSTALLER_PATH || {
                          echo 'Failed to install SCAP Compliance Checker. Exiting.'
                          exit 1
                      }

              - name: InstallSCCBenchmarks
                action: ExecuteBash
                maxAttempts: 20
                inputs:
                  commands:
                    - |
                      sccBenchmark='{{ build.StagingPath.outputs.stdout }}/{{ BenchmarksFileName }}'
                      {{ SCCExe }} -ua || {
                          echo "Failed to remove the preinstalled benchmarks and load the new ones. Exiting."
                          exit 1
                      }

                      {{ SCCExe }} -is --force $sccBenchmark || {
                          echo "Failed to install the SCC benchmarks. Exiting."
                          exit 1
                      }

              - name: UpdateSCCBenchmarks
                action: ExecuteBash
                maxAttempts: 20
                onFailure: Continue
                inputs:
                  commands:
                    - |
                      {{ SCCExe }} --checkForContentUpdates --installUpdates || {
                        echo "Failed to update SCC Benchmarks"
                        exit 1
                      }

              - name: MakeSCCResultsDIR
                action: CreateFolder
                inputs:
                  - path: '{{ SCCResultsDir }}'
                    permissions: 755

              - name: InvokeSCC
                action: ExecuteBash
                onFailure: Continue
                maxAttempts: 20
                inputs:
                  commands:
                    - |
                      {{ SCCExe }} -q -u {{ SCCResultsDir }} || {
                        echo 'Failed to run SCAP Compliance Checker. Exiting.'
                        exit 1
                      }

              - name: GetSCCResults
                action: ExecuteBash
                inputs:
                  commands:
                    - |
                      RELEASE='{{ build.OperatingSystemRelease.outputs.stdout }}'
                      xmlPath={{ SCCResultsDir }}/Sessions/$(date "+%Y-%m-%d*")/Results/SCAP/XML
                      resultFile=$(find $xmlPath -type f -name "*_XCCDF-Results_*")
                      if [ $resultFile ]; then
                        score=$(grep -P 'spawar-adjusted">' $resultFile | awk -F"[<>]" '{print $3}')
                        if [ "$score" ]; then
                          echo "SCC gave {{ build.OperatingSystemRelease.outputs.stdout }} a compliance score of $score%."
                        else
                          echo "SCC didn't generate a score. Failing"
                          exit 1
                        fi
                      else
                        echo "Did not find any SCAP results files. Failing."
                        exit 1
                      fi

              - name: TarCleanup
                action: ExecuteBash
                inputs:
                  commands:
                    - |
                      sourceFile='{{build.StagingPath.outputs.stdout}}'/releaseinfo.cfg
                      source "$sourceFile"
                      $INSTALLED_TAR && $PACKAGE_MANAGER remove -y tar
                      exit 0

              - name: Cleanup
                action: DeleteFolder
                inputs:
                  - path: '{{ build.StagingPath.outputs.stdout }}'
                    force: true


  DcvSessionMgrAmiRecipe:
    Type: AWS::ImageBuilder::ImageRecipe
    Properties:
      Name: dcv-session-mgr-ami-recipe
      ParentImage: !Ref ParentImage
      Version: !Ref SemVer
      Components:
        - !If
          - IsLowSide
          - ComponentArn: !Sub arn:${AWS::Partition}:imagebuilder:${AWS::Region}:aws:component/aws-cli-version-2-linux/x.x.x
          - !Ref AWS::NoValue
        - ComponentArn: !GetAtt DcvSessionMgrAmi.Arn
        - ComponentArn: !GetAtt DcvSessionMgrStigComponent.Arn
        - ComponentArn: !GetAtt DcvSessionMgrScapComponent.Arn
      AdditionalInstanceConfiguration:
        SystemsManagerAgent:
          UninstallAfterBuild: false
        UserDataOverride:
          Fn::Base64: !Sub |
            #!/bin/bash
            set -e

            # cat >/etc/environment <<EOF
            # HTTP_PROXY=${ProxyServerAddress}:3128
            # HTTPS_PROXY=${ProxyServerAddress}:3128
            # NO_PROXY=${NoProxyList}
            # http_proxy=${ProxyServerAddress}:3128
            # https_proxy=${ProxyServerAddress}:3128
            # no_proxy=${NoProxyList}
            # EOF
            # source /etc/environment

            # mkdir -p /etc/systemd/system/amazon-ssm-agent.service.d
            # cat > /etc/systemd/system/amazon-ssm-agent.service.d/proxy.conf <<EOF
            # [Service]
            # EnvironmentFile=/etc/environment
            # PassEnvironment=HTTP_PROXY,HTTPS_PROXY,NO_PROXY,http_proxy,https_proxy,no_proxy
            # EOF

            # cat >> /etc/yum.conf <<EOF
            # proxy=$https_proxy
            # EOF

            # [ansible-2-for-rhel-8-rhui-rpms]
            # name=RPMs on S3 bucket ansible-2-for-rhel-8-rhui-rpms - $basearch
            # baseurl=https://vi2e-yum.s3-us-gov-west-1.amazonaws.com/RHEL8/ansible-2-for-rhel-8-rhui-rpms
            # enabled=1
            # gpgcheck=1
            # proxy=_none_

            # [rhel-8-appstream-rhui-rpms]
            # name=RPMs on S3 bucket rhel-8-appstream-rhui-rpms - $basearch
            # baseurl=https://vi2e-yum.s3-us-gov-west-1.amazonaws.com/RHEL8/rhel-8-appstream-rhui-rpms
            # enabled=1
            # gpgcheck=1
            # proxy=_none_

            # [rhel-8-baseos-rhui-rpms]
            # name=RPMs on S3 bucket rhel-8-baseos-rhui-rpms - $basearch
            # baseurl=https://vi2e-yum.s3-us-gov-west-1.amazonaws.com/RHEL8/rhel-8-baseos-rhui-rpms
            # enabled=1
            # gpgcheck=1
            # proxy=_none_

            # [rhui-client-config-server-8]
            # name=RPMs on S3 bucket rhui-client-config-server-8 - $basearch
            # baseurl=https://vi2e-yum.s3-us-gov-west-1.amazonaws.com/RHEL8/rhui-client-config-server-8
            # enabled=1
            # gpgcheck=1
            # proxy=_none_

            # [epel-modular]
            # name=RPMs on S3 bucket epel-modular - $basearch
            # baseurl=https://vi2e-yum.s3-us-gov-west-1.amazonaws.com/RHEL8/epel-modular
            # enabled=1
            # gpgcheck=1
            # proxy=_none_

            # [epel]
            # name=RPMs on S3 bucket epel - $basearch
            # baseurl=https://vi2e-yum.s3-us-gov-west-1.amazonaws.com/RHEL8/epel
            # enabled=1
            # gpgcheck=1

            # Install SSM Agent
            arch=$(arch)
            if [ "$arch" = "arm64" ]; then
                yum install -y https://s3.${AWS::Region}.${AWS::URLSuffix}/amazon-ssm-${AWS::Region}/latest/linux_arm64/amazon-ssm-agent.rpm --nogpgcheck
            else # x86_64
                yum install -y https://s3.${AWS::Region}.${AWS::URLSuffix}/amazon-ssm-${AWS::Region}/latest/linux_amd64/amazon-ssm-agent.rpm --nogpgcheck
            fi

            # Start SSM Agent
            systemctl daemon-reload
            systemctl restart amazon-ssm-agent

  DcvSessionMgrAmiDistConfig:
    Type: AWS::ImageBuilder::DistributionConfiguration
    Properties:
      Name: dcv-session-mgr-ami-dist-config
      Distributions:
        - Region: !Ref AWS::Region
          AmiDistributionConfiguration:
            Name: dcv-session-mgr-ami-{{ imagebuilder:buildDate }}
            Description: NICE DCV AMI
            TargetAccountIds:
              - !Ref AWS::AccountId

  DcvSessionMgrAmiRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${IamPrefix}_image_builder_infra_instance_role
      PermissionsBoundary: !Ref PermissionsBoundaryPolicyArn
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
      ManagedPolicyArns:
        - !Sub arn:${AWS::Partition}:iam::aws:policy/AmazonSSMManagedInstanceCore
        - !Sub arn:${AWS::Partition}:iam::aws:policy/EC2InstanceProfileForImageBuilder
      Policies:
        - PolicyName: !Sub ${IamPrefix}-dcv-session-manager-policy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - ssm:PutParameter
                  - ssm:GetParameter
                  - ssm:DeleteParameter
                Resource: !Sub arn:${AWS::Partition}:ssm:${AWS::Region}:${AWS::AccountId}:parameter/dcv-*
        - PolicyName: KMS_Policy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Sid: AllowKMS
                Effect: Allow
                Action: kms:Decrypt
                Resource: !GetAtt DcvSessionMgrPipelineKmsKey.Arn
        - !If
          - HasDcvResourceBucket
          - PolicyName: CustomBucketAccess
            PolicyDocument:
              Version: "2012-10-17"
              Statement:
                - Effect: Allow
                  Action:
                    - s3:GetObject
                    - s3:ListBucket
                  Resource:
                    - !Sub arn:${AWS::Partition}:s3:::${DcvResourceBucket}
                    - !Sub arn:${AWS::Partition}:s3:::${DcvResourceBucket}/*
          - !Ref AWS::NoValue

  DcvSessionMgrAmiInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      InstanceProfileName: !Sub ${IamPrefix}-dcv-session-mgr-ami-instance-profile
      Roles:
        - !Ref DcvSessionMgrAmiRole

  DcvAmiCreationSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: SG default ports for DCV
      SecurityGroupEgress:
        - CidrIp: !Ref OutboundCidrIp
          IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          Description: Allow outbound traffic on 443
        - CidrIp: !Ref OutboundCidrIp
          IpProtocol: tcp
          FromPort: 3128
          ToPort: 3128
          Description: Allow outbound traffic on 3128
      VpcId: !Ref VpcId

  dcvsessionmgramiinfraconfig:
    Type: AWS::ImageBuilder::InfrastructureConfiguration
    Properties:
      InstanceProfileName: !Ref DcvSessionMgrAmiInstanceProfile
      InstanceTypes:
        - !Ref ParentImageInstanceType
      Name: dcv-session-mgr-ami-infra-config
      SecurityGroupIds:
        - !GetAtt DcvAmiCreationSecurityGroup.GroupId
      SubnetId: !Ref SubnetId

  DcvSessionMgrAmiPipeline:
    Type: AWS::ImageBuilder::ImagePipeline
    Properties:
      Name: dcv-session-mgr-ami
      ImageRecipeArn: !GetAtt DcvSessionMgrAmiRecipe.Arn
      InfrastructureConfigurationArn: !GetAtt dcvsessionmgramiinfraconfig.Arn
      DistributionConfigurationArn: !GetAtt DcvSessionMgrAmiDistConfig.Arn

  DcvSessionMgrAmiNotificationTopic:
    Type: AWS::SNS::Topic
    Properties:
      DisplayName: DCV Session Manager AMI Creation Notification Topic
      TopicName: dcv-session-mgr-ami-notification-topic
      KmsMasterKeyId: alias/aws/sns

  DcvSessionMgrAmiNotificationTopicSubscription:
    Type: AWS::SNS::Subscription
    Properties:
      TopicArn: !Ref DcvSessionMgrAmiNotificationTopic
      Protocol: email
      Endpoint: !Ref EmailEndPoint
